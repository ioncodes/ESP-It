#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_TrapProjectile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_TrapProjectile.B_TrapProjectile_C
// 0x00F8 (0x0390 - 0x0298)
class AB_TrapProjectile_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       PropSuckSphere;                                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       WitchSuckSphere;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SuckAudioWitch;                                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SuckAudioNormal;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      VacuumTrapEffect;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SK_MagicSucker;                                    // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            SuckingComponents;                                 // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AActor*>                         SuckingWitches;                                    // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UPrimitiveComponent*>            SuckingDecoyComponents;                            // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Lifetime;                                          // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NoSuckTime;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExpireTime;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SoundTime;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentLifeTime;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentSuckTime;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         SuckingDecoyWitches;                               // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UCurveFloat*                            SuckPitchCurve;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimerIncrement;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EndSoundPlayed;                                    // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExpireEffectShown;                                 // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5928[0x6];                                     // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InitialSpeed;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSucking;                                         // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5929[0x7];                                     // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnReadyForTearUp;                                  // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        Lightmass;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeavyMass;                                         // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddForceToPrimitiveComponent(class UPrimitiveComponent* SuckComponent, bool IsWitch);
	void BeginOverlapPropSphere(class AActor* OverlapActor, class UPrimitiveComponent* OverlapPrimitiveComponent);
	void BeginOverlapWitchSphere(class AActor* OverlapActor, class UPrimitiveComponent* OverlapPrimitiveComponent);
	void BeginPlaySetup();
	void BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__B_TrapProjectile_OuterSphere_K2Node_ComponentBoundEvent_7_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_8_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__B_TrapProjectile_PropSuckSphere_K2Node_ComponentBoundEvent_9_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void EndOverlapPropSphere(class AActor* OverlapActor, class UPrimitiveComponent* OverlapPrimitiveComponent);
	void EndOverlapWitchSphere(class AActor* OverlapActor, class UPrimitiveComponent* OverlapPrimitiveComponent);
	void ExecuteUbergraph_B_TrapProjectile(int32 EntryPoint);
	void GetSuckedWitchesCount(int32* Count);
	void IncrementLifeTime();
	void InitializeRules();
	void LaunchCharacter(class ACharacter* Character, bool IsWitch);
	void OnReadyForTearUp__DelegateSignature();
	void PlayDestroyEffects(const struct FVector& Location, bool WitchTrapped);
	void PlayDestroyEffectsMulti(const struct FVector& Location, bool WitchTrapped);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void StartSucking();
	void StartSuckingMulti();
	void StartVacuum();
	void StartWitchDebuff(class AActor* Actor);
	void StopHitDetectionAndMakeHeavy();
	void StopWitchDebuff(class AActor* Actor);
	void SuckPrimitiveComponent(class UPrimitiveComponent* SuckComponent);
	void SuckPrimitiveComponentsAndLaunchWitches();
	void SuckWitch(class AB_Witch_C* Param_SuckWitch);
	void TearDown();
	void TearDownMulticast();
	void TearDownPoolObject();
	void TearUp(const struct FTransform& SpawnTransform, class AActor* Param_Owner, class APawn* Param_Instigator);
	void TearUpMulticast(const struct FTransform& SpawnTransform, class AActor* Param_Owner, class APawn* Param_Instigator);
	void TearUpPoolObject(const struct FTransform& SpawnTransform, class AActor* Param_Owner, class APawn* Param_Instigator);
	void UpdateEffect(int32 WitchCount);
	void UpdateEffectMulti(int32 WitchCount);
	void UpdateSoundPitches();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_TrapProjectile_C">();
	}
	static class AB_TrapProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_TrapProjectile_C>();
	}
};
static_assert(alignof(AB_TrapProjectile_C) == 0x000008, "Wrong alignment on AB_TrapProjectile_C");
static_assert(sizeof(AB_TrapProjectile_C) == 0x000390, "Wrong size on AB_TrapProjectile_C");
static_assert(offsetof(AB_TrapProjectile_C, UberGraphFrame) == 0x000298, "Member 'AB_TrapProjectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, PropSuckSphere) == 0x0002A0, "Member 'AB_TrapProjectile_C::PropSuckSphere' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, WitchSuckSphere) == 0x0002A8, "Member 'AB_TrapProjectile_C::WitchSuckSphere' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SuckAudioWitch) == 0x0002B0, "Member 'AB_TrapProjectile_C::SuckAudioWitch' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SuckAudioNormal) == 0x0002B8, "Member 'AB_TrapProjectile_C::SuckAudioNormal' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, VacuumTrapEffect) == 0x0002C0, "Member 'AB_TrapProjectile_C::VacuumTrapEffect' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SK_MagicSucker) == 0x0002C8, "Member 'AB_TrapProjectile_C::SK_MagicSucker' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, Box) == 0x0002D0, "Member 'AB_TrapProjectile_C::Box' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SuckingComponents) == 0x0002D8, "Member 'AB_TrapProjectile_C::SuckingComponents' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SuckingWitches) == 0x0002E8, "Member 'AB_TrapProjectile_C::SuckingWitches' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SuckingDecoyComponents) == 0x0002F8, "Member 'AB_TrapProjectile_C::SuckingDecoyComponents' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, Lifetime) == 0x000308, "Member 'AB_TrapProjectile_C::Lifetime' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, NoSuckTime) == 0x000310, "Member 'AB_TrapProjectile_C::NoSuckTime' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, ExpireTime) == 0x000318, "Member 'AB_TrapProjectile_C::ExpireTime' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SoundTime) == 0x000320, "Member 'AB_TrapProjectile_C::SoundTime' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, CurrentLifeTime) == 0x000328, "Member 'AB_TrapProjectile_C::CurrentLifeTime' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, CurrentSuckTime) == 0x000330, "Member 'AB_TrapProjectile_C::CurrentSuckTime' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SuckingDecoyWitches) == 0x000338, "Member 'AB_TrapProjectile_C::SuckingDecoyWitches' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, SuckPitchCurve) == 0x000348, "Member 'AB_TrapProjectile_C::SuckPitchCurve' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, TimerIncrement) == 0x000350, "Member 'AB_TrapProjectile_C::TimerIncrement' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, EndSoundPlayed) == 0x000358, "Member 'AB_TrapProjectile_C::EndSoundPlayed' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, ExpireEffectShown) == 0x000359, "Member 'AB_TrapProjectile_C::ExpireEffectShown' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, InitialSpeed) == 0x000360, "Member 'AB_TrapProjectile_C::InitialSpeed' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, IsSucking) == 0x000368, "Member 'AB_TrapProjectile_C::IsSucking' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, OnReadyForTearUp) == 0x000370, "Member 'AB_TrapProjectile_C::OnReadyForTearUp' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, Lightmass) == 0x000380, "Member 'AB_TrapProjectile_C::Lightmass' has a wrong offset!");
static_assert(offsetof(AB_TrapProjectile_C, HeavyMass) == 0x000388, "Member 'AB_TrapProjectile_C::HeavyMass' has a wrong offset!");

}

