#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FieldSystemEngine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Chaos_structs.hpp"


namespace SDK::Params
{

// Function FieldSystemEngine.FieldSystemComponent.AddFieldCommand
// 0x0018 (0x0018 - 0x0000)
struct FieldSystemComponent_AddFieldCommand final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldPhysicsType                             Target;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BD[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFieldSystemMetaData*                   MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFieldNodeBase*                         Field;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldSystemComponent_AddFieldCommand) == 0x000008, "Wrong alignment on FieldSystemComponent_AddFieldCommand");
static_assert(sizeof(FieldSystemComponent_AddFieldCommand) == 0x000018, "Wrong size on FieldSystemComponent_AddFieldCommand");
static_assert(offsetof(FieldSystemComponent_AddFieldCommand, Enabled) == 0x000000, "Member 'FieldSystemComponent_AddFieldCommand::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_AddFieldCommand, Target) == 0x000001, "Member 'FieldSystemComponent_AddFieldCommand::Target' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_AddFieldCommand, MetaData) == 0x000008, "Member 'FieldSystemComponent_AddFieldCommand::MetaData' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_AddFieldCommand, Field) == 0x000010, "Member 'FieldSystemComponent_AddFieldCommand::Field' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemComponent.AddPersistentField
// 0x0018 (0x0018 - 0x0000)
struct FieldSystemComponent_AddPersistentField final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldPhysicsType                             Target;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BE[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFieldSystemMetaData*                   MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFieldNodeBase*                         Field;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldSystemComponent_AddPersistentField) == 0x000008, "Wrong alignment on FieldSystemComponent_AddPersistentField");
static_assert(sizeof(FieldSystemComponent_AddPersistentField) == 0x000018, "Wrong size on FieldSystemComponent_AddPersistentField");
static_assert(offsetof(FieldSystemComponent_AddPersistentField, Enabled) == 0x000000, "Member 'FieldSystemComponent_AddPersistentField::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_AddPersistentField, Target) == 0x000001, "Member 'FieldSystemComponent_AddPersistentField::Target' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_AddPersistentField, MetaData) == 0x000008, "Member 'FieldSystemComponent_AddPersistentField::MetaData' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_AddPersistentField, Field) == 0x000010, "Member 'FieldSystemComponent_AddPersistentField::Field' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemComponent.ApplyLinearForce
// 0x0028 (0x0028 - 0x0000)
struct FieldSystemComponent_ApplyLinearForce final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C0[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldSystemComponent_ApplyLinearForce) == 0x000008, "Wrong alignment on FieldSystemComponent_ApplyLinearForce");
static_assert(sizeof(FieldSystemComponent_ApplyLinearForce) == 0x000028, "Wrong size on FieldSystemComponent_ApplyLinearForce");
static_assert(offsetof(FieldSystemComponent_ApplyLinearForce, Enabled) == 0x000000, "Member 'FieldSystemComponent_ApplyLinearForce::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyLinearForce, Direction) == 0x000008, "Member 'FieldSystemComponent_ApplyLinearForce::Direction' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyLinearForce, Magnitude) == 0x000020, "Member 'FieldSystemComponent_ApplyLinearForce::Magnitude' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemComponent.ApplyPhysicsField
// 0x0018 (0x0018 - 0x0000)
struct FieldSystemComponent_ApplyPhysicsField final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldPhysicsType                             Target;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFieldSystemMetaData*                   MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFieldNodeBase*                         Field;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldSystemComponent_ApplyPhysicsField) == 0x000008, "Wrong alignment on FieldSystemComponent_ApplyPhysicsField");
static_assert(sizeof(FieldSystemComponent_ApplyPhysicsField) == 0x000018, "Wrong size on FieldSystemComponent_ApplyPhysicsField");
static_assert(offsetof(FieldSystemComponent_ApplyPhysicsField, Enabled) == 0x000000, "Member 'FieldSystemComponent_ApplyPhysicsField::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyPhysicsField, Target) == 0x000001, "Member 'FieldSystemComponent_ApplyPhysicsField::Target' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyPhysicsField, MetaData) == 0x000008, "Member 'FieldSystemComponent_ApplyPhysicsField::MetaData' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyPhysicsField, Field) == 0x000010, "Member 'FieldSystemComponent_ApplyPhysicsField::Field' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemComponent.ApplyRadialForce
// 0x0028 (0x0028 - 0x0000)
struct FieldSystemComponent_ApplyRadialForce final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C3[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldSystemComponent_ApplyRadialForce) == 0x000008, "Wrong alignment on FieldSystemComponent_ApplyRadialForce");
static_assert(sizeof(FieldSystemComponent_ApplyRadialForce) == 0x000028, "Wrong size on FieldSystemComponent_ApplyRadialForce");
static_assert(offsetof(FieldSystemComponent_ApplyRadialForce, Enabled) == 0x000000, "Member 'FieldSystemComponent_ApplyRadialForce::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyRadialForce, Position) == 0x000008, "Member 'FieldSystemComponent_ApplyRadialForce::Position' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyRadialForce, Magnitude) == 0x000020, "Member 'FieldSystemComponent_ApplyRadialForce::Magnitude' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemComponent.ApplyRadialVectorFalloffForce
// 0x0028 (0x0028 - 0x0000)
struct FieldSystemComponent_ApplyRadialVectorFalloffForce final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldSystemComponent_ApplyRadialVectorFalloffForce) == 0x000008, "Wrong alignment on FieldSystemComponent_ApplyRadialVectorFalloffForce");
static_assert(sizeof(FieldSystemComponent_ApplyRadialVectorFalloffForce) == 0x000028, "Wrong size on FieldSystemComponent_ApplyRadialVectorFalloffForce");
static_assert(offsetof(FieldSystemComponent_ApplyRadialVectorFalloffForce, Enabled) == 0x000000, "Member 'FieldSystemComponent_ApplyRadialVectorFalloffForce::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyRadialVectorFalloffForce, Position) == 0x000008, "Member 'FieldSystemComponent_ApplyRadialVectorFalloffForce::Position' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyRadialVectorFalloffForce, Radius) == 0x000020, "Member 'FieldSystemComponent_ApplyRadialVectorFalloffForce::Radius' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyRadialVectorFalloffForce, Magnitude) == 0x000024, "Member 'FieldSystemComponent_ApplyRadialVectorFalloffForce::Magnitude' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemComponent.ApplyStayDynamicField
// 0x0028 (0x0028 - 0x0000)
struct FieldSystemComponent_ApplyStayDynamicField final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C6[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldSystemComponent_ApplyStayDynamicField) == 0x000008, "Wrong alignment on FieldSystemComponent_ApplyStayDynamicField");
static_assert(sizeof(FieldSystemComponent_ApplyStayDynamicField) == 0x000028, "Wrong size on FieldSystemComponent_ApplyStayDynamicField");
static_assert(offsetof(FieldSystemComponent_ApplyStayDynamicField, Enabled) == 0x000000, "Member 'FieldSystemComponent_ApplyStayDynamicField::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyStayDynamicField, Position) == 0x000008, "Member 'FieldSystemComponent_ApplyStayDynamicField::Position' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyStayDynamicField, Radius) == 0x000020, "Member 'FieldSystemComponent_ApplyStayDynamicField::Radius' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemComponent.ApplyStrainField
// 0x0030 (0x0030 - 0x0000)
struct FieldSystemComponent_ApplyStrainField final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Iterations;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C8[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FieldSystemComponent_ApplyStrainField) == 0x000008, "Wrong alignment on FieldSystemComponent_ApplyStrainField");
static_assert(sizeof(FieldSystemComponent_ApplyStrainField) == 0x000030, "Wrong size on FieldSystemComponent_ApplyStrainField");
static_assert(offsetof(FieldSystemComponent_ApplyStrainField, Enabled) == 0x000000, "Member 'FieldSystemComponent_ApplyStrainField::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyStrainField, Position) == 0x000008, "Member 'FieldSystemComponent_ApplyStrainField::Position' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyStrainField, Radius) == 0x000020, "Member 'FieldSystemComponent_ApplyStrainField::Radius' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyStrainField, Magnitude) == 0x000024, "Member 'FieldSystemComponent_ApplyStrainField::Magnitude' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyStrainField, Iterations) == 0x000028, "Member 'FieldSystemComponent_ApplyStrainField::Iterations' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemComponent.ApplyUniformVectorFalloffForce
// 0x0040 (0x0040 - 0x0000)
struct FieldSystemComponent_ApplyUniformVectorFalloffForce final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldSystemComponent_ApplyUniformVectorFalloffForce) == 0x000008, "Wrong alignment on FieldSystemComponent_ApplyUniformVectorFalloffForce");
static_assert(sizeof(FieldSystemComponent_ApplyUniformVectorFalloffForce) == 0x000040, "Wrong size on FieldSystemComponent_ApplyUniformVectorFalloffForce");
static_assert(offsetof(FieldSystemComponent_ApplyUniformVectorFalloffForce, Enabled) == 0x000000, "Member 'FieldSystemComponent_ApplyUniformVectorFalloffForce::Enabled' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyUniformVectorFalloffForce, Position) == 0x000008, "Member 'FieldSystemComponent_ApplyUniformVectorFalloffForce::Position' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyUniformVectorFalloffForce, Direction) == 0x000020, "Member 'FieldSystemComponent_ApplyUniformVectorFalloffForce::Direction' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyUniformVectorFalloffForce, Radius) == 0x000038, "Member 'FieldSystemComponent_ApplyUniformVectorFalloffForce::Radius' has a wrong offset!");
static_assert(offsetof(FieldSystemComponent_ApplyUniformVectorFalloffForce, Magnitude) == 0x00003C, "Member 'FieldSystemComponent_ApplyUniformVectorFalloffForce::Magnitude' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemMetaDataIteration.SetMetaDataIteration
// 0x0010 (0x0010 - 0x0000)
struct FieldSystemMetaDataIteration_SetMetaDataIteration final
{
public:
	int32                                         Param_Iterations;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFieldSystemMetaDataIteration*          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldSystemMetaDataIteration_SetMetaDataIteration) == 0x000008, "Wrong alignment on FieldSystemMetaDataIteration_SetMetaDataIteration");
static_assert(sizeof(FieldSystemMetaDataIteration_SetMetaDataIteration) == 0x000010, "Wrong size on FieldSystemMetaDataIteration_SetMetaDataIteration");
static_assert(offsetof(FieldSystemMetaDataIteration_SetMetaDataIteration, Param_Iterations) == 0x000000, "Member 'FieldSystemMetaDataIteration_SetMetaDataIteration::Param_Iterations' has a wrong offset!");
static_assert(offsetof(FieldSystemMetaDataIteration_SetMetaDataIteration, ReturnValue) == 0x000008, "Member 'FieldSystemMetaDataIteration_SetMetaDataIteration::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemMetaDataProcessingResolution.SetMetaDataaProcessingResolutionType
// 0x0010 (0x0010 - 0x0000)
struct FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType final
{
public:
	EFieldResolutionType                          Param_ResolutionType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFieldSystemMetaDataProcessingResolution* ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType) == 0x000008, "Wrong alignment on FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType");
static_assert(sizeof(FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType) == 0x000010, "Wrong size on FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType");
static_assert(offsetof(FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType, Param_ResolutionType) == 0x000000, "Member 'FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType::Param_ResolutionType' has a wrong offset!");
static_assert(offsetof(FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType, ReturnValue) == 0x000008, "Member 'FieldSystemMetaDataProcessingResolution_SetMetaDataaProcessingResolutionType::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.FieldSystemMetaDataFilter.SetMetaDataFilterType
// 0x0010 (0x0010 - 0x0000)
struct FieldSystemMetaDataFilter_SetMetaDataFilterType final
{
public:
	EFieldFilterType                              Param_FilterType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldObjectType                              Param_ObjectType;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldPositionType                            Param_PositionType;                                // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CF[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFieldSystemMetaDataFilter*             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FieldSystemMetaDataFilter_SetMetaDataFilterType) == 0x000008, "Wrong alignment on FieldSystemMetaDataFilter_SetMetaDataFilterType");
static_assert(sizeof(FieldSystemMetaDataFilter_SetMetaDataFilterType) == 0x000010, "Wrong size on FieldSystemMetaDataFilter_SetMetaDataFilterType");
static_assert(offsetof(FieldSystemMetaDataFilter_SetMetaDataFilterType, Param_FilterType) == 0x000000, "Member 'FieldSystemMetaDataFilter_SetMetaDataFilterType::Param_FilterType' has a wrong offset!");
static_assert(offsetof(FieldSystemMetaDataFilter_SetMetaDataFilterType, Param_ObjectType) == 0x000001, "Member 'FieldSystemMetaDataFilter_SetMetaDataFilterType::Param_ObjectType' has a wrong offset!");
static_assert(offsetof(FieldSystemMetaDataFilter_SetMetaDataFilterType, Param_PositionType) == 0x000002, "Member 'FieldSystemMetaDataFilter_SetMetaDataFilterType::Param_PositionType' has a wrong offset!");
static_assert(offsetof(FieldSystemMetaDataFilter_SetMetaDataFilterType, ReturnValue) == 0x000008, "Member 'FieldSystemMetaDataFilter_SetMetaDataFilterType::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.UniformInteger.SetUniformInteger
// 0x0010 (0x0010 - 0x0000)
struct UniformInteger_SetUniformInteger final
{
public:
	int32                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformInteger*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniformInteger_SetUniformInteger) == 0x000008, "Wrong alignment on UniformInteger_SetUniformInteger");
static_assert(sizeof(UniformInteger_SetUniformInteger) == 0x000010, "Wrong size on UniformInteger_SetUniformInteger");
static_assert(offsetof(UniformInteger_SetUniformInteger, Param_Magnitude) == 0x000000, "Member 'UniformInteger_SetUniformInteger::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(UniformInteger_SetUniformInteger, ReturnValue) == 0x000008, "Member 'UniformInteger_SetUniformInteger::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.RadialIntMask.SetRadialIntMask
// 0x0038 (0x0038 - 0x0000)
struct RadialIntMask_SetRadialIntMask final
{
public:
	float                                         Param_Radius;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_Position;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_InteriorValue;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_ExteriorValue;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESetMaskConditionType                         SetMaskConditionIn;                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D5[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URadialIntMask*                         ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialIntMask_SetRadialIntMask) == 0x000008, "Wrong alignment on RadialIntMask_SetRadialIntMask");
static_assert(sizeof(RadialIntMask_SetRadialIntMask) == 0x000038, "Wrong size on RadialIntMask_SetRadialIntMask");
static_assert(offsetof(RadialIntMask_SetRadialIntMask, Param_Radius) == 0x000000, "Member 'RadialIntMask_SetRadialIntMask::Param_Radius' has a wrong offset!");
static_assert(offsetof(RadialIntMask_SetRadialIntMask, Param_Position) == 0x000008, "Member 'RadialIntMask_SetRadialIntMask::Param_Position' has a wrong offset!");
static_assert(offsetof(RadialIntMask_SetRadialIntMask, Param_InteriorValue) == 0x000020, "Member 'RadialIntMask_SetRadialIntMask::Param_InteriorValue' has a wrong offset!");
static_assert(offsetof(RadialIntMask_SetRadialIntMask, Param_ExteriorValue) == 0x000024, "Member 'RadialIntMask_SetRadialIntMask::Param_ExteriorValue' has a wrong offset!");
static_assert(offsetof(RadialIntMask_SetRadialIntMask, SetMaskConditionIn) == 0x000028, "Member 'RadialIntMask_SetRadialIntMask::SetMaskConditionIn' has a wrong offset!");
static_assert(offsetof(RadialIntMask_SetRadialIntMask, ReturnValue) == 0x000030, "Member 'RadialIntMask_SetRadialIntMask::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.UniformScalar.SetUniformScalar
// 0x0010 (0x0010 - 0x0000)
struct UniformScalar_SetUniformScalar final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformScalar*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniformScalar_SetUniformScalar) == 0x000008, "Wrong alignment on UniformScalar_SetUniformScalar");
static_assert(sizeof(UniformScalar_SetUniformScalar) == 0x000010, "Wrong size on UniformScalar_SetUniformScalar");
static_assert(offsetof(UniformScalar_SetUniformScalar, Param_Magnitude) == 0x000000, "Member 'UniformScalar_SetUniformScalar::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(UniformScalar_SetUniformScalar, ReturnValue) == 0x000008, "Member 'UniformScalar_SetUniformScalar::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.WaveScalar.SetWaveScalar
// 0x0038 (0x0038 - 0x0000)
struct WaveScalar_SetWaveScalar final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_Position;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_WaveLength;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Period;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaveFunctionType                             Param_Function;                                    // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             Param_Falloff;                                     // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DB[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaveScalar*                            ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaveScalar_SetWaveScalar) == 0x000008, "Wrong alignment on WaveScalar_SetWaveScalar");
static_assert(sizeof(WaveScalar_SetWaveScalar) == 0x000038, "Wrong size on WaveScalar_SetWaveScalar");
static_assert(offsetof(WaveScalar_SetWaveScalar, Param_Magnitude) == 0x000000, "Member 'WaveScalar_SetWaveScalar::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(WaveScalar_SetWaveScalar, Param_Position) == 0x000008, "Member 'WaveScalar_SetWaveScalar::Param_Position' has a wrong offset!");
static_assert(offsetof(WaveScalar_SetWaveScalar, Param_WaveLength) == 0x000020, "Member 'WaveScalar_SetWaveScalar::Param_WaveLength' has a wrong offset!");
static_assert(offsetof(WaveScalar_SetWaveScalar, Param_Period) == 0x000024, "Member 'WaveScalar_SetWaveScalar::Param_Period' has a wrong offset!");
static_assert(offsetof(WaveScalar_SetWaveScalar, Time) == 0x000028, "Member 'WaveScalar_SetWaveScalar::Time' has a wrong offset!");
static_assert(offsetof(WaveScalar_SetWaveScalar, Param_Function) == 0x00002C, "Member 'WaveScalar_SetWaveScalar::Param_Function' has a wrong offset!");
static_assert(offsetof(WaveScalar_SetWaveScalar, Param_Falloff) == 0x00002D, "Member 'WaveScalar_SetWaveScalar::Param_Falloff' has a wrong offset!");
static_assert(offsetof(WaveScalar_SetWaveScalar, ReturnValue) == 0x000030, "Member 'WaveScalar_SetWaveScalar::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.RadialFalloff.SetRadialFalloff
// 0x0040 (0x0040 - 0x0000)
struct RadialFalloff_SetRadialFalloff final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MinRange;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MaxRange;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Default;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Radius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_Position;                                    // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             Param_Falloff;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DF[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URadialFalloff*                         ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialFalloff_SetRadialFalloff) == 0x000008, "Wrong alignment on RadialFalloff_SetRadialFalloff");
static_assert(sizeof(RadialFalloff_SetRadialFalloff) == 0x000040, "Wrong size on RadialFalloff_SetRadialFalloff");
static_assert(offsetof(RadialFalloff_SetRadialFalloff, Param_Magnitude) == 0x000000, "Member 'RadialFalloff_SetRadialFalloff::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(RadialFalloff_SetRadialFalloff, Param_MinRange) == 0x000004, "Member 'RadialFalloff_SetRadialFalloff::Param_MinRange' has a wrong offset!");
static_assert(offsetof(RadialFalloff_SetRadialFalloff, Param_MaxRange) == 0x000008, "Member 'RadialFalloff_SetRadialFalloff::Param_MaxRange' has a wrong offset!");
static_assert(offsetof(RadialFalloff_SetRadialFalloff, Param_Default) == 0x00000C, "Member 'RadialFalloff_SetRadialFalloff::Param_Default' has a wrong offset!");
static_assert(offsetof(RadialFalloff_SetRadialFalloff, Param_Radius) == 0x000010, "Member 'RadialFalloff_SetRadialFalloff::Param_Radius' has a wrong offset!");
static_assert(offsetof(RadialFalloff_SetRadialFalloff, Param_Position) == 0x000018, "Member 'RadialFalloff_SetRadialFalloff::Param_Position' has a wrong offset!");
static_assert(offsetof(RadialFalloff_SetRadialFalloff, Param_Falloff) == 0x000030, "Member 'RadialFalloff_SetRadialFalloff::Param_Falloff' has a wrong offset!");
static_assert(offsetof(RadialFalloff_SetRadialFalloff, ReturnValue) == 0x000038, "Member 'RadialFalloff_SetRadialFalloff::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.PlaneFalloff.SetPlaneFalloff
// 0x0058 (0x0058 - 0x0000)
struct PlaneFalloff_SetPlaneFalloff final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MinRange;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MaxRange;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Default;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Distance;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E2[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_Position;                                    // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Param_Normal;                                      // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             Param_Falloff;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E3[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlaneFalloff*                          ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlaneFalloff_SetPlaneFalloff) == 0x000008, "Wrong alignment on PlaneFalloff_SetPlaneFalloff");
static_assert(sizeof(PlaneFalloff_SetPlaneFalloff) == 0x000058, "Wrong size on PlaneFalloff_SetPlaneFalloff");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, Param_Magnitude) == 0x000000, "Member 'PlaneFalloff_SetPlaneFalloff::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, Param_MinRange) == 0x000004, "Member 'PlaneFalloff_SetPlaneFalloff::Param_MinRange' has a wrong offset!");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, Param_MaxRange) == 0x000008, "Member 'PlaneFalloff_SetPlaneFalloff::Param_MaxRange' has a wrong offset!");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, Param_Default) == 0x00000C, "Member 'PlaneFalloff_SetPlaneFalloff::Param_Default' has a wrong offset!");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, Param_Distance) == 0x000010, "Member 'PlaneFalloff_SetPlaneFalloff::Param_Distance' has a wrong offset!");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, Param_Position) == 0x000018, "Member 'PlaneFalloff_SetPlaneFalloff::Param_Position' has a wrong offset!");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, Param_Normal) == 0x000030, "Member 'PlaneFalloff_SetPlaneFalloff::Param_Normal' has a wrong offset!");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, Param_Falloff) == 0x000048, "Member 'PlaneFalloff_SetPlaneFalloff::Param_Falloff' has a wrong offset!");
static_assert(offsetof(PlaneFalloff_SetPlaneFalloff, ReturnValue) == 0x000050, "Member 'PlaneFalloff_SetPlaneFalloff::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.BoxFalloff.SetBoxFalloff
// 0x0080 (0x0080 - 0x0000)
struct BoxFalloff_SetBoxFalloff final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MinRange;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MaxRange;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Default;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Param_Transform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldFalloffType                             Param_Falloff;                                     // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E5[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxFalloff*                            ReturnValue;                                       // 0x0078(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoxFalloff_SetBoxFalloff) == 0x000010, "Wrong alignment on BoxFalloff_SetBoxFalloff");
static_assert(sizeof(BoxFalloff_SetBoxFalloff) == 0x000080, "Wrong size on BoxFalloff_SetBoxFalloff");
static_assert(offsetof(BoxFalloff_SetBoxFalloff, Param_Magnitude) == 0x000000, "Member 'BoxFalloff_SetBoxFalloff::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(BoxFalloff_SetBoxFalloff, Param_MinRange) == 0x000004, "Member 'BoxFalloff_SetBoxFalloff::Param_MinRange' has a wrong offset!");
static_assert(offsetof(BoxFalloff_SetBoxFalloff, Param_MaxRange) == 0x000008, "Member 'BoxFalloff_SetBoxFalloff::Param_MaxRange' has a wrong offset!");
static_assert(offsetof(BoxFalloff_SetBoxFalloff, Param_Default) == 0x00000C, "Member 'BoxFalloff_SetBoxFalloff::Param_Default' has a wrong offset!");
static_assert(offsetof(BoxFalloff_SetBoxFalloff, Param_Transform) == 0x000010, "Member 'BoxFalloff_SetBoxFalloff::Param_Transform' has a wrong offset!");
static_assert(offsetof(BoxFalloff_SetBoxFalloff, Param_Falloff) == 0x000070, "Member 'BoxFalloff_SetBoxFalloff::Param_Falloff' has a wrong offset!");
static_assert(offsetof(BoxFalloff_SetBoxFalloff, ReturnValue) == 0x000078, "Member 'BoxFalloff_SetBoxFalloff::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.NoiseField.SetNoiseField
// 0x0080 (0x0080 - 0x0000)
struct NoiseField_SetNoiseField final
{
public:
	float                                         Param_MinRange;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_MaxRange;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E7[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Param_Transform;                                   // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNoiseField*                            ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E8[0x8];                                     // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NoiseField_SetNoiseField) == 0x000010, "Wrong alignment on NoiseField_SetNoiseField");
static_assert(sizeof(NoiseField_SetNoiseField) == 0x000080, "Wrong size on NoiseField_SetNoiseField");
static_assert(offsetof(NoiseField_SetNoiseField, Param_MinRange) == 0x000000, "Member 'NoiseField_SetNoiseField::Param_MinRange' has a wrong offset!");
static_assert(offsetof(NoiseField_SetNoiseField, Param_MaxRange) == 0x000004, "Member 'NoiseField_SetNoiseField::Param_MaxRange' has a wrong offset!");
static_assert(offsetof(NoiseField_SetNoiseField, Param_Transform) == 0x000010, "Member 'NoiseField_SetNoiseField::Param_Transform' has a wrong offset!");
static_assert(offsetof(NoiseField_SetNoiseField, ReturnValue) == 0x000070, "Member 'NoiseField_SetNoiseField::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.UniformVector.SetUniformVector
// 0x0028 (0x0028 - 0x0000)
struct UniformVector_SetUniformVector final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12EA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_Direction;                                   // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUniformVector*                         ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UniformVector_SetUniformVector) == 0x000008, "Wrong alignment on UniformVector_SetUniformVector");
static_assert(sizeof(UniformVector_SetUniformVector) == 0x000028, "Wrong size on UniformVector_SetUniformVector");
static_assert(offsetof(UniformVector_SetUniformVector, Param_Magnitude) == 0x000000, "Member 'UniformVector_SetUniformVector::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(UniformVector_SetUniformVector, Param_Direction) == 0x000008, "Member 'UniformVector_SetUniformVector::Param_Direction' has a wrong offset!");
static_assert(offsetof(UniformVector_SetUniformVector, ReturnValue) == 0x000020, "Member 'UniformVector_SetUniformVector::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.RadialVector.SetRadialVector
// 0x0028 (0x0028 - 0x0000)
struct RadialVector_SetRadialVector final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12EC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Param_Position;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URadialVector*                          ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadialVector_SetRadialVector) == 0x000008, "Wrong alignment on RadialVector_SetRadialVector");
static_assert(sizeof(RadialVector_SetRadialVector) == 0x000028, "Wrong size on RadialVector_SetRadialVector");
static_assert(offsetof(RadialVector_SetRadialVector, Param_Magnitude) == 0x000000, "Member 'RadialVector_SetRadialVector::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(RadialVector_SetRadialVector, Param_Position) == 0x000008, "Member 'RadialVector_SetRadialVector::Param_Position' has a wrong offset!");
static_assert(offsetof(RadialVector_SetRadialVector, ReturnValue) == 0x000020, "Member 'RadialVector_SetRadialVector::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.RandomVector.SetRandomVector
// 0x0010 (0x0010 - 0x0000)
struct RandomVector_SetRandomVector final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12EE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URandomVector*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RandomVector_SetRandomVector) == 0x000008, "Wrong alignment on RandomVector_SetRandomVector");
static_assert(sizeof(RandomVector_SetRandomVector) == 0x000010, "Wrong size on RandomVector_SetRandomVector");
static_assert(offsetof(RandomVector_SetRandomVector, Param_Magnitude) == 0x000000, "Member 'RandomVector_SetRandomVector::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(RandomVector_SetRandomVector, ReturnValue) == 0x000008, "Member 'RandomVector_SetRandomVector::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.OperatorField.SetOperatorField
// 0x0028 (0x0028 - 0x0000)
struct OperatorField_SetOperatorField final
{
public:
	float                                         Param_Magnitude;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFieldNodeBase*                   Param_LeftField;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFieldNodeBase*                   Param_RightField;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldOperationType                           Param_Operation;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F2[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOperatorField*                         ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OperatorField_SetOperatorField) == 0x000008, "Wrong alignment on OperatorField_SetOperatorField");
static_assert(sizeof(OperatorField_SetOperatorField) == 0x000028, "Wrong size on OperatorField_SetOperatorField");
static_assert(offsetof(OperatorField_SetOperatorField, Param_Magnitude) == 0x000000, "Member 'OperatorField_SetOperatorField::Param_Magnitude' has a wrong offset!");
static_assert(offsetof(OperatorField_SetOperatorField, Param_LeftField) == 0x000008, "Member 'OperatorField_SetOperatorField::Param_LeftField' has a wrong offset!");
static_assert(offsetof(OperatorField_SetOperatorField, Param_RightField) == 0x000010, "Member 'OperatorField_SetOperatorField::Param_RightField' has a wrong offset!");
static_assert(offsetof(OperatorField_SetOperatorField, Param_Operation) == 0x000018, "Member 'OperatorField_SetOperatorField::Param_Operation' has a wrong offset!");
static_assert(offsetof(OperatorField_SetOperatorField, ReturnValue) == 0x000020, "Member 'OperatorField_SetOperatorField::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.ToIntegerField.SetToIntegerField
// 0x0010 (0x0010 - 0x0000)
struct ToIntegerField_SetToIntegerField final
{
public:
	const class UFieldNodeFloat*                  Param_FloatField;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UToIntegerField*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToIntegerField_SetToIntegerField) == 0x000008, "Wrong alignment on ToIntegerField_SetToIntegerField");
static_assert(sizeof(ToIntegerField_SetToIntegerField) == 0x000010, "Wrong size on ToIntegerField_SetToIntegerField");
static_assert(offsetof(ToIntegerField_SetToIntegerField, Param_FloatField) == 0x000000, "Member 'ToIntegerField_SetToIntegerField::Param_FloatField' has a wrong offset!");
static_assert(offsetof(ToIntegerField_SetToIntegerField, ReturnValue) == 0x000008, "Member 'ToIntegerField_SetToIntegerField::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.ToFloatField.SetToFloatField
// 0x0010 (0x0010 - 0x0000)
struct ToFloatField_SetToFloatField final
{
public:
	const class UFieldNodeInt*                    IntegerField;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UToFloatField*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToFloatField_SetToFloatField) == 0x000008, "Wrong alignment on ToFloatField_SetToFloatField");
static_assert(sizeof(ToFloatField_SetToFloatField) == 0x000010, "Wrong size on ToFloatField_SetToFloatField");
static_assert(offsetof(ToFloatField_SetToFloatField, IntegerField) == 0x000000, "Member 'ToFloatField_SetToFloatField::IntegerField' has a wrong offset!");
static_assert(offsetof(ToFloatField_SetToFloatField, ReturnValue) == 0x000008, "Member 'ToFloatField_SetToFloatField::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.CullingField.SetCullingField
// 0x0020 (0x0020 - 0x0000)
struct CullingField_SetCullingField final
{
public:
	const class UFieldNodeBase*                   Param_Culling;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFieldNodeBase*                   Param_Field;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFieldCullingOperationType                    Param_Operation;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F4[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCullingField*                          ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CullingField_SetCullingField) == 0x000008, "Wrong alignment on CullingField_SetCullingField");
static_assert(sizeof(CullingField_SetCullingField) == 0x000020, "Wrong size on CullingField_SetCullingField");
static_assert(offsetof(CullingField_SetCullingField, Param_Culling) == 0x000000, "Member 'CullingField_SetCullingField::Param_Culling' has a wrong offset!");
static_assert(offsetof(CullingField_SetCullingField, Param_Field) == 0x000008, "Member 'CullingField_SetCullingField::Param_Field' has a wrong offset!");
static_assert(offsetof(CullingField_SetCullingField, Param_Operation) == 0x000010, "Member 'CullingField_SetCullingField::Param_Operation' has a wrong offset!");
static_assert(offsetof(CullingField_SetCullingField, ReturnValue) == 0x000018, "Member 'CullingField_SetCullingField::ReturnValue' has a wrong offset!");

// Function FieldSystemEngine.ReturnResultsTerminal.SetReturnResultsTerminal
// 0x0008 (0x0008 - 0x0000)
struct ReturnResultsTerminal_SetReturnResultsTerminal final
{
public:
	class UReturnResultsTerminal*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReturnResultsTerminal_SetReturnResultsTerminal) == 0x000008, "Wrong alignment on ReturnResultsTerminal_SetReturnResultsTerminal");
static_assert(sizeof(ReturnResultsTerminal_SetReturnResultsTerminal) == 0x000008, "Wrong size on ReturnResultsTerminal_SetReturnResultsTerminal");
static_assert(offsetof(ReturnResultsTerminal_SetReturnResultsTerminal, ReturnValue) == 0x000000, "Member 'ReturnResultsTerminal_SetReturnResultsTerminal::ReturnValue' has a wrong offset!");

}

