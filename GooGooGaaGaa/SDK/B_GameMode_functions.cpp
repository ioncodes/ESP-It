#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_GameMode

#include "Basic.hpp"

#include "B_GameMode_classes.hpp"
#include "B_GameMode_parameters.hpp"


namespace SDK
{

// Function B_GameMode.B_GameMode_C.OnMidGamePlayerJoin__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::OnMidGamePlayerJoin__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "OnMidGamePlayerJoin__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_GameMode_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.PlayerIDReceived
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::PlayerIDReceived(class AB_PlayerState_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "PlayerIDReceived");

	Params::B_GameMode_C_PlayerIDReceived Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.HandleStartMatch
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::HandleStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleStartMatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.HandleEndMatch
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamID                                 WinnerTeam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceRegardlessOfEnd                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::HandleEndMatch(ETeamID WinnerTeam, bool ForceRegardlessOfEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleEndMatch");

	Params::B_GameMode_C_HandleEndMatch Parms{};

	Parms.WinnerTeam = WinnerTeam;
	Parms.ForceRegardlessOfEnd = ForceRegardlessOfEnd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.TimerFinished
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::TimerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TimerFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.SpawnPlaceableStatic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlaceableStaticProp_C*        SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SpawnPlaceableStatic(class UClass* Param_Class, const struct FTransform& Transform, class ABP_PlaceableStaticProp_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnPlaceableStatic");

	Params::B_GameMode_C_SpawnPlaceableStatic Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function B_GameMode.B_GameMode_C.SpawnSwitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    BreaksAfterUse                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Switch_C*                     SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SpawnSwitch(class UClass* Param_Class, const struct FTransform& Transform, bool BreaksAfterUse, class ABP_Switch_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnSwitch");

	Params::B_GameMode_C_SpawnSwitch Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Transform = std::move(Transform);
	Parms.BreaksAfterUse = BreaksAfterUse;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function B_GameMode.B_GameMode_C.SpawnProp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StartAwake                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFrozen                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_StaticMeshProp_C*              SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SpawnProp(class UClass* Param_Class, const struct FTransform& Transform, bool StartAwake, bool IsFrozen, class AB_StaticMeshProp_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnProp");

	Params::B_GameMode_C_SpawnProp Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Transform = std::move(Transform);
	Parms.StartAwake = StartAwake;
	Parms.IsFrozen = IsFrozen;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function B_GameMode.B_GameMode_C.SpawnPlaceableLight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlaceableLight_C*             SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SpawnPlaceableLight(class UClass* Param_Class, const struct FTransform& Transform, const struct FVector& Color, bool Activated, class ABP_PlaceableLight_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnPlaceableLight");

	Params::B_GameMode_C_SpawnPlaceableLight Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Transform = std::move(Transform);
	Parms.Color = std::move(Color);
	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function B_GameMode.B_GameMode_C.SpawnActionProp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    StartAwake                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFrozen                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_StaticMeshProp_C*              SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SpawnActionProp(class UClass* Param_Class, const struct FTransform& Transform, bool StartAwake, bool IsFrozen, bool Activated, class AB_StaticMeshProp_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnActionProp");

	Params::B_GameMode_C_SpawnActionProp Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Transform = std::move(Transform);
	Parms.StartAwake = StartAwake;
	Parms.IsFrozen = IsFrozen;
	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function B_GameMode.B_GameMode_C.SpawnActionPlaceableStatic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_PlaceableStaticProp_C*        SpawnedActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SpawnActionPlaceableStatic(class UClass* Param_Class, const struct FTransform& Transform, bool Activated, class ABP_PlaceableStaticProp_C** SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnActionPlaceableStatic");

	Params::B_GameMode_C_SpawnActionPlaceableStatic Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Transform = std::move(Transform);
	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedActor != nullptr)
		*SpawnedActor = Parms.SpawnedActor;
}


// Function B_GameMode.B_GameMode_C.TryIncreaseTimerIfMapVoteScreenNecessary
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::TryIncreaseTimerIfMapVoteScreenNecessary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TryIncreaseTimerIfMapVoteScreenNecessary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.KickPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WitchItAccountId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_GameMode_C::KickPlayer(int32 WitchItAccountId, int32 Code, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "KickPlayer");

	Params::B_GameMode_C_KickPlayer Parms{};

	Parms.WitchItAccountId = WitchItAccountId;
	Parms.Code = Code;
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.SetGameIsUsingCustomRules
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UsingCustomRules                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SetGameIsUsingCustomRules(bool UsingCustomRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SetGameIsUsingCustomRules");

	Params::B_GameMode_C_SetGameIsUsingCustomRules Parms{};

	Parms.UsingCustomRules = UsingCustomRules;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.CanJoinAsMidgameHunter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    JoinAsHunter                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::CanJoinAsMidgameHunter(bool* JoinAsHunter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "CanJoinAsMidgameHunter");

	Params::B_GameMode_C_CanJoinAsMidgameHunter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (JoinAsHunter != nullptr)
		*JoinAsHunter = Parms.JoinAsHunter;
}


// Function B_GameMode.B_GameMode_C.SendServerInfoToClient
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                JoiningPlayerController                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SendServerInfoToClient(class APlayerController* JoiningPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SendServerInfoToClient");

	Params::B_GameMode_C_SendServerInfoToClient Parms{};

	Parms.JoiningPlayerController = JoiningPlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.HandleShouldGameStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::HandleShouldGameStart(bool* IsReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleShouldGameStart");

	Params::B_GameMode_C_HandleShouldGameStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReady != nullptr)
		*IsReady = Parms.IsReady;
}


// Function B_GameMode.B_GameMode_C.AddMapsToVoteBySize
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_MapSize                               TargetSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSMapData                        MapToIgnore                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void AB_GameMode_C::AddMapsToVoteBySize(E_MapSize TargetSize, const struct FSMapData& MapToIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "AddMapsToVoteBySize");

	Params::B_GameMode_C_AddMapsToVoteBySize Parms{};

	Parms.TargetSize = TargetSize;
	Parms.MapToIgnore = std::move(MapToIgnore);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.TurnPlayerIntoSpectator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::TurnPlayerIntoSpectator(class AController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TurnPlayerIntoSpectator");

	Params::B_GameMode_C_TurnPlayerIntoSpectator Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.HandleEndMatchForQuests
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::HandleEndMatchForQuests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleEndMatchForQuests");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.Increase Quest Progress for Player Unchecked
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   ObjectiveId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::Increase_Quest_Progress_for_Player_Unchecked(class AB_PlayerState_C* Player, int64 ObjectiveId, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "Increase Quest Progress for Player Unchecked");

	Params::B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked Parms{};

	Parms.Player = Player;
	Parms.ObjectiveId = ObjectiveId;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.PostQuestProgressForPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   ObjectiveId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_GameMode_C::PostQuestProgressForPlayer(class AB_PlayerState_C* Player, int64 ObjectiveId, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "PostQuestProgressForPlayer");

	Params::B_GameMode_C_PostQuestProgressForPlayer Parms{};

	Parms.Player = Player;
	Parms.ObjectiveId = ObjectiveId;
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.PostQuestProgressForPlayerUnchecked
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   ObjectiveId                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_GameMode_C::PostQuestProgressForPlayerUnchecked(class AB_PlayerState_C* Player, int64 ObjectiveId, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "PostQuestProgressForPlayerUnchecked");

	Params::B_GameMode_C_PostQuestProgressForPlayerUnchecked Parms{};

	Parms.Player = Player;
	Parms.ObjectiveId = ObjectiveId;
	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.ShouldPostQuestProgressForPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::ShouldPostQuestProgressForPlayer(class AB_PlayerState_C* Player, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "ShouldPostQuestProgressForPlayer");

	Params::B_GameMode_C_ShouldPostQuestProgressForPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function B_GameMode.B_GameMode_C.ShouldPostQuestProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::ShouldPostQuestProgress(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "ShouldPostQuestProgress");

	Params::B_GameMode_C_ShouldPostQuestProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function B_GameMode.B_GameMode_C.PostWinObjectiveForPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::PostWinObjectiveForPlayer(class AB_PlayerState_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "PostWinObjectiveForPlayer");

	Params::B_GameMode_C_PostWinObjectiveForPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.PostPlayObjectiveForPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::PostPlayObjectiveForPlayer(class AB_PlayerState_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "PostPlayObjectiveForPlayer");

	Params::B_GameMode_C_PostPlayObjectiveForPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.SetAccountIdForProductUserId
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AccountId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ProductUserId                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UB_ServerClientConfig_C*          AccountClientConfig                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   AccountState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SetAccountIdForProductUserId(int32 AccountId, const class FString& ProductUserId, class UB_ServerClientConfig_C* AccountClientConfig, int32 AccountState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SetAccountIdForProductUserId");

	Params::B_GameMode_C_SetAccountIdForProductUserId Parms{};

	Parms.AccountId = AccountId;
	Parms.ProductUserId = std::move(ProductUserId);
	Parms.AccountClientConfig = AccountClientConfig;
	Parms.AccountState = AccountState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.GetAntiBotTravelRequirement
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetAntiBotTravelRequirement(class AB_PlayerState_C* PlayerState, double* Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetAntiBotTravelRequirement");

	Params::B_GameMode_C_GetAntiBotTravelRequirement Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (Distance != nullptr)
		*Distance = Parms.Distance;
}


// Function B_GameMode.B_GameMode_C.UpdateCustomGameMatchOptions
// (Protected, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::UpdateCustomGameMatchOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "UpdateCustomGameMatchOptions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.SpawnNewPlayerPawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETeamID                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            PlayerPawn                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SpawnNewPlayerPawn(ETeamID Team, class AController* PlayerController, class APawn** PlayerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnNewPlayerPawn");

	Params::B_GameMode_C_SpawnNewPlayerPawn Parms{};

	Parms.Team = Team;
	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerPawn != nullptr)
		*PlayerPawn = Parms.PlayerPawn;
}


// Function B_GameMode.B_GameMode_C.GetNewPlayerPawnByTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ETeamID                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Player_Pawn                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetNewPlayerPawnByTeam(ETeamID Team, class UClass** Player_Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetNewPlayerPawnByTeam");

	Params::B_GameMode_C_GetNewPlayerPawnByTeam Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Player_Pawn != nullptr)
		*Player_Pawn = Parms.Player_Pawn;
}


// Function B_GameMode.B_GameMode_C.SortTournamentPlayers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ObjectA                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          ObjectB                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SortTournamentPlayers(class UObject* ObjectA, class UObject* ObjectB, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SortTournamentPlayers");

	Params::B_GameMode_C_SortTournamentPlayers Parms{};

	Parms.ObjectA = ObjectA;
	Parms.ObjectB = ObjectB;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function B_GameMode.B_GameMode_C.GetPlaytimeFitsDatetime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_GameMode_C::GetPlaytimeFitsDatetime(class AB_PlayerState_C* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetPlaytimeFitsDatetime");

	Params::B_GameMode_C_GetPlaytimeFitsDatetime Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_GameMode.B_GameMode_C.SpawnDefaultPawnFor
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           StartSpot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class APawn* AB_GameMode_C::SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnDefaultPawnFor");

	Params::B_GameMode_C_SpawnDefaultPawnFor Parms{};

	Parms.NewPlayer = NewPlayer;
	Parms.StartSpot = StartSpot;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_GameMode.B_GameMode_C.GetNewPlayerStartTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ETeamID                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       StartTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetNewPlayerStartTransform(ETeamID Team, struct FTransform* StartTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetNewPlayerStartTransform");

	Params::B_GameMode_C_GetNewPlayerStartTransform Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (StartTransform != nullptr)
		*StartTransform = std::move(Parms.StartTransform);
}


// Function B_GameMode.B_GameMode_C.GetBaseXPNumerator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Numerator                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetBaseXPNumerator(double* Numerator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetBaseXPNumerator");

	Params::B_GameMode_C_GetBaseXPNumerator Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Numerator != nullptr)
		*Numerator = Parms.Numerator;
}


// Function B_GameMode.B_GameMode_C.GetLastSurvivingWitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    LastWitchExists                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AB_PlayerState_C*                 LastWitchPlayer                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetLastSurvivingWitch(bool* LastWitchExists, class AB_PlayerState_C** LastWitchPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetLastSurvivingWitch");

	Params::B_GameMode_C_GetLastSurvivingWitch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LastWitchExists != nullptr)
		*LastWitchExists = Parms.LastWitchExists;

	if (LastWitchPlayer != nullptr)
		*LastWitchPlayer = Parms.LastWitchPlayer;
}


// Function B_GameMode.B_GameMode_C.GetNumberOfActivePlayers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ActiveCount                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetNumberOfActivePlayers(int32* ActiveCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetNumberOfActivePlayers");

	Params::B_GameMode_C_GetNumberOfActivePlayers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActiveCount != nullptr)
		*ActiveCount = Parms.ActiveCount;
}


// Function B_GameMode.B_GameMode_C.LoadPropLayoutFromSaveGame
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPropToSave>              PropsToLoad                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FPlaceableStaticToSave>   PlaceableStaticsToLoad                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FPlaceableLightToSave>    PlaceableLightsToLoad                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSwitchToSave>            SwitchesToLoad                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FPrefabToSave>            PrefabsToLoad                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   LoadedPropsCount                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoadedPlaceableStaticsCount                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::LoadPropLayoutFromSaveGame(TArray<struct FPropToSave>& PropsToLoad, TArray<struct FPlaceableStaticToSave>& PlaceableStaticsToLoad, TArray<struct FPlaceableLightToSave>& PlaceableLightsToLoad, TArray<struct FSwitchToSave>& SwitchesToLoad, TArray<struct FPrefabToSave>& PrefabsToLoad, int32* LoadedPropsCount, int32* LoadedPlaceableStaticsCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "LoadPropLayoutFromSaveGame");

	Params::B_GameMode_C_LoadPropLayoutFromSaveGame Parms{};

	Parms.PropsToLoad = std::move(PropsToLoad);
	Parms.PlaceableStaticsToLoad = std::move(PlaceableStaticsToLoad);
	Parms.PlaceableLightsToLoad = std::move(PlaceableLightsToLoad);
	Parms.SwitchesToLoad = std::move(SwitchesToLoad);
	Parms.PrefabsToLoad = std::move(PrefabsToLoad);

	UObject::ProcessEvent(Func, &Parms);

	PropsToLoad = std::move(Parms.PropsToLoad);
	PlaceableStaticsToLoad = std::move(Parms.PlaceableStaticsToLoad);
	PlaceableLightsToLoad = std::move(Parms.PlaceableLightsToLoad);
	SwitchesToLoad = std::move(Parms.SwitchesToLoad);
	PrefabsToLoad = std::move(Parms.PrefabsToLoad);

	if (LoadedPropsCount != nullptr)
		*LoadedPropsCount = Parms.LoadedPropsCount;

	if (LoadedPlaceableStaticsCount != nullptr)
		*LoadedPlaceableStaticsCount = Parms.LoadedPlaceableStaticsCount;
}


// Function B_GameMode.B_GameMode_C.LoadPropLayout
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_PropLayoutData                Layout                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    UseCompression                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           WorkshopId                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   AmountOfProps                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AmountOfPlaceableStatics                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::LoadPropLayout(const struct FS_PropLayoutData& Layout, bool UseCompression, class FString* WorkshopId, int32* AmountOfProps, int32* AmountOfPlaceableStatics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "LoadPropLayout");

	Params::B_GameMode_C_LoadPropLayout Parms{};

	Parms.Layout = std::move(Layout);
	Parms.UseCompression = UseCompression;

	UObject::ProcessEvent(Func, &Parms);

	if (WorkshopId != nullptr)
		*WorkshopId = std::move(Parms.WorkshopId);

	if (AmountOfProps != nullptr)
		*AmountOfProps = Parms.AmountOfProps;

	if (AmountOfPlaceableStatics != nullptr)
		*AmountOfPlaceableStatics = Parms.AmountOfPlaceableStatics;
}


// Function B_GameMode.B_GameMode_C.RemoveAllProps
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::RemoveAllProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "RemoveAllProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.TickSystemMessage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::TickSystemMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TickSystemMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.HandlePlayerLeft
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::HandlePlayerLeft(class AController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandlePlayerLeft");

	Params::B_GameMode_C_HandlePlayerLeft Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.Handle Player Join
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::Handle_Player_Join(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "Handle Player Join");

	Params::B_GameMode_C_Handle_Player_Join Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.GetPlayerScoreStatManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UB_ScoreStatManager_C*            ScoreStatManager                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetPlayerScoreStatManager(class AB_PlayerState_C* PlayerState, class UB_ScoreStatManager_C** ScoreStatManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetPlayerScoreStatManager");

	Params::B_GameMode_C_GetPlayerScoreStatManager Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (ScoreStatManager != nullptr)
		*ScoreStatManager = Parms.ScoreStatManager;
}


// Function B_GameMode.B_GameMode_C.IsPlayerInWinnerTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    InWinnerTeam                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::IsPlayerInWinnerTeam(class AB_PlayerState_C* PlayerState, bool* InWinnerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "IsPlayerInWinnerTeam");

	Params::B_GameMode_C_IsPlayerInWinnerTeam Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (InWinnerTeam != nullptr)
		*InWinnerTeam = Parms.InWinnerTeam;
}


// Function B_GameMode.B_GameMode_C.GetPlayerPlayTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Playtime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetPlayerPlayTime(class AB_PlayerState_C* PlayerState, int32* Playtime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetPlayerPlayTime");

	Params::B_GameMode_C_GetPlayerPlayTime Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (Playtime != nullptr)
		*Playtime = Parms.Playtime;
}


// Function B_GameMode.B_GameMode_C.UpdateSessionProperties
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::UpdateSessionProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "UpdateSessionProperties");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.TimerSecondElapsed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RemainingSeconds                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::TimerSecondElapsed(double RemainingSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TimerSecondElapsed");

	Params::B_GameMode_C_TimerSecondElapsed Parms{};

	Parms.RemainingSeconds = RemainingSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.TimerTick
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::TimerTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TimerTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.TimerStop
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::TimerStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TimerStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.TimerStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::TimerStart(int32 Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TimerStart");

	Params::B_GameMode_C_TimerStart Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.HandleGrantExp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerState_C*                 CurrentPlayerState                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalGrantedXp                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::HandleGrantExp(class AB_PlayerState_C* CurrentPlayerState, int32* TotalGrantedXp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleGrantExp");

	Params::B_GameMode_C_HandleGrantExp Parms{};

	Parms.CurrentPlayerState = CurrentPlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (TotalGrantedXp != nullptr)
		*TotalGrantedXp = Parms.TotalGrantedXp;
}


// Function B_GameMode.B_GameMode_C.RemoveActiveBuffs
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                KilledWitchController                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::RemoveActiveBuffs(class APlayerController* KilledWitchController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "RemoveActiveBuffs");

	Params::B_GameMode_C_RemoveActiveBuffs Parms{};

	Parms.KilledWitchController = KilledWitchController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.GetPickupSpawnDelay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AB_GameMode_C::GetPickupSpawnDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetPickupSpawnDelay");

	Params::B_GameMode_C_GetPickupSpawnDelay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_GameMode.B_GameMode_C.GetPlayersWhoWantsToPlayCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   PlayersWhoWantsToPlayCount                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetPlayersWhoWantsToPlayCount(int32* PlayersWhoWantsToPlayCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetPlayersWhoWantsToPlayCount");

	Params::B_GameMode_C_GetPlayersWhoWantsToPlayCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayersWhoWantsToPlayCount != nullptr)
		*PlayersWhoWantsToPlayCount = Parms.PlayersWhoWantsToPlayCount;
}


// Function B_GameMode.B_GameMode_C.DetermineNextMapFromVotes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::DetermineNextMapFromVotes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "DetermineNextMapFromVotes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.HandleEndMatchForPlayers
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::HandleEndMatchForPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleEndMatchForPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.DetermineNewMapsForVote
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::DetermineNewMapsForVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "DetermineNewMapsForVote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.SpawnAMagicRelict
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETeamID                                 RelevantToTeam                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SpawnAMagicRelict(const struct FVector& Location, ETeamID RelevantToTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnAMagicRelict");

	Params::B_GameMode_C_SpawnAMagicRelict Parms{};

	Parms.Location = std::move(Location);
	Parms.RelevantToTeam = RelevantToTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.SpawnMagicRelict
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::SpawnMagicRelict()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SpawnMagicRelict");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.HasPlayerBotBehaviour
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AB_PlayerState_C*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsProbablyBot                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::HasPlayerBotBehaviour(class AB_PlayerState_C* PlayerState, bool* IsProbablyBot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HasPlayerBotBehaviour");

	Params::B_GameMode_C_HasPlayerBotBehaviour Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (IsProbablyBot != nullptr)
		*IsProbablyBot = Parms.IsProbablyBot;
}


// Function B_GameMode.B_GameMode_C.TickRetryStartNewGameCountdown
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::TickRetryStartNewGameCountdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TickRetryStartNewGameCountdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.TickKickVote
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::TickKickVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "TickKickVote");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.CheckRandomTimerForWaitState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsRandom                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::CheckRandomTimerForWaitState(bool* IsRandom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "CheckRandomTimerForWaitState");

	Params::B_GameMode_C_CheckRandomTimerForWaitState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsRandom != nullptr)
		*IsRandom = Parms.IsRandom;
}


// Function B_GameMode.B_GameMode_C.CalculateAndReplicateBestMedals
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::CalculateAndReplicateBestMedals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "CalculateAndReplicateBestMedals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.SortScoreStat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SortScoreStat(class UObject* A, class UObject* B, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SortScoreStat");

	Params::B_GameMode_C_SortScoreStat Parms{};

	Parms.A = A;
	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function B_GameMode.B_GameMode_C.GetAllScoreStatsSorted
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UB_CalculatedScoreStatToSort_C*>SortedCalculatedScoreStats                             (Parm, OutParm)

void AB_GameMode_C::GetAllScoreStatsSorted(TArray<class UB_CalculatedScoreStatToSort_C*>* SortedCalculatedScoreStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetAllScoreStatsSorted");

	Params::B_GameMode_C_GetAllScoreStatsSorted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SortedCalculatedScoreStats != nullptr)
		*SortedCalculatedScoreStats = std::move(Parms.SortedCalculatedScoreStats);
}


// Function B_GameMode.B_GameMode_C.ReplicateSleepingProps
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PlayerController_C*            PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::ReplicateSleepingProps(class AB_PlayerController_C* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "ReplicateSleepingProps");

	Params::B_GameMode_C_ReplicateSleepingProps Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.SetKilledWitchToSpectator
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           WitchActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnAtPlayerStart                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::SetKilledWitchToSpectator(class AActor* WitchActor, class APlayerState* Killer, bool SpawnAtPlayerStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "SetKilledWitchToSpectator");

	Params::B_GameMode_C_SetKilledWitchToSpectator Parms{};

	Parms.WitchActor = WitchActor;
	Parms.Killer = Killer;
	Parms.SpawnAtPlayerStart = SpawnAtPlayerStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.CheckEndMatchHuntersDead
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::CheckEndMatchHuntersDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "CheckEndMatchHuntersDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.CheckEndMatchWitchesDead
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::CheckEndMatchWitchesDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "CheckEndMatchWitchesDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.GetHuntersCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   HuntersCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetHuntersCount(uint8* HuntersCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetHuntersCount");

	Params::B_GameMode_C_GetHuntersCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HuntersCount != nullptr)
		*HuntersCount = Parms.HuntersCount;
}


// Function B_GameMode.B_GameMode_C.CheckTimerForWaitState
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::CheckTimerForWaitState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "CheckTimerForWaitState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.RandomizeTeamSelection
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::RandomizeTeamSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "RandomizeTeamSelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.StartNewGame
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RestartByPlayerJoin                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::StartNewGame(bool RestartByPlayerJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "StartNewGame");

	Params::B_GameMode_C_StartNewGame Parms{};

	Parms.RestartByPlayerJoin = RestartByPlayerJoin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.UnregisterPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::UnregisterPlayer(class AController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "UnregisterPlayer");

	Params::B_GameMode_C_UnregisterPlayer Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.EnsureInitialize
// (Public, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::EnsureInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "EnsureInitialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.GetWitchesCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   WitchesCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetWitchesCount(uint8* WitchesCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetWitchesCount");

	Params::B_GameMode_C_GetWitchesCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WitchesCount != nullptr)
		*WitchesCount = Parms.WitchesCount;
}


// Function B_GameMode.B_GameMode_C.GetTotalWitchCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

uint8 AB_GameMode_C::GetTotalWitchCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetTotalWitchCount");

	Params::B_GameMode_C_GetTotalWitchCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_GameMode.B_GameMode_C.KillPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      KilledController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AController*                      Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ETeamID                                 KilledPlayerTeam                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::KillPlayer(class AController* KilledController, class AController* Killer, ETeamID KilledPlayerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "KillPlayer");

	Params::B_GameMode_C_KillPlayer Parms{};

	Parms.KilledController = KilledController;
	Parms.Killer = Killer;
	Parms.KilledPlayerTeam = KilledPlayerTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.RegisterPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::RegisterPlayer(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "RegisterPlayer");

	Params::B_GameMode_C_RegisterPlayer Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.CheckIfAllPlayersAreReady
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReady                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::CheckIfAllPlayersAreReady(bool* IsReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "CheckIfAllPlayersAreReady");

	Params::B_GameMode_C_CheckIfAllPlayersAreReady Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReady != nullptr)
		*IsReady = Parms.IsReady;
}


// Function B_GameMode.B_GameMode_C.OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SessionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2(class FName SessionName, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2");

	Params::B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2 Parms{};

	Parms.SessionName = SessionName;
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SessionName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2(class FName SessionName, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2");

	Params::B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2 Parms{};

	Parms.SessionName = SessionName;
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.StartGame
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::StartGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "StartGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.K2_PostLogin
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::K2_PostLogin(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "K2_PostLogin");

	Params::B_GameMode_C_K2_PostLogin Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      ExitingController                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::K2_OnLogout(class AController* ExitingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "K2_OnLogout");

	Params::B_GameMode_C_K2_OnLogout Parms{};

	Parms.ExitingController = ExitingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "ReceiveTick");

	Params::B_GameMode_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.OnFinishedPickupTimer
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::OnFinishedPickupTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "OnFinishedPickupTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.CheckRemainingSeconds
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::CheckRemainingSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "CheckRemainingSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.OnReceivedAccountIdForAccountName
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AccountId                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           RequestedAccountName                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UB_ServerClientConfig_C*          ClientConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   AccountState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::OnReceivedAccountIdForAccountName(int32 AccountId, const class FString& RequestedAccountName, class UB_ServerClientConfig_C* ClientConfig, int32 AccountState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "OnReceivedAccountIdForAccountName");

	Params::B_GameMode_C_OnReceivedAccountIdForAccountName Parms{};

	Parms.AccountId = AccountId;
	Parms.RequestedAccountName = std::move(RequestedAccountName);
	Parms.ClientConfig = ClientConfig;
	Parms.AccountState = AccountState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.OnUpdateSessionTimerFunc
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::OnUpdateSessionTimerFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "OnUpdateSessionTimerFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "ReceiveEndPlay");

	Params::B_GameMode_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.HandleTeardownPacket
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::HandleTeardownPacket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleTeardownPacket");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.RegisterDedicatedServerEvents
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::RegisterDedicatedServerEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "RegisterDedicatedServerEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.UnregisterDedicatedServerEvents
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::UnregisterDedicatedServerEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "UnregisterDedicatedServerEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.HandleShowSystemMessageCommand
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_GameMode_C::HandleShowSystemMessageCommand(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleShowSystemMessageCommand");

	Params::B_GameMode_C_HandleShowSystemMessageCommand Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.HandleKickPlayerCommand
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WitchItAccountId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Code                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_GameMode_C::HandleKickPlayerCommand(int32 WitchItAccountId, int32 Code, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "HandleKickPlayerCommand");

	Params::B_GameMode_C_HandleKickPlayerCommand Parms{};

	Parms.WitchItAccountId = WitchItAccountId;
	Parms.Code = Code;
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.OnHandleTeardownMessageDedicatedServer
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::OnHandleTeardownMessageDedicatedServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "OnHandleTeardownMessageDedicatedServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.ShutdownServer
// (BlueprintCallable, BlueprintEvent)

void AB_GameMode_C::ShutdownServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "ShutdownServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_GameMode.B_GameMode_C.ExecuteUbergraph_B_GameMode
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::ExecuteUbergraph_B_GameMode(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "ExecuteUbergraph_B_GameMode");

	Params::B_GameMode_C_ExecuteUbergraph_B_GameMode Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_GameMode.B_GameMode_C.GetPlayObjectiveId
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int64                                   ObjectiveId                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetPlayObjectiveId(int64* ObjectiveId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetPlayObjectiveId");

	Params::B_GameMode_C_GetPlayObjectiveId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ObjectiveId != nullptr)
		*ObjectiveId = Parms.ObjectiveId;
}


// Function B_GameMode.B_GameMode_C.GetWinObjectiveId
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int64                                   ObjectiveId                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::GetWinObjectiveId(int64* ObjectiveId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "GetWinObjectiveId");

	Params::B_GameMode_C_GetWinObjectiveId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ObjectiveId != nullptr)
		*ObjectiveId = Parms.ObjectiveId;
}


// Function B_GameMode.B_GameMode_C.FindPlayerControllerByPlayerState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                Out                                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::FindPlayerControllerByPlayerState(class APlayerState* PlayerState, class APlayerController** Out) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "FindPlayerControllerByPlayerState");

	Params::B_GameMode_C_FindPlayerControllerByPlayerState Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function B_GameMode.B_GameMode_C.FindPlayerStateByWitchItAccountId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   WitchItAccountId                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Out                                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::FindPlayerStateByWitchItAccountId(int32 WitchItAccountId, class APlayerState** Out) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "FindPlayerStateByWitchItAccountId");

	Params::B_GameMode_C_FindPlayerStateByWitchItAccountId Parms{};

	Parms.WitchItAccountId = WitchItAccountId;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function B_GameMode.B_GameMode_C.IsTearingDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_GameMode_C::IsTearingDown(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_GameMode_C", "IsTearingDown");

	Params::B_GameMode_C_IsTearingDown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

