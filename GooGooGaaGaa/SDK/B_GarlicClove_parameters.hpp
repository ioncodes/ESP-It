#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_GarlicClove

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_GarlicClove.B_GarlicClove_C.BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_GarlicClove_C_BndEvt__B_GarlicClove_Sphere1_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.ExecuteUbergraph_B_GarlicClove
// 0x0168 (0x0168 - 0x0000)
struct B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0070(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove) == 0x000008, "Wrong alignment on B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove");
static_assert(sizeof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove) == 0x000168, "Wrong size on B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, EntryPoint) == 0x000000, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_CustomEvent_Location) == 0x000030, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, CallFunc_HasAuthority_ReturnValue) == 0x000048, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000050, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000058, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000060, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000068, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_bFromSweep) == 0x00006C, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove, K2Node_ComponentBoundEvent_SweepResult) == 0x000070, "Member 'B_GarlicClove_C_ExecuteUbergraph_B_GarlicClove::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.HandleBeginOverlap
// 0x00F0 (0x00F0 - 0x0000)
struct B_GarlicClove_C_HandleBeginOverlap final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Hunter_C*                            HitHunter;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetWitchActor_ReturnActor;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class UB_ActorEvents_C*>               CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_ActorEvents_C*                       CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetInstigatorController_ReturnValue;      // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Hunter_C*                            K2Node_DynamicCast_AsB_Hunter;                     // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNotDecoyProp_ReturnValue;               // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_2;             // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNotMushroomProjectile_ReturnValue;      // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_HandleBeginOverlap) == 0x000008, "Wrong alignment on B_GarlicClove_C_HandleBeginOverlap");
static_assert(sizeof(B_GarlicClove_C_HandleBeginOverlap) == 0x0000F0, "Wrong size on B_GarlicClove_C_HandleBeginOverlap");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, HitActor) == 0x000000, "Member 'B_GarlicClove_C_HandleBeginOverlap::HitActor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, HitHunter) == 0x000008, "Member 'B_GarlicClove_C_HandleBeginOverlap::HitHunter' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_GetWitchActor_ReturnActor) == 0x000018, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_GetWitchActor_ReturnActor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_GetDisplayName_ReturnValue) == 0x000020, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000030, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Array_Get_Item) == 0x000050, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000070, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Greater_IntInt_ReturnValue) == 0x000071, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Array_Add_ReturnValue) == 0x000074, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Array_Contains_ReturnValue) == 0x000078, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_GetInstigatorController_ReturnValue) == 0x000080, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_GetInstigatorController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Not_PreBool_ReturnValue) == 0x000088, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_IsValid_ReturnValue_1) == 0x000089, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_HasAuthority_ReturnValue_1) == 0x00008A, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, K2Node_DynamicCast_AsB_Player_State) == 0x000090, "Member 'B_GarlicClove_C_HandleBeginOverlap::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'B_GarlicClove_C_HandleBeginOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Array_Add_ReturnValue_1) == 0x00009C, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Array_Contains_ReturnValue_1) == 0x0000A0, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A1, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, K2Node_DynamicCast_AsB_Hunter) == 0x0000A8, "Member 'B_GarlicClove_C_HandleBeginOverlap::K2Node_DynamicCast_AsB_Hunter' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'B_GarlicClove_C_HandleBeginOverlap::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_IsNotDecoyProp_ReturnValue) == 0x0000B1, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_IsNotDecoyProp_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_GetObjectClass_ReturnValue) == 0x0000B8, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_GetInstigator_ReturnValue) == 0x0000C0, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_ClassIsChildOf_ReturnValue) == 0x0000C8, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_GetObjectClass_ReturnValue_1) == 0x0000D0, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_IsValid_ReturnValue_2) == 0x0000D8, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x0000D9, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_GetObjectClass_ReturnValue_2) == 0x0000E0, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_BooleanAND_ReturnValue) == 0x0000E8, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_ClassIsChildOf_ReturnValue_2) == 0x0000E9, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_ClassIsChildOf_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_IsNotMushroomProjectile_ReturnValue) == 0x0000EA, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_IsNotMushroomProjectile_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_BooleanOR_ReturnValue) == 0x0000EB, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_BooleanOR_ReturnValue_1) == 0x0000EC, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_BooleanAND_ReturnValue_1) == 0x0000ED, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleBeginOverlap, CallFunc_BooleanAND_ReturnValue_2) == 0x0000EE, "Member 'B_GarlicClove_C_HandleBeginOverlap::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.HandleEndOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct B_GarlicClove_C_HandleEndOverlap final
{
public:
	class AActor*                                 HitActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetWitchActor_ReturnActor;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class UB_ActorEvents_C*>               CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_ActorEvents_C*                       CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_2;             // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_HandleEndOverlap) == 0x000008, "Wrong alignment on B_GarlicClove_C_HandleEndOverlap");
static_assert(sizeof(B_GarlicClove_C_HandleEndOverlap) == 0x0000A8, "Wrong size on B_GarlicClove_C_HandleEndOverlap");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, HitActor) == 0x000000, "Member 'B_GarlicClove_C_HandleEndOverlap::HitActor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_GetWitchActor_ReturnActor) == 0x000010, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_GetWitchActor_ReturnActor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_GetDisplayName_ReturnValue) == 0x000018, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_Array_Get_Item) == 0x000048, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000058, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000068, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_Greater_IntInt_ReturnValue) == 0x000069, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_Array_RemoveItem_ReturnValue) == 0x00006A, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_GetObjectClass_ReturnValue) == 0x000070, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_GetInstigator_ReturnValue) == 0x000078, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_ClassIsChildOf_ReturnValue) == 0x000080, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_GetObjectClass_ReturnValue_1) == 0x000088, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000091, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_GetObjectClass_ReturnValue_2) == 0x000098, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_BooleanAND_ReturnValue) == 0x0000A0, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_ClassIsChildOf_ReturnValue_2) == 0x0000A1, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_ClassIsChildOf_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_BooleanOR_ReturnValue) == 0x0000A2, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_HandleEndOverlap, CallFunc_BooleanOR_ReturnValue_1) == 0x0000A3, "Member 'B_GarlicClove_C_HandleEndOverlap::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.InitializeRules
// 0x0008 (0x0008 - 0x0000)
struct B_GarlicClove_C_InitializeRules final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_InitializeRules) == 0x000008, "Wrong alignment on B_GarlicClove_C_InitializeRules");
static_assert(sizeof(B_GarlicClove_C_InitializeRules) == 0x000008, "Wrong size on B_GarlicClove_C_InitializeRules");
static_assert(offsetof(B_GarlicClove_C_InitializeRules, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_GarlicClove_C_InitializeRules::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.IsNotDecoyProp
// 0x0028 (0x0028 - 0x0000)
struct B_GarlicClove_C_IsNotDecoyProp final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_IsNotDecoyProp) == 0x000008, "Wrong alignment on B_GarlicClove_C_IsNotDecoyProp");
static_assert(sizeof(B_GarlicClove_C_IsNotDecoyProp) == 0x000028, "Wrong size on B_GarlicClove_C_IsNotDecoyProp");
static_assert(offsetof(B_GarlicClove_C_IsNotDecoyProp, Actor) == 0x000000, "Member 'B_GarlicClove_C_IsNotDecoyProp::Actor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotDecoyProp, ReturnValue) == 0x000008, "Member 'B_GarlicClove_C_IsNotDecoyProp::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotDecoyProp, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'B_GarlicClove_C_IsNotDecoyProp::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotDecoyProp, CallFunc_GetObjectClass_ReturnValue) == 0x000018, "Member 'B_GarlicClove_C_IsNotDecoyProp::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotDecoyProp, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000020, "Member 'B_GarlicClove_C_IsNotDecoyProp::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.IsNotMushroomProjectile
// 0x0020 (0x0020 - 0x0000)
struct B_GarlicClove_C_IsNotMushroomProjectile final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_IsNotMushroomProjectile) == 0x000008, "Wrong alignment on B_GarlicClove_C_IsNotMushroomProjectile");
static_assert(sizeof(B_GarlicClove_C_IsNotMushroomProjectile) == 0x000020, "Wrong size on B_GarlicClove_C_IsNotMushroomProjectile");
static_assert(offsetof(B_GarlicClove_C_IsNotMushroomProjectile, Actor) == 0x000000, "Member 'B_GarlicClove_C_IsNotMushroomProjectile::Actor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotMushroomProjectile, ReturnValue) == 0x000008, "Member 'B_GarlicClove_C_IsNotMushroomProjectile::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotMushroomProjectile, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'B_GarlicClove_C_IsNotMushroomProjectile::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotMushroomProjectile, CallFunc_ClassIsChildOf_ReturnValue) == 0x000018, "Member 'B_GarlicClove_C_IsNotMushroomProjectile::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotMushroomProjectile, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000019, "Member 'B_GarlicClove_C_IsNotMushroomProjectile::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotMushroomProjectile, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'B_GarlicClove_C_IsNotMushroomProjectile::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotMushroomProjectile, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001B, "Member 'B_GarlicClove_C_IsNotMushroomProjectile::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_IsNotMushroomProjectile, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'B_GarlicClove_C_IsNotMushroomProjectile::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.PlayDestroyEffects
// 0x0020 (0x0020 - 0x0000)
struct B_GarlicClove_C_PlayDestroyEffects final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_PlayDestroyEffects) == 0x000008, "Wrong alignment on B_GarlicClove_C_PlayDestroyEffects");
static_assert(sizeof(B_GarlicClove_C_PlayDestroyEffects) == 0x000020, "Wrong size on B_GarlicClove_C_PlayDestroyEffects");
static_assert(offsetof(B_GarlicClove_C_PlayDestroyEffects, Location) == 0x000000, "Member 'B_GarlicClove_C_PlayDestroyEffects::Location' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_PlayDestroyEffects, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000018, "Member 'B_GarlicClove_C_PlayDestroyEffects::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.PlayDestroyEffectsMulti
// 0x0018 (0x0018 - 0x0000)
struct B_GarlicClove_C_PlayDestroyEffectsMulti final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_PlayDestroyEffectsMulti) == 0x000008, "Wrong alignment on B_GarlicClove_C_PlayDestroyEffectsMulti");
static_assert(sizeof(B_GarlicClove_C_PlayDestroyEffectsMulti) == 0x000018, "Wrong size on B_GarlicClove_C_PlayDestroyEffectsMulti");
static_assert(offsetof(B_GarlicClove_C_PlayDestroyEffectsMulti, Location) == 0x000000, "Member 'B_GarlicClove_C_PlayDestroyEffectsMulti::Location' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_GarlicClove_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_ReceiveTick) == 0x000004, "Wrong alignment on B_GarlicClove_C_ReceiveTick");
static_assert(sizeof(B_GarlicClove_C_ReceiveTick) == 0x000004, "Wrong size on B_GarlicClove_C_ReceiveTick");
static_assert(offsetof(B_GarlicClove_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_GarlicClove_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.TearDown
// 0x0020 (0x0020 - 0x0000)
struct B_GarlicClove_C_TearDown final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_TearDown) == 0x000008, "Wrong alignment on B_GarlicClove_C_TearDown");
static_assert(sizeof(B_GarlicClove_C_TearDown) == 0x000020, "Wrong size on B_GarlicClove_C_TearDown");
static_assert(offsetof(B_GarlicClove_C_TearDown, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'B_GarlicClove_C_TearDown::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TearDown, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000008, "Member 'B_GarlicClove_C_TearDown::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.TearUp
// 0x0180 (0x0180 - 0x0000)
struct B_GarlicClove_C_TearUp final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Owner_0;                                           // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Instigator_0;                                      // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0070(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast; // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_TearUp) == 0x000010, "Wrong alignment on B_GarlicClove_C_TearUp");
static_assert(sizeof(B_GarlicClove_C_TearUp) == 0x000180, "Wrong size on B_GarlicClove_C_TearUp");
static_assert(offsetof(B_GarlicClove_C_TearUp, SpawnTransform) == 0x000000, "Member 'B_GarlicClove_C_TearUp::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TearUp, Owner_0) == 0x000060, "Member 'B_GarlicClove_C_TearUp::Owner_0' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TearUp, Instigator_0) == 0x000068, "Member 'B_GarlicClove_C_TearUp::Instigator_0' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TearUp, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000070, "Member 'B_GarlicClove_C_TearUp::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TearUp, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000168, "Member 'B_GarlicClove_C_TearUp::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TearUp, CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast) == 0x000170, "Member 'B_GarlicClove_C_TearUp::CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.TickPushWitches
// 0x01A0 (0x01A0 - 0x0000)
struct B_GarlicClove_C_TickPushWitches final
{
public:
	struct FVector                                CurrentDirection;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentWitchActor;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIProp_C>              K2Node_DynamicCast_AsIProp;                        // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Move_ForcedOutput;                        // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Witch_C*                             K2Node_DynamicCast_AsB_Witch;                      // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_B_ImplicitCast;                // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddMovementInput_ScaleValue_ImplicitCast; // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_TickPushWitches) == 0x000008, "Wrong alignment on B_GarlicClove_C_TickPushWitches");
static_assert(sizeof(B_GarlicClove_C_TickPushWitches) == 0x0001A0, "Wrong size on B_GarlicClove_C_TickPushWitches");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CurrentDirection) == 0x000000, "Member 'B_GarlicClove_C_TickPushWitches::CurrentDirection' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CurrentWitchActor) == 0x000018, "Member 'B_GarlicClove_C_TickPushWitches::CurrentWitchActor' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, Temp_int_Array_Index_Variable) == 0x000038, "Member 'B_GarlicClove_C_TickPushWitches::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'B_GarlicClove_C_TickPushWitches::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000048, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000058, "Member 'B_GarlicClove_C_TickPushWitches::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'B_GarlicClove_C_TickPushWitches::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, K2Node_DynamicCast_AsIProp) == 0x000070, "Member 'B_GarlicClove_C_TickPushWitches::K2Node_DynamicCast_AsIProp' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'B_GarlicClove_C_TickPushWitches::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000088, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Move_ForcedOutput) == 0x0000A0, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Move_ForcedOutput' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, K2Node_DynamicCast_AsB_Witch) == 0x0000A8, "Member 'B_GarlicClove_C_TickPushWitches::K2Node_DynamicCast_AsB_Witch' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, K2Node_DynamicCast_bSuccess_2) == 0x0000B0, "Member 'B_GarlicClove_C_TickPushWitches::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000B8, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D0, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_BreakVector_X) == 0x0000F0, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_BreakVector_Y) == 0x0000F8, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_BreakVector_Z) == 0x000100, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_MakeVector_ReturnValue) == 0x000108, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_MakeVector_ReturnValue_1) == 0x000120, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_VSize_ReturnValue) == 0x000138, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Normal_ReturnValue) == 0x000140, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000158, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_SafeDivide_ReturnValue) == 0x000160, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Array_Length_ReturnValue) == 0x000168, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_FMax_ReturnValue) == 0x000170, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000180, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000188, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_SafeDivide_B_ImplicitCast) == 0x000190, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_SafeDivide_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickPushWitches, CallFunc_AddMovementInput_ScaleValue_ImplicitCast) == 0x000198, "Member 'B_GarlicClove_C_TickPushWitches::CallFunc_AddMovementInput_ScaleValue_ImplicitCast' has a wrong offset!");

// Function B_GarlicClove.B_GarlicClove_C.TickSize
// 0x0080 (0x0080 - 0x0000)
struct B_GarlicClove_C_TickSize final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_B_ImplicitCast;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast; // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast_1;      // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_Param_ImplicitCast;     // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GarlicClove_C_TickSize) == 0x000008, "Wrong alignment on B_GarlicClove_C_TickSize");
static_assert(sizeof(B_GarlicClove_C_TickSize) == 0x000080, "Wrong size on B_GarlicClove_C_TickSize");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_GarlicClove_C_TickSize::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_GarlicClove_C_TickSize::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_GetFloatValue_ReturnValue) == 0x000010, "Member 'B_GarlicClove_C_TickSize::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'B_GarlicClove_C_TickSize::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_IsDedicatedServer_ReturnValue) == 0x000020, "Member 'B_GarlicClove_C_TickSize::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000028, "Member 'B_GarlicClove_C_TickSize::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'B_GarlicClove_C_TickSize::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_GetFloatValue_ReturnValue_1) == 0x000038, "Member 'B_GarlicClove_C_TickSize::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'B_GarlicClove_C_TickSize::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'B_GarlicClove_C_TickSize::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'B_GarlicClove_C_TickSize::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000058, "Member 'B_GarlicClove_C_TickSize::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_Subtract_DoubleDouble_B_ImplicitCast) == 0x000060, "Member 'B_GarlicClove_C_TickSize::CallFunc_Subtract_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast) == 0x000068, "Member 'B_GarlicClove_C_TickSize::CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_GetFloatValue_InTime_ImplicitCast_1) == 0x00006C, "Member 'B_GarlicClove_C_TickSize::CallFunc_GetFloatValue_InTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000070, "Member 'B_GarlicClove_C_TickSize::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast) == 0x000078, "Member 'B_GarlicClove_C_TickSize::CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GarlicClove_C_TickSize, CallFunc_SetFloatParameter_Param_ImplicitCast) == 0x00007C, "Member 'B_GarlicClove_C_TickSize::CallFunc_SetFloatParameter_Param_ImplicitCast' has a wrong offset!");

}

