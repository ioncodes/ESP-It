#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_BaseInstrumentProp

#include "Basic.hpp"

#include "S_InstrumentTracks_structs.hpp"


namespace SDK::Params
{

// Function B_BaseInstrumentProp.B_BaseInstrumentProp_C.ApplyTemplateData
// 0x0020 (0x0020 - 0x0000)
struct B_BaseInstrumentProp_C_ApplyTemplateData final
{
public:
	class AActor*                                 Template;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBoolean;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BaseInstrumentProp_C_ApplyTemplateData) == 0x000008, "Wrong alignment on B_BaseInstrumentProp_C_ApplyTemplateData");
static_assert(sizeof(B_BaseInstrumentProp_C_ApplyTemplateData) == 0x000020, "Wrong size on B_BaseInstrumentProp_C_ApplyTemplateData");
static_assert(offsetof(B_BaseInstrumentProp_C_ApplyTemplateData, Template) == 0x000000, "Member 'B_BaseInstrumentProp_C_ApplyTemplateData::Template' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ApplyTemplateData, ForcedBoolean) == 0x000008, "Member 'B_BaseInstrumentProp_C_ApplyTemplateData::ForcedBoolean' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ApplyTemplateData, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000010, "Member 'B_BaseInstrumentProp_C_ApplyTemplateData::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ApplyTemplateData, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_BaseInstrumentProp_C_ApplyTemplateData::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_BaseInstrumentProp.B_BaseInstrumentProp_C.StartPlayingOrJoinMusic
// 0x00C8 (0x00C8 - 0x0000)
struct B_BaseInstrumentProp_C_StartPlayingOrJoinMusic final
{
public:
	bool                                          Join;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_InstrumentTracks                    CallFunc_Map_Find_Value;                           // 0x0068(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundWave*                             CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Percent_FloatFloat_ReturnValue;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Percent_FloatFloat_B_ImplicitCast;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FadeIn_StartTime_ImplicitCast;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic) == 0x000008, "Wrong alignment on B_BaseInstrumentProp_C_StartPlayingOrJoinMusic");
static_assert(sizeof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic) == 0x0000C8, "Wrong size on B_BaseInstrumentProp_C_StartPlayingOrJoinMusic");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, Join) == 0x000000, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::Join' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, Temp_real_Variable) == 0x000008, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, K2Node_DynamicCast_AsB_Game_State) == 0x000018, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_GetGameState_ReturnValue_1) == 0x000028, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, K2Node_DynamicCast_AsB_Game_State_1) == 0x000030, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, Temp_bool_Variable) == 0x000039, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_IsValid_ReturnValue) == 0x00003A, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_GetGameState_ReturnValue_2) == 0x000040, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, K2Node_DynamicCast_AsB_Game_State_2) == 0x000048, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000058, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000060, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_Map_Find_Value) == 0x000068, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_Array_Get_Item) == 0x000098, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_Percent_FloatFloat_ReturnValue) == 0x0000A8, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, K2Node_Select_Default) == 0x0000B0, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_Percent_FloatFloat_B_ImplicitCast) == 0x0000B8, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_Percent_FloatFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_StartPlayingOrJoinMusic, CallFunc_FadeIn_StartTime_ImplicitCast) == 0x0000C0, "Member 'B_BaseInstrumentProp_C_StartPlayingOrJoinMusic::CallFunc_FadeIn_StartTime_ImplicitCast' has a wrong offset!");

// Function B_BaseInstrumentProp.B_BaseInstrumentProp_C.DeactivateActionProp
// 0x0048 (0x0048 - 0x0000)
struct B_BaseInstrumentProp_C_DeactivateActionProp final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BaseInstrumentProp_C_DeactivateActionProp) == 0x000008, "Wrong alignment on B_BaseInstrumentProp_C_DeactivateActionProp");
static_assert(sizeof(B_BaseInstrumentProp_C_DeactivateActionProp) == 0x000048, "Wrong size on B_BaseInstrumentProp_C_DeactivateActionProp");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, CallFunc_GetGameState_ReturnValue_1) == 0x000008, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, K2Node_DynamicCast_AsB_Game_State) == 0x000010, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, K2Node_DynamicCast_AsB_Game_State_1) == 0x000020, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, CallFunc_GetDisplayName_ReturnValue) == 0x000030, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_DeactivateActionProp, CallFunc_HasAuthority_ReturnValue) == 0x000040, "Member 'B_BaseInstrumentProp_C_DeactivateActionProp::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function B_BaseInstrumentProp.B_BaseInstrumentProp_C.ActivateActionProp
// 0x0030 (0x0030 - 0x0000)
struct B_BaseInstrumentProp_C_ActivateActionProp final
{
public:
	bool                                          Override;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BaseInstrumentProp_C_ActivateActionProp) == 0x000008, "Wrong alignment on B_BaseInstrumentProp_C_ActivateActionProp");
static_assert(sizeof(B_BaseInstrumentProp_C_ActivateActionProp) == 0x000030, "Wrong size on B_BaseInstrumentProp_C_ActivateActionProp");
static_assert(offsetof(B_BaseInstrumentProp_C_ActivateActionProp, Override) == 0x000000, "Member 'B_BaseInstrumentProp_C_ActivateActionProp::Override' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ActivateActionProp, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_BaseInstrumentProp_C_ActivateActionProp::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ActivateActionProp, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'B_BaseInstrumentProp_C_ActivateActionProp::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ActivateActionProp, K2Node_DynamicCast_AsB_Game_State) == 0x000020, "Member 'B_BaseInstrumentProp_C_ActivateActionProp::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ActivateActionProp, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_BaseInstrumentProp_C_ActivateActionProp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ActivateActionProp, CallFunc_HasAuthority_ReturnValue) == 0x000029, "Member 'B_BaseInstrumentProp_C_ActivateActionProp::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function B_BaseInstrumentProp.B_BaseInstrumentProp_C.ExecuteUbergraph_B_BaseInstrumentProp
// 0x0030 (0x0030 - 0x0000)
struct B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp) == 0x000008, "Wrong alignment on B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp");
static_assert(sizeof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp) == 0x000030, "Wrong size on B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp");
static_assert(offsetof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp, EntryPoint) == 0x000000, "Member 'B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp, K2Node_DynamicCast_AsB_Game_State) == 0x000010, "Member 'B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'B_BaseInstrumentProp_C_ExecuteUbergraph_B_BaseInstrumentProp::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

}

