#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_CauldronPawn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_CauldronPawn.B_CauldronPawn_C
// 0x0030 (0x0350 - 0x0320)
class AB_CauldronPawn_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        BaseTurnRate;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseLookUpRate;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_CauldronPawn(int32 EntryPoint);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_40(float AxisValue);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_14(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_47(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_21(float AxisValue);
	void PossessedClient();
	void ReceivePossessed(class AController* NewController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_CauldronPawn_C">();
	}
	static class AB_CauldronPawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_CauldronPawn_C>();
	}
};
static_assert(alignof(AB_CauldronPawn_C) == 0x000008, "Wrong alignment on AB_CauldronPawn_C");
static_assert(sizeof(AB_CauldronPawn_C) == 0x000350, "Wrong size on AB_CauldronPawn_C");
static_assert(offsetof(AB_CauldronPawn_C, UberGraphFrame) == 0x000320, "Member 'AB_CauldronPawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_CauldronPawn_C, Camera) == 0x000328, "Member 'AB_CauldronPawn_C::Camera' has a wrong offset!");
static_assert(offsetof(AB_CauldronPawn_C, SpringArm) == 0x000330, "Member 'AB_CauldronPawn_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AB_CauldronPawn_C, DefaultSceneRoot) == 0x000338, "Member 'AB_CauldronPawn_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AB_CauldronPawn_C, BaseTurnRate) == 0x000340, "Member 'AB_CauldronPawn_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(AB_CauldronPawn_C, BaseLookUpRate) == 0x000348, "Member 'AB_CauldronPawn_C::BaseLookUpRate' has a wrong offset!");

}

