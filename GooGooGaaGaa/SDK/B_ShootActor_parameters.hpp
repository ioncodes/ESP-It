#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ShootActor

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_ShootActor.B_ShootActor_C.CheckIfShot
// 0x0040 (0x0040 - 0x0000)
struct B_ShootActor_C_CheckIfShot final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Potato_C*                            K2Node_DynamicCast_AsB_Potato;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1769[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Task_C*                              K2Node_DynamicCast_AsB_Task;                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_176A[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootActor_C_CheckIfShot) == 0x000008, "Wrong alignment on B_ShootActor_C_CheckIfShot");
static_assert(sizeof(B_ShootActor_C_CheckIfShot) == 0x000040, "Wrong size on B_ShootActor_C_CheckIfShot");
static_assert(offsetof(B_ShootActor_C_CheckIfShot, InActor) == 0x000000, "Member 'B_ShootActor_C_CheckIfShot::InActor' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_CheckIfShot, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'B_ShootActor_C_CheckIfShot::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_CheckIfShot, K2Node_DynamicCast_AsB_Potato) == 0x000010, "Member 'B_ShootActor_C_CheckIfShot::K2Node_DynamicCast_AsB_Potato' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_CheckIfShot, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_ShootActor_C_CheckIfShot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_CheckIfShot, K2Node_DynamicCast_AsB_Task) == 0x000020, "Member 'B_ShootActor_C_CheckIfShot::K2Node_DynamicCast_AsB_Task' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_CheckIfShot, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_ShootActor_C_CheckIfShot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_CheckIfShot, CallFunc_GetOwner_ReturnValue_1) == 0x000030, "Member 'B_ShootActor_C_CheckIfShot::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_CheckIfShot, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'B_ShootActor_C_CheckIfShot::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function B_ShootActor.B_ShootActor_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_176B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_ShootActor_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_ShootActor.B_ShootActor_C.ExecuteUbergraph_B_ShootActor
// 0x0110 (0x0110 - 0x0000)
struct B_ShootActor_C_ExecuteUbergraph_B_ShootActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_176C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_176D[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor) == 0x000008, "Wrong alignment on B_ShootActor_C_ExecuteUbergraph_B_ShootActor");
static_assert(sizeof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor) == 0x000110, "Wrong size on B_ShootActor_C_ExecuteUbergraph_B_ShootActor");
static_assert(offsetof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor, EntryPoint) == 0x000000, "Member 'B_ShootActor_C_ExecuteUbergraph_B_ShootActor::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'B_ShootActor_C_ExecuteUbergraph_B_ShootActor::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'B_ShootActor_C_ExecuteUbergraph_B_ShootActor::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'B_ShootActor_C_ExecuteUbergraph_B_ShootActor::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'B_ShootActor_C_ExecuteUbergraph_B_ShootActor::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'B_ShootActor_C_ExecuteUbergraph_B_ShootActor::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_ShootActor_C_ExecuteUbergraph_B_ShootActor, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'B_ShootActor_C_ExecuteUbergraph_B_ShootActor::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");

}

