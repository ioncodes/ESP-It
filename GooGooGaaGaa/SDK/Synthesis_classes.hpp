#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Synthesis

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Synthesis_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "AudioMixer_classes.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class Synthesis.AudioImpulseResponse
// 0x0030 (0x0058 - 0x0028)
class UAudioImpulseResponse final : public UObject
{
public:
	TArray<float>                                 ImpulseResponse;                                   // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumChannels;                                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizationVolumeDb;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrueStereo;                                       // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331A[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 IRData;                                            // 0x0048(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioImpulseResponse">();
	}
	static class UAudioImpulseResponse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioImpulseResponse>();
	}
};
static_assert(alignof(UAudioImpulseResponse) == 0x000008, "Wrong alignment on UAudioImpulseResponse");
static_assert(sizeof(UAudioImpulseResponse) == 0x000058, "Wrong size on UAudioImpulseResponse");
static_assert(offsetof(UAudioImpulseResponse, ImpulseResponse) == 0x000028, "Member 'UAudioImpulseResponse::ImpulseResponse' has a wrong offset!");
static_assert(offsetof(UAudioImpulseResponse, NumChannels) == 0x000038, "Member 'UAudioImpulseResponse::NumChannels' has a wrong offset!");
static_assert(offsetof(UAudioImpulseResponse, SampleRate) == 0x00003C, "Member 'UAudioImpulseResponse::SampleRate' has a wrong offset!");
static_assert(offsetof(UAudioImpulseResponse, NormalizationVolumeDb) == 0x000040, "Member 'UAudioImpulseResponse::NormalizationVolumeDb' has a wrong offset!");
static_assert(offsetof(UAudioImpulseResponse, bTrueStereo) == 0x000044, "Member 'UAudioImpulseResponse::bTrueStereo' has a wrong offset!");
static_assert(offsetof(UAudioImpulseResponse, IRData) == 0x000048, "Member 'UAudioImpulseResponse::IRData' has a wrong offset!");

// Class Synthesis.ModularSynthPresetBank
// 0x0010 (0x0038 - 0x0028)
class UModularSynthPresetBank final : public UObject
{
public:
	TArray<struct FModularSynthPresetBankEntry>   Presets;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthPresetBank">();
	}
	static class UModularSynthPresetBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthPresetBank>();
	}
};
static_assert(alignof(UModularSynthPresetBank) == 0x000008, "Wrong alignment on UModularSynthPresetBank");
static_assert(sizeof(UModularSynthPresetBank) == 0x000038, "Wrong size on UModularSynthPresetBank");
static_assert(offsetof(UModularSynthPresetBank, Presets) == 0x000028, "Member 'UModularSynthPresetBank::Presets' has a wrong offset!");

// Class Synthesis.ModularSynthLibrary
// 0x0000 (0x0028 - 0x0028)
class UModularSynthLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddModularSynthPresetToBankAsset(class UModularSynthPresetBank* InBank, const struct FModularSynthPreset& Preset, const class FString& PresetName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthLibrary">();
	}
	static class UModularSynthLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthLibrary>();
	}
};
static_assert(alignof(UModularSynthLibrary) == 0x000008, "Wrong alignment on UModularSynthLibrary");
static_assert(sizeof(UModularSynthLibrary) == 0x000028, "Wrong size on UModularSynthLibrary");

// Class Synthesis.ModularSynthComponent
// 0x06D0 (0x0FD0 - 0x0900)
class UModularSynthComponent final : public USynthComponent
{
public:
	int32                                         VoiceCount;                                        // 0x0900(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331B[0x6CC];                                   // 0x0904(0x06CC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FPatchId CreatePatch(const ESynth1PatchSource PatchSource, const TArray<struct FSynth1PatchCable>& PatchCables, const bool bEnableByDefault);
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);
	void NoteOn(const float Note, const int32 Velocity, const float Duration);
	void SetAttackTime(float AttackTimeMsec);
	void SetChorusDepth(float Depth);
	void SetChorusEnabled(bool EnableChorus);
	void SetChorusFeedback(float Feedback);
	void SetChorusFrequency(float Frequency);
	void SetDecayTime(float DecayTimeMsec);
	void SetEnableLegato(bool LegatoEnabled);
	bool SetEnablePatch(const struct FPatchId& PatchId, const bool bIsEnabled);
	void SetEnablePolyphony(bool bEnablePolyphony);
	void SetEnableRetrigger(bool RetriggerEnabled);
	void SetEnableUnison(bool EnableUnison);
	void SetFilterAlgorithm(ESynthFilterAlgorithm FilterAlgorithm);
	void SetFilterFrequency(float FilterFrequencyHz);
	void SetFilterFrequencyMod(float FilterFrequencyHz);
	void SetFilterQ(float FilterQ);
	void SetFilterQMod(float FilterQ);
	void SetFilterType(ESynthFilterType FilterType);
	void SetGainDb(float GainDb);
	void SetLFOFrequency(int32 LFOIndex, float FrequencyHz);
	void SetLFOFrequencyMod(int32 LFOIndex, float FrequencyModHz);
	void SetLFOGain(int32 LFOIndex, float Gain);
	void SetLFOGainMod(int32 LFOIndex, float GainMod);
	void SetLFOMode(int32 LFOIndex, ESynthLFOMode LFOMode);
	void SetLFOPatch(int32 LFOIndex, ESynthLFOPatchType LFOPatchType);
	void SetLFOType(int32 LFOIndex, ESynthLFOType LFOType);
	void SetModEnvAttackTime(const float AttackTimeMsec);
	void SetModEnvBiasInvert(const bool bInvert);
	void SetModEnvBiasPatch(const ESynthModEnvBiasPatch InPatchType);
	void SetModEnvDecayTime(const float DecayTimeMsec);
	void SetModEnvDepth(const float Depth);
	void SetModEnvInvert(const bool bInvert);
	void SetModEnvPatch(const ESynthModEnvPatch InPatchType);
	void SetModEnvReleaseTime(const float Release);
	void SetModEnvSustainGain(const float SustainGain);
	void SetOscCents(int32 OscIndex, float Cents);
	void SetOscFrequencyMod(int32 OscIndex, float OscFreqMod);
	void SetOscGain(int32 OscIndex, float OscGain);
	void SetOscGainMod(int32 OscIndex, float OscGainMod);
	void SetOscOctave(int32 OscIndex, float Octave);
	void SetOscPulsewidth(int32 OscIndex, float Pulsewidth);
	void SetOscSemitones(int32 OscIndex, float Semitones);
	void SetOscSync(const bool bIsSynced);
	void SetOscType(int32 OscIndex, ESynth1OscType OscType);
	void SetPan(float Pan);
	void SetPitchBend(float PitchBend);
	void SetPortamento(float Portamento);
	void SetReleaseTime(float ReleaseTimeMsec);
	void SetSpread(float Spread);
	void SetStereoDelayFeedback(float DelayFeedback);
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);
	void SetStereoDelayMode(ESynthStereoDelayMode StereoDelayMode);
	void SetStereoDelayRatio(float DelayRatio);
	void SetStereoDelayTime(float DelayTimeMsec);
	void SetStereoDelayWetlevel(float DelayWetlevel);
	void SetSustainGain(float SustainGain);
	void SetSynthPreset(const struct FModularSynthPreset& SynthPreset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthComponent">();
	}
	static class UModularSynthComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthComponent>();
	}
};
static_assert(alignof(UModularSynthComponent) == 0x000010, "Wrong alignment on UModularSynthComponent");
static_assert(sizeof(UModularSynthComponent) == 0x000FD0, "Wrong size on UModularSynthComponent");
static_assert(offsetof(UModularSynthComponent, VoiceCount) == 0x000900, "Member 'UModularSynthComponent::VoiceCount' has a wrong offset!");

// Class Synthesis.SourceEffectBitCrusherPreset
// 0x01A8 (0x0210 - 0x0068)
class USourceEffectBitCrusherPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3324[0xE8];                                    // 0x0068(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectBitCrusherSettings        Settings;                                          // 0x0150(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetBitModulator(const class USoundModulatorBase* Modulator);
	void SetBitModulators(const TSet<class USoundModulatorBase*>& InModulators);
	void SetBits(float Bits);
	void SetModulationSettings(const struct FSourceEffectBitCrusherSettings& ModulationSettings);
	void SetSampleRate(float SampleRate);
	void SetSampleRateModulator(const class USoundModulatorBase* Modulator);
	void SetSampleRateModulators(const TSet<class USoundModulatorBase*>& InModulators);
	void SetSettings(const struct FSourceEffectBitCrusherBaseSettings& Param_Settings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectBitCrusherPreset">();
	}
	static class USourceEffectBitCrusherPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectBitCrusherPreset>();
	}
};
static_assert(alignof(USourceEffectBitCrusherPreset) == 0x000008, "Wrong alignment on USourceEffectBitCrusherPreset");
static_assert(sizeof(USourceEffectBitCrusherPreset) == 0x000210, "Wrong size on USourceEffectBitCrusherPreset");
static_assert(offsetof(USourceEffectBitCrusherPreset, Settings) == 0x000150, "Member 'USourceEffectBitCrusherPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectChorusPreset
// 0x0478 (0x04E0 - 0x0068)
class USourceEffectChorusPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3325[0x250];                                   // 0x0068(0x0250)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectChorusSettings            Settings;                                          // 0x02B8(0x0228)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetDepth(float Depth);
	void SetDepthModulator(const class USoundModulatorBase* Modulator);
	void SetDepthModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetDry(float DryAmount);
	void SetDryModulator(const class USoundModulatorBase* Modulator);
	void SetDryModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetFeedback(float Feedback);
	void SetFeedbackModulator(const class USoundModulatorBase* Modulator);
	void SetFeedbackModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetFrequency(float Frequency);
	void SetFrequencyModulator(const class USoundModulatorBase* Modulator);
	void SetFrequencyModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetModulationSettings(const struct FSourceEffectChorusSettings& ModulationSettings);
	void SetSettings(const struct FSourceEffectChorusBaseSettings& Param_Settings);
	void SetSpread(float Spread);
	void SetSpreadModulator(const class USoundModulatorBase* Modulator);
	void SetSpreadModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetWet(float WetAmount);
	void SetWetModulator(const class USoundModulatorBase* Modulator);
	void SetWetModulators(const TSet<class USoundModulatorBase*>& Modulators);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectChorusPreset">();
	}
	static class USourceEffectChorusPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectChorusPreset>();
	}
};
static_assert(alignof(USourceEffectChorusPreset) == 0x000008, "Wrong alignment on USourceEffectChorusPreset");
static_assert(sizeof(USourceEffectChorusPreset) == 0x0004E0, "Wrong size on USourceEffectChorusPreset");
static_assert(offsetof(USourceEffectChorusPreset, Settings) == 0x0002B8, "Member 'USourceEffectChorusPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectConvolutionReverbPreset
// 0x0058 (0x00C0 - 0x0068)
class USourceEffectConvolutionReverbPreset final : public USoundEffectSourcePreset
{
public:
	class UAudioImpulseResponse*                  ImpulseResponse;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSourceEffectConvolutionReverbSettings Settings;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ESubmixEffectConvolutionReverbBlockSize       BlockSize;                                         // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHardwareAcceleration;                       // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3326[0x3E];                                    // 0x0082(0x003E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetImpulseResponse(class UAudioImpulseResponse* InImpulseResponse);
	void SetSettings(const struct FSourceEffectConvolutionReverbSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectConvolutionReverbPreset">();
	}
	static class USourceEffectConvolutionReverbPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectConvolutionReverbPreset>();
	}
};
static_assert(alignof(USourceEffectConvolutionReverbPreset) == 0x000008, "Wrong alignment on USourceEffectConvolutionReverbPreset");
static_assert(sizeof(USourceEffectConvolutionReverbPreset) == 0x0000C0, "Wrong size on USourceEffectConvolutionReverbPreset");
static_assert(offsetof(USourceEffectConvolutionReverbPreset, ImpulseResponse) == 0x000068, "Member 'USourceEffectConvolutionReverbPreset::ImpulseResponse' has a wrong offset!");
static_assert(offsetof(USourceEffectConvolutionReverbPreset, Settings) == 0x000070, "Member 'USourceEffectConvolutionReverbPreset::Settings' has a wrong offset!");
static_assert(offsetof(USourceEffectConvolutionReverbPreset, BlockSize) == 0x000080, "Member 'USourceEffectConvolutionReverbPreset::BlockSize' has a wrong offset!");
static_assert(offsetof(USourceEffectConvolutionReverbPreset, bEnableHardwareAcceleration) == 0x000081, "Member 'USourceEffectConvolutionReverbPreset::bEnableHardwareAcceleration' has a wrong offset!");

// Class Synthesis.SourceEffectDynamicsProcessorPreset
// 0x0078 (0x00E0 - 0x0068)
class USourceEffectDynamicsProcessorPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3327[0x50];                                    // 0x0068(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectDynamicsProcessorSettings Settings;                                          // 0x00B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectDynamicsProcessorSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectDynamicsProcessorPreset">();
	}
	static class USourceEffectDynamicsProcessorPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectDynamicsProcessorPreset>();
	}
};
static_assert(alignof(USourceEffectDynamicsProcessorPreset) == 0x000008, "Wrong alignment on USourceEffectDynamicsProcessorPreset");
static_assert(sizeof(USourceEffectDynamicsProcessorPreset) == 0x0000E0, "Wrong size on USourceEffectDynamicsProcessorPreset");
static_assert(offsetof(USourceEffectDynamicsProcessorPreset, Settings) == 0x0000B8, "Member 'USourceEffectDynamicsProcessorPreset::Settings' has a wrong offset!");

// Class Synthesis.EnvelopeFollowerListener
// 0x0020 (0x00C0 - 0x00A0)
class UEnvelopeFollowerListener final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnEnvelopeFollowerUpdate;                          // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3328[0x10];                                    // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvelopeFollowerListener">();
	}
	static class UEnvelopeFollowerListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvelopeFollowerListener>();
	}
};
static_assert(alignof(UEnvelopeFollowerListener) == 0x000008, "Wrong alignment on UEnvelopeFollowerListener");
static_assert(sizeof(UEnvelopeFollowerListener) == 0x0000C0, "Wrong size on UEnvelopeFollowerListener");
static_assert(offsetof(UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate) == 0x0000A0, "Member 'UEnvelopeFollowerListener::OnEnvelopeFollowerUpdate' has a wrong offset!");

// Class Synthesis.SourceEffectEnvelopeFollowerPreset
// 0x0040 (0x00A8 - 0x0068)
class USourceEffectEnvelopeFollowerPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3329[0x34];                                    // 0x0068(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectEnvelopeFollowerSettings  Settings;                                          // 0x009C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void RegisterEnvelopeFollowerListener(class UEnvelopeFollowerListener* EnvelopeFollowerListener);
	void SetSettings(const struct FSourceEffectEnvelopeFollowerSettings& InSettings);
	void UnregisterEnvelopeFollowerListener(class UEnvelopeFollowerListener* EnvelopeFollowerListener);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectEnvelopeFollowerPreset">();
	}
	static class USourceEffectEnvelopeFollowerPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectEnvelopeFollowerPreset>();
	}
};
static_assert(alignof(USourceEffectEnvelopeFollowerPreset) == 0x000008, "Wrong alignment on USourceEffectEnvelopeFollowerPreset");
static_assert(sizeof(USourceEffectEnvelopeFollowerPreset) == 0x0000A8, "Wrong size on USourceEffectEnvelopeFollowerPreset");
static_assert(offsetof(USourceEffectEnvelopeFollowerPreset, Settings) == 0x00009C, "Member 'USourceEffectEnvelopeFollowerPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectEQPreset
// 0x0048 (0x00B0 - 0x0068)
class USourceEffectEQPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_332A[0x38];                                    // 0x0068(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectEQSettings                Settings;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectEQSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectEQPreset">();
	}
	static class USourceEffectEQPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectEQPreset>();
	}
};
static_assert(alignof(USourceEffectEQPreset) == 0x000008, "Wrong alignment on USourceEffectEQPreset");
static_assert(sizeof(USourceEffectEQPreset) == 0x0000B0, "Wrong size on USourceEffectEQPreset");
static_assert(offsetof(USourceEffectEQPreset, Settings) == 0x0000A0, "Member 'USourceEffectEQPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectFilterPreset
// 0x0068 (0x00D0 - 0x0068)
class USourceEffectFilterPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_332B[0x48];                                    // 0x0068(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectFilterSettings            Settings;                                          // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectFilterSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectFilterPreset">();
	}
	static class USourceEffectFilterPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectFilterPreset>();
	}
};
static_assert(alignof(USourceEffectFilterPreset) == 0x000008, "Wrong alignment on USourceEffectFilterPreset");
static_assert(sizeof(USourceEffectFilterPreset) == 0x0000D0, "Wrong size on USourceEffectFilterPreset");
static_assert(offsetof(USourceEffectFilterPreset, Settings) == 0x0000B0, "Member 'USourceEffectFilterPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectFoldbackDistortionPreset
// 0x0040 (0x00A8 - 0x0068)
class USourceEffectFoldbackDistortionPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_332C[0x34];                                    // 0x0068(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectFoldbackDistortionSettings Settings;                                          // 0x009C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectFoldbackDistortionSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectFoldbackDistortionPreset">();
	}
	static class USourceEffectFoldbackDistortionPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectFoldbackDistortionPreset>();
	}
};
static_assert(alignof(USourceEffectFoldbackDistortionPreset) == 0x000008, "Wrong alignment on USourceEffectFoldbackDistortionPreset");
static_assert(sizeof(USourceEffectFoldbackDistortionPreset) == 0x0000A8, "Wrong size on USourceEffectFoldbackDistortionPreset");
static_assert(offsetof(USourceEffectFoldbackDistortionPreset, Settings) == 0x00009C, "Member 'USourceEffectFoldbackDistortionPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectMidSideSpreaderPreset
// 0x0038 (0x00A0 - 0x0068)
class USourceEffectMidSideSpreaderPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_332D[0x30];                                    // 0x0068(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectMidSideSpreaderSettings   Settings;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectMidSideSpreaderSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectMidSideSpreaderPreset">();
	}
	static class USourceEffectMidSideSpreaderPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectMidSideSpreaderPreset>();
	}
};
static_assert(alignof(USourceEffectMidSideSpreaderPreset) == 0x000008, "Wrong alignment on USourceEffectMidSideSpreaderPreset");
static_assert(sizeof(USourceEffectMidSideSpreaderPreset) == 0x0000A0, "Wrong size on USourceEffectMidSideSpreaderPreset");
static_assert(offsetof(USourceEffectMidSideSpreaderPreset, Settings) == 0x000098, "Member 'USourceEffectMidSideSpreaderPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectMotionFilterPreset
// 0x0118 (0x0180 - 0x0068)
class USourceEffectMotionFilterPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_332E[0xA0];                                    // 0x0068(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectMotionFilterSettings      Settings;                                          // 0x0108(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectMotionFilterSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectMotionFilterPreset">();
	}
	static class USourceEffectMotionFilterPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectMotionFilterPreset>();
	}
};
static_assert(alignof(USourceEffectMotionFilterPreset) == 0x000008, "Wrong alignment on USourceEffectMotionFilterPreset");
static_assert(sizeof(USourceEffectMotionFilterPreset) == 0x000180, "Wrong size on USourceEffectMotionFilterPreset");
static_assert(offsetof(USourceEffectMotionFilterPreset, Settings) == 0x000108, "Member 'USourceEffectMotionFilterPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectPannerPreset
// 0x0038 (0x00A0 - 0x0068)
class USourceEffectPannerPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_332F[0x30];                                    // 0x0068(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectPannerSettings            Settings;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectPannerSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectPannerPreset">();
	}
	static class USourceEffectPannerPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectPannerPreset>();
	}
};
static_assert(alignof(USourceEffectPannerPreset) == 0x000008, "Wrong alignment on USourceEffectPannerPreset");
static_assert(sizeof(USourceEffectPannerPreset) == 0x0000A0, "Wrong size on USourceEffectPannerPreset");
static_assert(offsetof(USourceEffectPannerPreset, Settings) == 0x000098, "Member 'USourceEffectPannerPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectPhaserPreset
// 0x0048 (0x00B0 - 0x0068)
class USourceEffectPhaserPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3330[0x38];                                    // 0x0068(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectPhaserSettings            Settings;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectPhaserSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectPhaserPreset">();
	}
	static class USourceEffectPhaserPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectPhaserPreset>();
	}
};
static_assert(alignof(USourceEffectPhaserPreset) == 0x000008, "Wrong alignment on USourceEffectPhaserPreset");
static_assert(sizeof(USourceEffectPhaserPreset) == 0x0000B0, "Wrong size on USourceEffectPhaserPreset");
static_assert(offsetof(USourceEffectPhaserPreset, Settings) == 0x0000A0, "Member 'USourceEffectPhaserPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectRingModulationPreset
// 0x0068 (0x00D0 - 0x0068)
class USourceEffectRingModulationPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3331[0x48];                                    // 0x0068(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectRingModulationSettings    Settings;                                          // 0x00B0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectRingModulationSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectRingModulationPreset">();
	}
	static class USourceEffectRingModulationPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectRingModulationPreset>();
	}
};
static_assert(alignof(USourceEffectRingModulationPreset) == 0x000008, "Wrong alignment on USourceEffectRingModulationPreset");
static_assert(sizeof(USourceEffectRingModulationPreset) == 0x0000D0, "Wrong size on USourceEffectRingModulationPreset");
static_assert(offsetof(USourceEffectRingModulationPreset, Settings) == 0x0000B0, "Member 'USourceEffectRingModulationPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectSimpleDelayPreset
// 0x0058 (0x00C0 - 0x0068)
class USourceEffectSimpleDelayPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3332[0x40];                                    // 0x0068(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectSimpleDelaySettings       Settings;                                          // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectSimpleDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectSimpleDelayPreset">();
	}
	static class USourceEffectSimpleDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectSimpleDelayPreset>();
	}
};
static_assert(alignof(USourceEffectSimpleDelayPreset) == 0x000008, "Wrong alignment on USourceEffectSimpleDelayPreset");
static_assert(sizeof(USourceEffectSimpleDelayPreset) == 0x0000C0, "Wrong size on USourceEffectSimpleDelayPreset");
static_assert(offsetof(USourceEffectSimpleDelayPreset, Settings) == 0x0000A8, "Member 'USourceEffectSimpleDelayPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectStereoDelayPreset
// 0x0070 (0x00D8 - 0x0068)
class USourceEffectStereoDelayPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3333[0x4C];                                    // 0x0068(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectStereoDelaySettings       Settings;                                          // 0x00B4(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectStereoDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectStereoDelayPreset">();
	}
	static class USourceEffectStereoDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectStereoDelayPreset>();
	}
};
static_assert(alignof(USourceEffectStereoDelayPreset) == 0x000008, "Wrong alignment on USourceEffectStereoDelayPreset");
static_assert(sizeof(USourceEffectStereoDelayPreset) == 0x0000D8, "Wrong size on USourceEffectStereoDelayPreset");
static_assert(offsetof(USourceEffectStereoDelayPreset, Settings) == 0x0000B4, "Member 'USourceEffectStereoDelayPreset::Settings' has a wrong offset!");

// Class Synthesis.SourceEffectWaveShaperPreset
// 0x0038 (0x00A0 - 0x0068)
class USourceEffectWaveShaperPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_3334[0x30];                                    // 0x0068(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectWaveShaperSettings        Settings;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectWaveShaperSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectWaveShaperPreset">();
	}
	static class USourceEffectWaveShaperPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectWaveShaperPreset>();
	}
};
static_assert(alignof(USourceEffectWaveShaperPreset) == 0x000008, "Wrong alignment on USourceEffectWaveShaperPreset");
static_assert(sizeof(USourceEffectWaveShaperPreset) == 0x0000A0, "Wrong size on USourceEffectWaveShaperPreset");
static_assert(offsetof(USourceEffectWaveShaperPreset, Settings) == 0x000098, "Member 'USourceEffectWaveShaperPreset::Settings' has a wrong offset!");

// Class Synthesis.SubmixEffectConvolutionReverbPreset
// 0x0098 (0x0100 - 0x0068)
class USubmixEffectConvolutionReverbPreset final : public USoundEffectSubmixPreset
{
public:
	class UAudioImpulseResponse*                  ImpulseResponse;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubmixEffectConvolutionReverbSettings Settings;                                          // 0x0070(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ESubmixEffectConvolutionReverbBlockSize       BlockSize;                                         // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHardwareAcceleration;                       // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3335[0x5E];                                    // 0x00A2(0x005E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetImpulseResponse(class UAudioImpulseResponse* InImpulseResponse);
	void SetSettings(const struct FSubmixEffectConvolutionReverbSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectConvolutionReverbPreset">();
	}
	static class USubmixEffectConvolutionReverbPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectConvolutionReverbPreset>();
	}
};
static_assert(alignof(USubmixEffectConvolutionReverbPreset) == 0x000008, "Wrong alignment on USubmixEffectConvolutionReverbPreset");
static_assert(sizeof(USubmixEffectConvolutionReverbPreset) == 0x000100, "Wrong size on USubmixEffectConvolutionReverbPreset");
static_assert(offsetof(USubmixEffectConvolutionReverbPreset, ImpulseResponse) == 0x000068, "Member 'USubmixEffectConvolutionReverbPreset::ImpulseResponse' has a wrong offset!");
static_assert(offsetof(USubmixEffectConvolutionReverbPreset, Settings) == 0x000070, "Member 'USubmixEffectConvolutionReverbPreset::Settings' has a wrong offset!");
static_assert(offsetof(USubmixEffectConvolutionReverbPreset, BlockSize) == 0x0000A0, "Member 'USubmixEffectConvolutionReverbPreset::BlockSize' has a wrong offset!");
static_assert(offsetof(USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration) == 0x0000A1, "Member 'USubmixEffectConvolutionReverbPreset::bEnableHardwareAcceleration' has a wrong offset!");

// Class Synthesis.SubmixEffectDelayStatics
// 0x0000 (0x0028 - 0x0028)
class USubmixEffectDelayStatics final : public UBlueprintFunctionLibrary
{
public:
	static struct FSubmixEffectDelaySettings SetDelayLength(struct FSubmixEffectDelaySettings& DelaySettings, float DelayLength);
	static struct FSubmixEffectDelaySettings SetInterpolationTime(struct FSubmixEffectDelaySettings& DelaySettings, float InterpolationTime);
	static struct FSubmixEffectDelaySettings SetMaximumDelayLength(struct FSubmixEffectDelaySettings& DelaySettings, float MaximumDelayLength);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectDelayStatics">();
	}
	static class USubmixEffectDelayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectDelayStatics>();
	}
};
static_assert(alignof(USubmixEffectDelayStatics) == 0x000008, "Wrong alignment on USubmixEffectDelayStatics");
static_assert(sizeof(USubmixEffectDelayStatics) == 0x000028, "Wrong size on USubmixEffectDelayStatics");

// Class Synthesis.SubmixEffectDelayPreset
// 0x0050 (0x00B8 - 0x0068)
class USubmixEffectDelayPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_3336[0x34];                                    // 0x0068(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectDelaySettings             Settings;                                          // 0x009C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSubmixEffectDelaySettings             DynamicSettings;                                   // 0x00A8(0x000C)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3337[0x4];                                     // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDefaultSettings(const struct FSubmixEffectDelaySettings& InSettings);
	void SetDelay(float Length);
	void SetInterpolationTime(float Time);
	void SetSettings(const struct FSubmixEffectDelaySettings& InSettings);

	float GetMaxDelayInMilliseconds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectDelayPreset">();
	}
	static class USubmixEffectDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectDelayPreset>();
	}
};
static_assert(alignof(USubmixEffectDelayPreset) == 0x000008, "Wrong alignment on USubmixEffectDelayPreset");
static_assert(sizeof(USubmixEffectDelayPreset) == 0x0000B8, "Wrong size on USubmixEffectDelayPreset");
static_assert(offsetof(USubmixEffectDelayPreset, Settings) == 0x00009C, "Member 'USubmixEffectDelayPreset::Settings' has a wrong offset!");
static_assert(offsetof(USubmixEffectDelayPreset, DynamicSettings) == 0x0000A8, "Member 'USubmixEffectDelayPreset::DynamicSettings' has a wrong offset!");

// Class Synthesis.SubmixEffectFilterPreset
// 0x0040 (0x00A8 - 0x0068)
class USubmixEffectFilterPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_3338[0x34];                                    // 0x0068(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectFilterSettings            Settings;                                          // 0x009C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetFilterAlgorithm(ESubmixFilterAlgorithm InAlgorithm);
	void SetFilterCutoffFrequency(float InFrequency);
	void SetFilterCutoffFrequencyMod(float InFrequency);
	void SetFilterQ(float InQ);
	void SetFilterQMod(float InQ);
	void SetFilterType(ESubmixFilterType InType);
	void SetSettings(const struct FSubmixEffectFilterSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectFilterPreset">();
	}
	static class USubmixEffectFilterPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectFilterPreset>();
	}
};
static_assert(alignof(USubmixEffectFilterPreset) == 0x000008, "Wrong alignment on USubmixEffectFilterPreset");
static_assert(sizeof(USubmixEffectFilterPreset) == 0x0000A8, "Wrong size on USubmixEffectFilterPreset");
static_assert(offsetof(USubmixEffectFilterPreset, Settings) == 0x00009C, "Member 'USubmixEffectFilterPreset::Settings' has a wrong offset!");

// Class Synthesis.SubmixEffectFlexiverbPreset
// 0x0048 (0x00B0 - 0x0068)
class USubmixEffectFlexiverbPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_3339[0x38];                                    // 0x0068(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectFlexiverbSettings         Settings;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSubmixEffectFlexiverbSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectFlexiverbPreset">();
	}
	static class USubmixEffectFlexiverbPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectFlexiverbPreset>();
	}
};
static_assert(alignof(USubmixEffectFlexiverbPreset) == 0x000008, "Wrong alignment on USubmixEffectFlexiverbPreset");
static_assert(sizeof(USubmixEffectFlexiverbPreset) == 0x0000B0, "Wrong size on USubmixEffectFlexiverbPreset");
static_assert(offsetof(USubmixEffectFlexiverbPreset, Settings) == 0x0000A0, "Member 'USubmixEffectFlexiverbPreset::Settings' has a wrong offset!");

// Class Synthesis.SubmixEffectMultibandCompressorPreset
// 0x0098 (0x0100 - 0x0068)
class USubmixEffectMultibandCompressorPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_333A[0x60];                                    // 0x0068(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectMultibandCompressorSettings Settings;                                          // 0x00C8(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ResetKey();
	void SetAudioBus(class UAudioBus* AudioBus);
	void SetExternalSubmix(class USoundSubmix* Submix);
	void SetSettings(const struct FSubmixEffectMultibandCompressorSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectMultibandCompressorPreset">();
	}
	static class USubmixEffectMultibandCompressorPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectMultibandCompressorPreset>();
	}
};
static_assert(alignof(USubmixEffectMultibandCompressorPreset) == 0x000008, "Wrong alignment on USubmixEffectMultibandCompressorPreset");
static_assert(sizeof(USubmixEffectMultibandCompressorPreset) == 0x000100, "Wrong size on USubmixEffectMultibandCompressorPreset");
static_assert(offsetof(USubmixEffectMultibandCompressorPreset, Settings) == 0x0000C8, "Member 'USubmixEffectMultibandCompressorPreset::Settings' has a wrong offset!");

// Class Synthesis.SubmixEffectStereoDelayPreset
// 0x0070 (0x00D8 - 0x0068)
class USubmixEffectStereoDelayPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_333B[0x4C];                                    // 0x0068(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectStereoDelaySettings       Settings;                                          // 0x00B4(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSubmixEffectStereoDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectStereoDelayPreset">();
	}
	static class USubmixEffectStereoDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectStereoDelayPreset>();
	}
};
static_assert(alignof(USubmixEffectStereoDelayPreset) == 0x000008, "Wrong alignment on USubmixEffectStereoDelayPreset");
static_assert(sizeof(USubmixEffectStereoDelayPreset) == 0x0000D8, "Wrong size on USubmixEffectStereoDelayPreset");
static_assert(offsetof(USubmixEffectStereoDelayPreset, Settings) == 0x0000B4, "Member 'USubmixEffectStereoDelayPreset::Settings' has a wrong offset!");

// Class Synthesis.SubmixEffectStereoToQuadPreset
// 0x0038 (0x00A0 - 0x0068)
class USubmixEffectStereoToQuadPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_333C[0x30];                                    // 0x0068(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectStereoToQuadSettings      Settings;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSubmixEffectStereoToQuadSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectStereoToQuadPreset">();
	}
	static class USubmixEffectStereoToQuadPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectStereoToQuadPreset>();
	}
};
static_assert(alignof(USubmixEffectStereoToQuadPreset) == 0x000008, "Wrong alignment on USubmixEffectStereoToQuadPreset");
static_assert(sizeof(USubmixEffectStereoToQuadPreset) == 0x0000A0, "Wrong size on USubmixEffectStereoToQuadPreset");
static_assert(offsetof(USubmixEffectStereoToQuadPreset, Settings) == 0x000098, "Member 'USubmixEffectStereoToQuadPreset::Settings' has a wrong offset!");

// Class Synthesis.SubmixEffectTapDelayPreset
// 0x0070 (0x00D8 - 0x0068)
class USubmixEffectTapDelayPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_333D[0x40];                                    // 0x0068(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectTapDelaySettings          Settings;                                          // 0x00A8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_333E[0x18];                                    // 0x00C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTap(int32* TapId);
	float GetMaxDelayInMilliseconds();
	void GetTap(int32 TapId, struct FTapDelayInfo* TapInfo);
	void GetTapIds(TArray<int32>* TapIds);
	void RemoveTap(int32 TapId);
	void SetInterpolationTime(float Time);
	void SetSettings(const struct FSubmixEffectTapDelaySettings& InSettings);
	void SetTap(int32 TapId, const struct FTapDelayInfo& TapInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectTapDelayPreset">();
	}
	static class USubmixEffectTapDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectTapDelayPreset>();
	}
};
static_assert(alignof(USubmixEffectTapDelayPreset) == 0x000008, "Wrong alignment on USubmixEffectTapDelayPreset");
static_assert(sizeof(USubmixEffectTapDelayPreset) == 0x0000D8, "Wrong size on USubmixEffectTapDelayPreset");
static_assert(offsetof(USubmixEffectTapDelayPreset, Settings) == 0x0000A8, "Member 'USubmixEffectTapDelayPreset::Settings' has a wrong offset!");

// Class Synthesis.GranularSynth
// 0x03E0 (0x0CE0 - 0x0900)
class UGranularSynth final : public USynthComponent
{
public:
	class USoundWave*                             GranulatedSoundWave;                               // 0x0900(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_333F[0x3D8];                                   // 0x0908(0x03D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NoteOff(const float Note, const bool bKill);
	void NoteOn(const float Note, const int32 Velocity, const float Duration);
	void SetAttackTime(const float AttackTimeMsec);
	void SetDecayTime(const float DecayTimeMsec);
	void SetGrainDuration(const float BaseDurationMsec, const struct FVector2D& DurationRange);
	void SetGrainEnvelopeType(const EGranularSynthEnvelopeType EnvelopeType);
	void SetGrainPan(const float BasePan, const struct FVector2D& PanRange);
	void SetGrainPitch(const float BasePitch, const struct FVector2D& PitchRange);
	void SetGrainProbability(const float InGrainProbability);
	void SetGrainsPerSecond(const float InGrainsPerSecond);
	void SetGrainVolume(const float BaseVolume, const struct FVector2D& VolumeRange);
	void SetPlaybackSpeed(const float InPlayheadRate);
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, EGranularSynthSeekType SeekType);
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);
	void SetScrubMode(const bool bScrubMode);
	void SetSoundWave(class USoundWave* InSoundWave);
	void SetSustainGain(const float SustainGain);

	float GetCurrentPlayheadTime() const;
	float GetSampleDuration() const;
	bool IsLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GranularSynth">();
	}
	static class UGranularSynth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGranularSynth>();
	}
};
static_assert(alignof(UGranularSynth) == 0x000010, "Wrong alignment on UGranularSynth");
static_assert(sizeof(UGranularSynth) == 0x000CE0, "Wrong size on UGranularSynth");
static_assert(offsetof(UGranularSynth, GranulatedSoundWave) == 0x000900, "Member 'UGranularSynth::GranulatedSoundWave' has a wrong offset!");

// Class Synthesis.MonoWaveTableSynthPreset
// 0x0148 (0x0170 - 0x0028)
class UMonoWaveTableSynthPreset final : public UObject
{
public:
	class FString                                 PresetName;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLockKeyframesToGridBool : 1;                      // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3346[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LockKeyframesToGrid;                               // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveTableResolution;                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3347[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRuntimeFloatCurve>             WaveTable;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NonTransactional, NativeAccessSpecifierPublic)
	uint8                                         bNormalizeWaveTables : 1;                          // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3348[0x117];                                   // 0x0059(0x0117)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MonoWaveTableSynthPreset">();
	}
	static class UMonoWaveTableSynthPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMonoWaveTableSynthPreset>();
	}
};
static_assert(alignof(UMonoWaveTableSynthPreset) == 0x000008, "Wrong alignment on UMonoWaveTableSynthPreset");
static_assert(sizeof(UMonoWaveTableSynthPreset) == 0x000170, "Wrong size on UMonoWaveTableSynthPreset");
static_assert(offsetof(UMonoWaveTableSynthPreset, PresetName) == 0x000028, "Member 'UMonoWaveTableSynthPreset::PresetName' has a wrong offset!");
static_assert(offsetof(UMonoWaveTableSynthPreset, LockKeyframesToGrid) == 0x00003C, "Member 'UMonoWaveTableSynthPreset::LockKeyframesToGrid' has a wrong offset!");
static_assert(offsetof(UMonoWaveTableSynthPreset, WaveTableResolution) == 0x000040, "Member 'UMonoWaveTableSynthPreset::WaveTableResolution' has a wrong offset!");
static_assert(offsetof(UMonoWaveTableSynthPreset, WaveTable) == 0x000048, "Member 'UMonoWaveTableSynthPreset::WaveTable' has a wrong offset!");

// Class Synthesis.SynthComponentMonoWaveTable
// 0x0750 (0x1050 - 0x0900)
class USynthComponentMonoWaveTable final : public USynthComponent
{
public:
	FMulticastInlineDelegateProperty_             OnTableAltered;                                    // 0x0900(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNumTablesChanged;                                // 0x0910(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMonoWaveTableSynthPreset*              CurrentPreset;                                     // 0x0920(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3349[0x728];                                   // 0x0928(0x0728)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurveTangent(int32 TableIndex);
	int32 GetNumTableEntries();
	void NoteOff(const float InMidiNote);
	void NoteOn(const float InMidiNote, const float InVelocity);
	void RefreshAllWaveTables();
	void RefreshWaveTable(int32 Param_Index);
	void SetAmpEnvelopeAttackTime(const float InAttackTimeMsec);
	void SetAmpEnvelopeBiasDepth(const float InDepth);
	void SetAmpEnvelopeBiasInvert(const bool bInBiasInvert);
	void SetAmpEnvelopeDecayTime(const float InDecayTimeMsec);
	void SetAmpEnvelopeDepth(const float InDepth);
	void SetAmpEnvelopeInvert(const bool bInInvert);
	void SetAmpEnvelopeReleaseTime(const float InReleaseTimeMsec);
	void SetAmpEnvelopeSustainGain(const float InSustainGain);
	bool SetCurveInterpolationType(ECurveInterpolationType InterpolationType, int32 TableIndex);
	bool SetCurveTangent(int32 TableIndex, float InNewTangent);
	bool SetCurveValue(int32 TableIndex, int32 KeyframeIndex, const float NewValue);
	void SetFilterEnvelopeAttackTime(const float InAttackTimeMsec);
	void SetFilterEnvelopeBiasDepth(const float InDepth);
	void SetFilterEnvelopeBiasInvert(const bool bInBiasInvert);
	void SetFilterEnvelopeDepth(const float InDepth);
	void SetFilterEnvelopeInvert(const bool bInInvert);
	void SetFilterEnvelopenDecayTime(const float InDecayTimeMsec);
	void SetFilterEnvelopeReleaseTime(const float InReleaseTimeMsec);
	void SetFilterEnvelopeSustainGain(const float InSustainGain);
	void SetFrequency(const float FrequencyHz);
	void SetFrequencyPitchBend(const float FrequencyOffsetCents);
	void SetFrequencyWithMidiNote(const float InMidiNote);
	void SetLowPassFilterResonance(float InNewQ);
	void SetPositionEnvelopeAttackTime(const float InAttackTimeMsec);
	void SetPositionEnvelopeBiasDepth(const float InDepth);
	void SetPositionEnvelopeBiasInvert(const bool bInBiasInvert);
	void SetPositionEnvelopeDecayTime(const float InDecayTimeMsec);
	void SetPositionEnvelopeDepth(const float InDepth);
	void SetPositionEnvelopeInvert(const bool bInInvert);
	void SetPositionEnvelopeReleaseTime(const float InReleaseTimeMsec);
	void SetPositionEnvelopeSustainGain(const float InSustainGain);
	void SetPosLfoDepth(const float InLfoDepth);
	void SetPosLfoFrequency(const float InLfoFrequency);
	void SetPosLfoType(const ESynthLFOType InLfoType);
	void SetSustainPedalState(bool InSustainPedalState);
	void SetWaveTablePosition(float InPosition);

	TArray<float> GetKeyFrameValuesForTable(float TableIndex) const;
	int32 GetMaxTableIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthComponentMonoWaveTable">();
	}
	static class USynthComponentMonoWaveTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthComponentMonoWaveTable>();
	}
};
static_assert(alignof(USynthComponentMonoWaveTable) == 0x000010, "Wrong alignment on USynthComponentMonoWaveTable");
static_assert(sizeof(USynthComponentMonoWaveTable) == 0x001050, "Wrong size on USynthComponentMonoWaveTable");
static_assert(offsetof(USynthComponentMonoWaveTable, OnTableAltered) == 0x000900, "Member 'USynthComponentMonoWaveTable::OnTableAltered' has a wrong offset!");
static_assert(offsetof(USynthComponentMonoWaveTable, OnNumTablesChanged) == 0x000910, "Member 'USynthComponentMonoWaveTable::OnNumTablesChanged' has a wrong offset!");
static_assert(offsetof(USynthComponentMonoWaveTable, CurrentPreset) == 0x000920, "Member 'USynthComponentMonoWaveTable::CurrentPreset' has a wrong offset!");

// Class Synthesis.SynthComponentToneGenerator
// 0x00F0 (0x09F0 - 0x0900)
class USynthComponentToneGenerator final : public USynthComponent
{
public:
	float                                         Frequency;                                         // 0x0900(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0904(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     DistanceAttenuationCurve;                          // 0x0908(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              DistanceRange;                                     // 0x0990(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationDbAtMaxRange;                           // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_334F[0x4C];                                    // 0x09A4(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFrequency(float InFrequency);
	void SetVolume(float InVolume);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthComponentToneGenerator">();
	}
	static class USynthComponentToneGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthComponentToneGenerator>();
	}
};
static_assert(alignof(USynthComponentToneGenerator) == 0x000010, "Wrong alignment on USynthComponentToneGenerator");
static_assert(sizeof(USynthComponentToneGenerator) == 0x0009F0, "Wrong size on USynthComponentToneGenerator");
static_assert(offsetof(USynthComponentToneGenerator, Frequency) == 0x000900, "Member 'USynthComponentToneGenerator::Frequency' has a wrong offset!");
static_assert(offsetof(USynthComponentToneGenerator, Volume) == 0x000904, "Member 'USynthComponentToneGenerator::Volume' has a wrong offset!");
static_assert(offsetof(USynthComponentToneGenerator, DistanceAttenuationCurve) == 0x000908, "Member 'USynthComponentToneGenerator::DistanceAttenuationCurve' has a wrong offset!");
static_assert(offsetof(USynthComponentToneGenerator, DistanceRange) == 0x000990, "Member 'USynthComponentToneGenerator::DistanceRange' has a wrong offset!");
static_assert(offsetof(USynthComponentToneGenerator, AttenuationDbAtMaxRange) == 0x0009A0, "Member 'USynthComponentToneGenerator::AttenuationDbAtMaxRange' has a wrong offset!");

// Class Synthesis.SynthSamplePlayer
// 0x0130 (0x0A30 - 0x0900)
class USynthSamplePlayer final : public USynthComponent
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSampleLoaded;                                    // 0x0908(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSamplePlaybackProgress;                          // 0x0918(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3350[0x108];                                   // 0x0928(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SeekToTime(float TimeSec, ESamplePlayerSeekType SeekType, bool bWrap);
	void SetPitch(float InPitch, float TimeSec);
	void SetScrubMode(bool bScrubMode);
	void SetScrubTimeWidth(float InScrubTimeWidthSec);
	void SetSoundWave(class USoundWave* InSoundWave);

	float GetCurrentPlaybackProgressPercent() const;
	float GetCurrentPlaybackProgressTime() const;
	float GetSampleDuration() const;
	bool IsLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthSamplePlayer">();
	}
	static class USynthSamplePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthSamplePlayer>();
	}
};
static_assert(alignof(USynthSamplePlayer) == 0x000010, "Wrong alignment on USynthSamplePlayer");
static_assert(sizeof(USynthSamplePlayer) == 0x000A30, "Wrong size on USynthSamplePlayer");
static_assert(offsetof(USynthSamplePlayer, SoundWave) == 0x000900, "Member 'USynthSamplePlayer::SoundWave' has a wrong offset!");
static_assert(offsetof(USynthSamplePlayer, OnSampleLoaded) == 0x000908, "Member 'USynthSamplePlayer::OnSampleLoaded' has a wrong offset!");
static_assert(offsetof(USynthSamplePlayer, OnSamplePlaybackProgress) == 0x000918, "Member 'USynthSamplePlayer::OnSamplePlaybackProgress' has a wrong offset!");

// Class Synthesis.SynthesisUtilitiesBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USynthesisUtilitiesBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetLinearFrequency(float InLogFrequencyValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);
	static float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthesisUtilitiesBlueprintFunctionLibrary">();
	}
	static class USynthesisUtilitiesBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthesisUtilitiesBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(USynthesisUtilitiesBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on USynthesisUtilitiesBlueprintFunctionLibrary");
static_assert(sizeof(USynthesisUtilitiesBlueprintFunctionLibrary) == 0x000028, "Wrong size on USynthesisUtilitiesBlueprintFunctionLibrary");

// Class Synthesis.Synth2DSlider
// 0x04F0 (0x0670 - 0x0180)
class USynth2DSlider final : public UWidget
{
public:
	float                                         ValueX;                                            // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueY;                                            // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueXDelegate;                                    // 0x0188(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueYDelegate;                                    // 0x0198(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3352[0x8];                                     // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSynth2DSliderStyle                    WidgetStyle;                                       // 0x01B0(0x0430)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleColor;                                 // 0x05E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentHandle;                                      // 0x05F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x05F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3353[0x2];                                     // 0x05F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepSize;                                          // 0x05F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x05F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3354[0x7];                                     // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMouseCaptureBegin;                               // 0x0600(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseCaptureEnd;                                 // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnControllerCaptureBegin;                          // 0x0620(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnControllerCaptureEnd;                            // 0x0630(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnValueChangedX;                                   // 0x0640(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnValueChangedY;                                   // 0x0650(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3355[0x10];                                    // 0x0660(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIndentHandle(bool InValue);
	void SetLocked(bool InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetStepSize(float InValue);
	void SetValue(const struct FVector2D& InValue);

	struct FVector2D GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Synth2DSlider">();
	}
	static class USynth2DSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynth2DSlider>();
	}
};
static_assert(alignof(USynth2DSlider) == 0x000010, "Wrong alignment on USynth2DSlider");
static_assert(sizeof(USynth2DSlider) == 0x000670, "Wrong size on USynth2DSlider");
static_assert(offsetof(USynth2DSlider, ValueX) == 0x000180, "Member 'USynth2DSlider::ValueX' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, ValueY) == 0x000184, "Member 'USynth2DSlider::ValueY' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, ValueXDelegate) == 0x000188, "Member 'USynth2DSlider::ValueXDelegate' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, ValueYDelegate) == 0x000198, "Member 'USynth2DSlider::ValueYDelegate' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, WidgetStyle) == 0x0001B0, "Member 'USynth2DSlider::WidgetStyle' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, SliderHandleColor) == 0x0005E0, "Member 'USynth2DSlider::SliderHandleColor' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, IndentHandle) == 0x0005F0, "Member 'USynth2DSlider::IndentHandle' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, Locked) == 0x0005F1, "Member 'USynth2DSlider::Locked' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, StepSize) == 0x0005F4, "Member 'USynth2DSlider::StepSize' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, IsFocusable) == 0x0005F8, "Member 'USynth2DSlider::IsFocusable' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, OnMouseCaptureBegin) == 0x000600, "Member 'USynth2DSlider::OnMouseCaptureBegin' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, OnMouseCaptureEnd) == 0x000610, "Member 'USynth2DSlider::OnMouseCaptureEnd' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, OnControllerCaptureBegin) == 0x000620, "Member 'USynth2DSlider::OnControllerCaptureBegin' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, OnControllerCaptureEnd) == 0x000630, "Member 'USynth2DSlider::OnControllerCaptureEnd' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, OnValueChangedX) == 0x000640, "Member 'USynth2DSlider::OnValueChangedX' has a wrong offset!");
static_assert(offsetof(USynth2DSlider, OnValueChangedY) == 0x000650, "Member 'USynth2DSlider::OnValueChangedY' has a wrong offset!");

// Class Synthesis.SynthKnob
// 0x0430 (0x05B0 - 0x0180)
class USynthKnob final : public UWidget
{
public:
	float                                         Value;                                             // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseSpeed;                                        // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseFineTuneSpeed;                                // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShowTooltipInfo : 1;                               // 0x0190(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3356[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ParameterName;                                     // 0x0198(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ParameterUnits;                                    // 0x01B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3357[0x8];                                     // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSynthKnobStyle                        WidgetStyle;                                       // 0x01E0(0x0360)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0540(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0541(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3358[0x6];                                     // 0x0542(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMouseCaptureBegin;                               // 0x0548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMouseCaptureEnd;                                 // 0x0558(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnControllerCaptureBegin;                          // 0x0568(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnControllerCaptureEnd;                            // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnValueChanged;                                    // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3359[0x18];                                    // 0x0598(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLocked(bool InValue);
	void SetStepSize(float InValue);
	void SetValue(float InValue);

	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthKnob">();
	}
	static class USynthKnob* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthKnob>();
	}
};
static_assert(alignof(USynthKnob) == 0x000010, "Wrong alignment on USynthKnob");
static_assert(sizeof(USynthKnob) == 0x0005B0, "Wrong size on USynthKnob");
static_assert(offsetof(USynthKnob, Value) == 0x000180, "Member 'USynthKnob::Value' has a wrong offset!");
static_assert(offsetof(USynthKnob, StepSize) == 0x000184, "Member 'USynthKnob::StepSize' has a wrong offset!");
static_assert(offsetof(USynthKnob, MouseSpeed) == 0x000188, "Member 'USynthKnob::MouseSpeed' has a wrong offset!");
static_assert(offsetof(USynthKnob, MouseFineTuneSpeed) == 0x00018C, "Member 'USynthKnob::MouseFineTuneSpeed' has a wrong offset!");
static_assert(offsetof(USynthKnob, ParameterName) == 0x000198, "Member 'USynthKnob::ParameterName' has a wrong offset!");
static_assert(offsetof(USynthKnob, ParameterUnits) == 0x0001B0, "Member 'USynthKnob::ParameterUnits' has a wrong offset!");
static_assert(offsetof(USynthKnob, ValueDelegate) == 0x0001C8, "Member 'USynthKnob::ValueDelegate' has a wrong offset!");
static_assert(offsetof(USynthKnob, WidgetStyle) == 0x0001E0, "Member 'USynthKnob::WidgetStyle' has a wrong offset!");
static_assert(offsetof(USynthKnob, Locked) == 0x000540, "Member 'USynthKnob::Locked' has a wrong offset!");
static_assert(offsetof(USynthKnob, IsFocusable) == 0x000541, "Member 'USynthKnob::IsFocusable' has a wrong offset!");
static_assert(offsetof(USynthKnob, OnMouseCaptureBegin) == 0x000548, "Member 'USynthKnob::OnMouseCaptureBegin' has a wrong offset!");
static_assert(offsetof(USynthKnob, OnMouseCaptureEnd) == 0x000558, "Member 'USynthKnob::OnMouseCaptureEnd' has a wrong offset!");
static_assert(offsetof(USynthKnob, OnControllerCaptureBegin) == 0x000568, "Member 'USynthKnob::OnControllerCaptureBegin' has a wrong offset!");
static_assert(offsetof(USynthKnob, OnControllerCaptureEnd) == 0x000578, "Member 'USynthKnob::OnControllerCaptureEnd' has a wrong offset!");
static_assert(offsetof(USynthKnob, OnValueChanged) == 0x000588, "Member 'USynthKnob::OnValueChanged' has a wrong offset!");

}

