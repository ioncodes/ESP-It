#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimGraphRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationCore_structs.hpp"


namespace SDK
{

// Enum AnimGraphRuntime.EBoneModificationMode
// NumValues: 0x0004
enum class EBoneModificationMode : uint8
{
	BMM_Ignore                               = 0,
	BMM_Replace                              = 1,
	BMM_Additive                             = 2,
	BMM_MAX                                  = 3,
};

// Enum AnimGraphRuntime.ERefPoseType
// NumValues: 0x0003
enum class ERefPoseType : uint8
{
	EIT_LocalSpace                           = 0,
	EIT_Additive                             = 1,
	EIT_MAX                                  = 2,
};

// Enum AnimGraphRuntime.EEasingFuncType
// NumValues: 0x0010
enum class EEasingFuncType : uint8
{
	Linear                                   = 0,
	Sinusoidal                               = 1,
	Cubic                                    = 2,
	QuadraticInOut                           = 3,
	CubicInOut                               = 4,
	HermiteCubic                             = 5,
	QuarticInOut                             = 6,
	QuinticInOut                             = 7,
	CircularIn                               = 8,
	CircularOut                              = 9,
	CircularInOut                            = 10,
	ExpIn                                    = 11,
	ExpOut                                   = 12,
	ExpInOut                                 = 13,
	CustomCurve                              = 14,
	EEasingFuncType_MAX                      = 15,
};

// Enum AnimGraphRuntime.ERotationComponent
// NumValues: 0x0007
enum class ERotationComponent : uint8
{
	EulerX                                   = 0,
	EulerY                                   = 1,
	EulerZ                                   = 2,
	QuaternionAngle                          = 3,
	SwingAngle                               = 4,
	TwistAngle                               = 5,
	ERotationComponent_MAX                   = 6,
};

// Enum AnimGraphRuntime.EBlendListTransitionType
// NumValues: 0x0003
enum class EBlendListTransitionType : uint8
{
	StandardBlend                            = 0,
	Inertialization                          = 1,
	EBlendListTransitionType_MAX             = 2,
};

// Enum AnimGraphRuntime.EAnimFunctionCallSite
// NumValues: 0x000D
enum class EAnimFunctionCallSite : uint32
{
	OnInitialize                             = 0,
	OnUpdate                                 = 1,
	OnBecomeRelevant                         = 2,
	OnEvaluate                               = 3,
	OnInitializePostRecursion                = 4,
	OnUpdatePostRecursion                    = 5,
	OnBecomeRelevantPostRecursion            = 6,
	OnEvaluatePostRecursion                  = 7,
	OnStartedBlendingOut                     = 8,
	OnStartedBlendingIn                      = 9,
	OnFinishedBlendingOut                    = 10,
	OnFinishedBlendingIn                     = 11,
	EAnimFunctionCallSite_MAX                = 12,
};

// Enum AnimGraphRuntime.ELayeredBoneBlendMode
// NumValues: 0x0003
enum class ELayeredBoneBlendMode : uint8
{
	BranchFilter                             = 0,
	BlendMask                                = 1,
	ELayeredBoneBlendMode_MAX                = 2,
};

// Enum AnimGraphRuntime.EModifyCurveApplyMode
// NumValues: 0x0006
enum class EModifyCurveApplyMode : uint8
{
	Add                                      = 0,
	Scale                                    = 1,
	Blend                                    = 2,
	WeightedMovingAverage                    = 3,
	RemapCurve                               = 4,
	EModifyCurveApplyMode_MAX                = 5,
};

// Enum AnimGraphRuntime.EPoseDriverType
// NumValues: 0x0004
enum class EPoseDriverType : uint8
{
	SwingAndTwist                            = 0,
	SwingOnly                                = 1,
	Translation                              = 2,
	EPoseDriverType_MAX                      = 3,
};

// Enum AnimGraphRuntime.EPoseDriverSource
// NumValues: 0x0003
enum class EPoseDriverSource : uint8
{
	Rotation                                 = 0,
	Translation                              = 1,
	EPoseDriverSource_MAX                    = 2,
};

// Enum AnimGraphRuntime.EPoseDriverOutput
// NumValues: 0x0003
enum class EPoseDriverOutput : uint8
{
	DrivePoses                               = 0,
	DriveCurves                              = 1,
	EPoseDriverOutput_MAX                    = 2,
};

// Enum AnimGraphRuntime.ESnapshotSourceMode
// NumValues: 0x0003
enum class ESnapshotSourceMode : uint8
{
	NamedSnapshot                            = 0,
	SnapshotPin                              = 1,
	ESnapshotSourceMode_MAX                  = 2,
};

// Enum AnimGraphRuntime.ESequenceEvalReinit
// NumValues: 0x0004
enum class ESequenceEvalReinit : uint8
{
	NoReset                                  = 0,
	StartPosition                            = 1,
	ExplicitTime                             = 2,
	ESequenceEvalReinit_MAX                  = 3,
};

// Enum AnimGraphRuntime.ESwapRootBone
// NumValues: 0x0004
enum class ESwapRootBone : uint8
{
	SwapRootBone_Component                   = 0,
	SwapRootBone_Actor                       = 1,
	SwapRootBone_None                        = 2,
	SwapRootBone_MAX                         = 3,
};

// Enum AnimGraphRuntime.AnimPhysAngularConstraintType
// NumValues: 0x0003
enum class EAnimPhysAngularConstraintType : uint8
{
	Angular                                  = 0,
	Cone                                     = 1,
	AnimPhysAngularConstraintType_MAX        = 2,
};

// Enum AnimGraphRuntime.AnimPhysLinearConstraintType
// NumValues: 0x0003
enum class EAnimPhysLinearConstraintType : uint8
{
	Free                                     = 0,
	Limited                                  = 1,
	AnimPhysLinearConstraintType_MAX         = 2,
};

// Enum AnimGraphRuntime.AnimPhysSimSpaceType
// NumValues: 0x0006
enum class EAnimPhysSimSpaceType : uint8
{
	Component                                = 0,
	Actor                                    = 1,
	World                                    = 2,
	RootRelative                             = 3,
	BoneRelative                             = 4,
	AnimPhysSimSpaceType_MAX                 = 5,
};

// Enum AnimGraphRuntime.ESphericalLimitType
// NumValues: 0x0003
enum class ESphericalLimitType : uint8
{
	Inner                                    = 0,
	Outer                                    = 1,
	ESphericalLimitType_MAX                  = 2,
};

// Enum AnimGraphRuntime.EDrivenBoneModificationMode
// NumValues: 0x0004
enum class EDrivenBoneModificationMode : uint8
{
	AddToInput                               = 0,
	ReplaceComponent                         = 1,
	AddToRefPose                             = 2,
	EDrivenBoneModificationMode_MAX          = 3,
};

// Enum AnimGraphRuntime.EDrivenDestinationMode
// NumValues: 0x0004
enum class EDrivenDestinationMode : uint8
{
	Bone                                     = 0,
	MorphTarget                              = 1,
	MaterialParameter                        = 2,
	EDrivenDestinationMode_MAX               = 3,
};

// Enum AnimGraphRuntime.EConstraintOffsetOption
// NumValues: 0x0003
enum class EConstraintOffsetOption : uint8
{
	None                                     = 0,
	Offset_RefPose                           = 1,
	EConstraintOffsetOption_MAX              = 2,
};

// Enum AnimGraphRuntime.CopyBoneDeltaMode
// NumValues: 0x0003
enum class ECopyBoneDeltaMode : uint8
{
	Accumulate                               = 0,
	Copy                                     = 1,
	CopyBoneDeltaMode_MAX                    = 2,
};

// Enum AnimGraphRuntime.EInterpolationBlend
// NumValues: 0x0008
enum class EInterpolationBlend : uint8
{
	Linear                                   = 0,
	Cubic                                    = 1,
	Sinusoidal                               = 2,
	EaseInOutExponent2                       = 3,
	EaseInOutExponent3                       = 4,
	EaseInOutExponent4                       = 5,
	EaseInOutExponent5                       = 6,
	MAX                                      = 7,
};

// Enum AnimGraphRuntime.ESimulationSpace
// NumValues: 0x0004
enum class ESimulationSpace : uint8
{
	ComponentSpace                           = 0,
	WorldSpace                               = 1,
	BaseBoneSpace                            = 2,
	ESimulationSpace_MAX                     = 3,
};

// Enum AnimGraphRuntime.ESimulationTiming
// NumValues: 0x0004
enum class ESimulationTiming : uint8
{
	Default                                  = 0,
	Synchronous                              = 1,
	Deferred                                 = 2,
	ESimulationTiming_MAX                    = 3,
};

// Enum AnimGraphRuntime.EScaleChainInitialLength
// NumValues: 0x0004
enum class EScaleChainInitialLength : uint8
{
	FixedDefaultLengthValue                  = 0,
	Distance                                 = 1,
	ChainLength                              = 2,
	EScaleChainInitialLength_MAX             = 3,
};

// Enum AnimGraphRuntime.ESplineBoneAxis
// NumValues: 0x0005
enum class ESplineBoneAxis : uint8
{
	None                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	ESplineBoneAxis_MAX                      = 4,
};

// Enum AnimGraphRuntime.EWarpingEvaluationMode
// NumValues: 0x0003
enum class EWarpingEvaluationMode : uint8
{
	Manual                                   = 0,
	Graph                                    = 1,
	EWarpingEvaluationMode_MAX               = 2,
};

// Enum AnimGraphRuntime.EWarpingVectorMode
// NumValues: 0x0005
enum class EWarpingVectorMode : uint8
{
	ComponentSpaceVector                     = 0,
	ActorSpaceVector                         = 1,
	WorldSpaceVector                         = 2,
	IKFootRootLocalSpaceVector               = 3,
	EWarpingVectorMode_MAX                   = 4,
};

// Enum AnimGraphRuntime.ERBFSolverType
// NumValues: 0x0003
enum class ERBFSolverType : uint8
{
	Additive                                 = 0,
	Interpolative                            = 1,
	ERBFSolverType_MAX                       = 2,
};

// Enum AnimGraphRuntime.ERBFFunctionType
// NumValues: 0x0007
enum class ERBFFunctionType : uint8
{
	Gaussian                                 = 0,
	Exponential                              = 1,
	Linear                                   = 2,
	Cubic                                    = 3,
	Quintic                                  = 4,
	DefaultFunction                          = 5,
	ERBFFunctionType_MAX                     = 6,
};

// Enum AnimGraphRuntime.ERBFDistanceMethod
// NumValues: 0x0006
enum class ERBFDistanceMethod : uint8
{
	Euclidean                                = 0,
	Quaternion                               = 1,
	SwingAngle                               = 2,
	TwistAngle                               = 3,
	DefaultMethod                            = 4,
	ERBFDistanceMethod_MAX                   = 5,
};

// Enum AnimGraphRuntime.ERBFNormalizeMethod
// NumValues: 0x0005
enum class ERBFNormalizeMethod : uint8
{
	OnlyNormalizeAboveOne                    = 0,
	AlwaysNormalize                          = 1,
	NormalizeWithinMedian                    = 2,
	NoNormalization                          = 3,
	ERBFNormalizeMethod_MAX                  = 4,
};

// ScriptStruct AnimGraphRuntime.AnimNode_SkeletalControlBase
// 0x00B8 (0x00C8 - 0x0010)
struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
{
public:
	struct FComponentSpacePoseLink                ComponentPose;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualAlpha;                                       // 0x0024(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaBoolEnabled;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0038(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x0088(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SkeletalControlBase) == 0x000008, "Wrong alignment on FAnimNode_SkeletalControlBase");
static_assert(sizeof(FAnimNode_SkeletalControlBase) == 0x0000C8, "Wrong size on FAnimNode_SkeletalControlBase");
static_assert(offsetof(FAnimNode_SkeletalControlBase, ComponentPose) == 0x000010, "Member 'FAnimNode_SkeletalControlBase::ComponentPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, LODThreshold) == 0x000020, "Member 'FAnimNode_SkeletalControlBase::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, ActualAlpha) == 0x000024, "Member 'FAnimNode_SkeletalControlBase::ActualAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, AlphaInputType) == 0x000028, "Member 'FAnimNode_SkeletalControlBase::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, bAlphaBoolEnabled) == 0x000029, "Member 'FAnimNode_SkeletalControlBase::bAlphaBoolEnabled' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, Alpha) == 0x00002C, "Member 'FAnimNode_SkeletalControlBase::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, AlphaScaleBias) == 0x000030, "Member 'FAnimNode_SkeletalControlBase::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, AlphaBoolBlend) == 0x000038, "Member 'FAnimNode_SkeletalControlBase::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, AlphaCurveName) == 0x000080, "Member 'FAnimNode_SkeletalControlBase::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp) == 0x000088, "Member 'FAnimNode_SkeletalControlBase::AlphaScaleBiasClamp' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysSphericalLimit
// 0x0030 (0x0030 - 0x0000)
struct FAnimPhysSphericalLimit final
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SphereLocalOffset;                                 // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitRadius;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESphericalLimitType                           LimitType;                                         // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimPhysSphericalLimit) == 0x000008, "Wrong alignment on FAnimPhysSphericalLimit");
static_assert(sizeof(FAnimPhysSphericalLimit) == 0x000030, "Wrong size on FAnimPhysSphericalLimit");
static_assert(offsetof(FAnimPhysSphericalLimit, DrivingBone) == 0x000000, "Member 'FAnimPhysSphericalLimit::DrivingBone' has a wrong offset!");
static_assert(offsetof(FAnimPhysSphericalLimit, SphereLocalOffset) == 0x000010, "Member 'FAnimPhysSphericalLimit::SphereLocalOffset' has a wrong offset!");
static_assert(offsetof(FAnimPhysSphericalLimit, LimitRadius) == 0x000028, "Member 'FAnimPhysSphericalLimit::LimitRadius' has a wrong offset!");
static_assert(offsetof(FAnimPhysSphericalLimit, LimitType) == 0x00002C, "Member 'FAnimPhysSphericalLimit::LimitType' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysConstraintSetup
// 0x0088 (0x0088 - 0x0000)
struct FAnimPhysConstraintSetup final
{
public:
	EAnimPhysLinearConstraintType                 LinearXLimitType;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysLinearConstraintType                 LinearYLimitType;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysLinearConstraintType                 LinearZLimitType;                                  // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearAxesMin;                                     // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearAxesMax;                                     // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysAngularConstraintType                AngularConstraintType;                             // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysTwistAxis                            TwistAxis;                                         // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimPhysTwistAxis                            AngularTargetAxis;                                 // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConeAngle;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularLimitsMin;                                  // 0x0040(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularLimitsMax;                                  // 0x0058(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularTarget;                                     // 0x0070(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimPhysConstraintSetup) == 0x000008, "Wrong alignment on FAnimPhysConstraintSetup");
static_assert(sizeof(FAnimPhysConstraintSetup) == 0x000088, "Wrong size on FAnimPhysConstraintSetup");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearXLimitType) == 0x000000, "Member 'FAnimPhysConstraintSetup::LinearXLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearYLimitType) == 0x000001, "Member 'FAnimPhysConstraintSetup::LinearYLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearZLimitType) == 0x000002, "Member 'FAnimPhysConstraintSetup::LinearZLimitType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearAxesMin) == 0x000008, "Member 'FAnimPhysConstraintSetup::LinearAxesMin' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, LinearAxesMax) == 0x000020, "Member 'FAnimPhysConstraintSetup::LinearAxesMax' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularConstraintType) == 0x000038, "Member 'FAnimPhysConstraintSetup::AngularConstraintType' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, TwistAxis) == 0x000039, "Member 'FAnimPhysConstraintSetup::TwistAxis' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularTargetAxis) == 0x00003A, "Member 'FAnimPhysConstraintSetup::AngularTargetAxis' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, ConeAngle) == 0x00003C, "Member 'FAnimPhysConstraintSetup::ConeAngle' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularLimitsMin) == 0x000040, "Member 'FAnimPhysConstraintSetup::AngularLimitsMin' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularLimitsMax) == 0x000058, "Member 'FAnimPhysConstraintSetup::AngularLimitsMax' has a wrong offset!");
static_assert(offsetof(FAnimPhysConstraintSetup, AngularTarget) == 0x000070, "Member 'FAnimPhysConstraintSetup::AngularTarget' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysBodyDefinition
// 0x00D0 (0x00D0 - 0x0000)
struct FAnimPhysBodyDefinition final
{
public:
	struct FBoneReference                         BoundBone;                                         // 0x0000(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtents;                                        // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocalJointOffset;                                  // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimPhysConstraintSetup               ConstraintSetup;                                   // 0x0040(0x0088)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EAnimPhysCollisionType                        CollisionType;                                     // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereCollisionRadius;                             // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimPhysBodyDefinition) == 0x000008, "Wrong alignment on FAnimPhysBodyDefinition");
static_assert(sizeof(FAnimPhysBodyDefinition) == 0x0000D0, "Wrong size on FAnimPhysBodyDefinition");
static_assert(offsetof(FAnimPhysBodyDefinition, BoundBone) == 0x000000, "Member 'FAnimPhysBodyDefinition::BoundBone' has a wrong offset!");
static_assert(offsetof(FAnimPhysBodyDefinition, BoxExtents) == 0x000010, "Member 'FAnimPhysBodyDefinition::BoxExtents' has a wrong offset!");
static_assert(offsetof(FAnimPhysBodyDefinition, LocalJointOffset) == 0x000028, "Member 'FAnimPhysBodyDefinition::LocalJointOffset' has a wrong offset!");
static_assert(offsetof(FAnimPhysBodyDefinition, ConstraintSetup) == 0x000040, "Member 'FAnimPhysBodyDefinition::ConstraintSetup' has a wrong offset!");
static_assert(offsetof(FAnimPhysBodyDefinition, CollisionType) == 0x0000C8, "Member 'FAnimPhysBodyDefinition::CollisionType' has a wrong offset!");
static_assert(offsetof(FAnimPhysBodyDefinition, SphereCollisionRadius) == 0x0000CC, "Member 'FAnimPhysBodyDefinition::SphereCollisionRadius' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimPhysPlanarLimit
// 0x0070 (0x0070 - 0x0000)
struct FAnimPhysPlanarLimit final
{
public:
	struct FBoneReference                         DrivingBone;                                       // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             PlaneTransform;                                    // 0x0010(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimPhysPlanarLimit) == 0x000010, "Wrong alignment on FAnimPhysPlanarLimit");
static_assert(sizeof(FAnimPhysPlanarLimit) == 0x000070, "Wrong size on FAnimPhysPlanarLimit");
static_assert(offsetof(FAnimPhysPlanarLimit, DrivingBone) == 0x000000, "Member 'FAnimPhysPlanarLimit::DrivingBone' has a wrong offset!");
static_assert(offsetof(FAnimPhysPlanarLimit, PlaneTransform) == 0x000010, "Member 'FAnimPhysPlanarLimit::PlaneTransform' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RotationRetargetingInfo
// 0x01A0 (0x01A0 - 0x0000)
struct FRotationRetargetingInfo final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Source;                                            // 0x0010(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Target;                                            // 0x0070(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERotationComponent                            RotationComponent;                                 // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TwistAxis;                                         // 0x00D8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAbsoluteAngle;                                 // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceMinimum;                                     // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceMaximum;                                     // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMinimum;                                     // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMaximum;                                     // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFuncType                               EasingType;                                        // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     CustomCurve;                                       // 0x0108(0x0088)(Edit, NativeAccessSpecifierPublic)
	bool                                          bFlipEasing;                                       // 0x0190(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x3];                                      // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EasingWeight;                                      // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamp;                                            // 0x0198(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRotationRetargetingInfo) == 0x000010, "Wrong alignment on FRotationRetargetingInfo");
static_assert(sizeof(FRotationRetargetingInfo) == 0x0001A0, "Wrong size on FRotationRetargetingInfo");
static_assert(offsetof(FRotationRetargetingInfo, bEnabled) == 0x000000, "Member 'FRotationRetargetingInfo::bEnabled' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, Source) == 0x000010, "Member 'FRotationRetargetingInfo::Source' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, Target) == 0x000070, "Member 'FRotationRetargetingInfo::Target' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, RotationComponent) == 0x0000D0, "Member 'FRotationRetargetingInfo::RotationComponent' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, TwistAxis) == 0x0000D8, "Member 'FRotationRetargetingInfo::TwistAxis' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, bUseAbsoluteAngle) == 0x0000F0, "Member 'FRotationRetargetingInfo::bUseAbsoluteAngle' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, SourceMinimum) == 0x0000F4, "Member 'FRotationRetargetingInfo::SourceMinimum' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, SourceMaximum) == 0x0000F8, "Member 'FRotationRetargetingInfo::SourceMaximum' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, TargetMinimum) == 0x0000FC, "Member 'FRotationRetargetingInfo::TargetMinimum' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, TargetMaximum) == 0x000100, "Member 'FRotationRetargetingInfo::TargetMaximum' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, EasingType) == 0x000104, "Member 'FRotationRetargetingInfo::EasingType' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, CustomCurve) == 0x000108, "Member 'FRotationRetargetingInfo::CustomCurve' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, bFlipEasing) == 0x000190, "Member 'FRotationRetargetingInfo::bFlipEasing' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, EasingWeight) == 0x000194, "Member 'FRotationRetargetingInfo::EasingWeight' has a wrong offset!");
static_assert(offsetof(FRotationRetargetingInfo, bClamp) == 0x000198, "Member 'FRotationRetargetingInfo::bClamp' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_AnimDynamics
// 0x0458 (0x0520 - 0x00C8)
struct FAnimNode_AnimDynamics final : public FAnimNode_SkeletalControlBase
{
public:
	float                                         LinearDampingOverride;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDampingOverride;                            // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0xC0];                                      // 0x00D0(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         RelativeSpaceBone;                                 // 0x0190(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         BoundBone;                                         // 0x01A0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainEnd;                                          // 0x01B0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimPhysBodyDefinition>        PhysicsBodyDefinitions;                            // 0x01C0(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         GravityScale;                                      // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityOverride;                                   // 0x01D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearSpringConstant;                              // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularSpringConstant;                             // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindScale;                                         // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ComponentLinearAccScale;                           // 0x0200(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x0218(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentAppliedLinearAccClamp;                    // 0x0230(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularBiasOverride;                               // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSolverIterationsPreUpdate;                      // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSolverIterationsPostUpdate;                     // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimPhysSphericalLimit>        SphericalLimits;                                   // 0x0258(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0268(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimPhysPlanarLimit>           PlanarLimits;                                      // 0x0280(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EAnimPhysSimSpaceType                         SimulationSpace;                                   // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x2];                                      // 0x0291(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUseSphericalLimits : 1;                           // 0x0293(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePlanarLimit : 1;                               // 0x0293(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoUpdate : 1;                                     // 0x0293(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoEval : 1;                                       // 0x0293(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideLinearDamping : 1;                        // 0x0293(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAngularBias : 1;                          // 0x0293(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideAngularDamping : 1;                       // 0x0293(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableWind : 1;                                   // 0x0293(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_294_0 : 1;                                  // 0x0294(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bUseGravityOverride : 1;                           // 0x0294(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGravityOverrideInSimSpace : 1;                    // 0x0294(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLinearSpring : 1;                                 // 0x0294(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAngularSpring : 1;                                // 0x0294(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bChain : 1;                                        // 0x0294(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_295[0xB];                                      // 0x0295(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotationRetargetingInfo               RetargetingSettings;                               // 0x02A0(0x01A0)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_440[0xE0];                                     // 0x0440(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AnimDynamics) == 0x000010, "Wrong alignment on FAnimNode_AnimDynamics");
static_assert(sizeof(FAnimNode_AnimDynamics) == 0x000520, "Wrong size on FAnimNode_AnimDynamics");
static_assert(offsetof(FAnimNode_AnimDynamics, LinearDampingOverride) == 0x0000C8, "Member 'FAnimNode_AnimDynamics::LinearDampingOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, AngularDampingOverride) == 0x0000CC, "Member 'FAnimNode_AnimDynamics::AngularDampingOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, RelativeSpaceBone) == 0x000190, "Member 'FAnimNode_AnimDynamics::RelativeSpaceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, BoundBone) == 0x0001A0, "Member 'FAnimNode_AnimDynamics::BoundBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ChainEnd) == 0x0001B0, "Member 'FAnimNode_AnimDynamics::ChainEnd' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, PhysicsBodyDefinitions) == 0x0001C0, "Member 'FAnimNode_AnimDynamics::PhysicsBodyDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, GravityScale) == 0x0001D0, "Member 'FAnimNode_AnimDynamics::GravityScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, GravityOverride) == 0x0001D8, "Member 'FAnimNode_AnimDynamics::GravityOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, LinearSpringConstant) == 0x0001F0, "Member 'FAnimNode_AnimDynamics::LinearSpringConstant' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, AngularSpringConstant) == 0x0001F4, "Member 'FAnimNode_AnimDynamics::AngularSpringConstant' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, WindScale) == 0x0001F8, "Member 'FAnimNode_AnimDynamics::WindScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ComponentLinearAccScale) == 0x000200, "Member 'FAnimNode_AnimDynamics::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ComponentLinearVelScale) == 0x000218, "Member 'FAnimNode_AnimDynamics::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp) == 0x000230, "Member 'FAnimNode_AnimDynamics::ComponentAppliedLinearAccClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, AngularBiasOverride) == 0x000248, "Member 'FAnimNode_AnimDynamics::AngularBiasOverride' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate) == 0x00024C, "Member 'FAnimNode_AnimDynamics::NumSolverIterationsPreUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate) == 0x000250, "Member 'FAnimNode_AnimDynamics::NumSolverIterationsPostUpdate' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, SphericalLimits) == 0x000258, "Member 'FAnimNode_AnimDynamics::SphericalLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, ExternalForce) == 0x000268, "Member 'FAnimNode_AnimDynamics::ExternalForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, PlanarLimits) == 0x000280, "Member 'FAnimNode_AnimDynamics::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, SimulationSpace) == 0x000290, "Member 'FAnimNode_AnimDynamics::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_AnimDynamics, RetargetingSettings) == 0x0002A0, "Member 'FAnimNode_AnimDynamics::RetargetingSettings' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_MeshSpaceRefPose
// 0x0000 (0x0010 - 0x0010)
struct FAnimNode_MeshSpaceRefPose final : public FAnimNode_Base
{
};
static_assert(alignof(FAnimNode_MeshSpaceRefPose) == 0x000008, "Wrong alignment on FAnimNode_MeshSpaceRefPose");
static_assert(sizeof(FAnimNode_MeshSpaceRefPose) == 0x000010, "Wrong size on FAnimNode_MeshSpaceRefPose");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpacePlayerBase
// 0x0030 (0x0068 - 0x0038)
struct FAnimNode_BlendSpacePlayerBase : public FAnimNode_AssetPlayerBase
{
public:
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            PreviousBlendSpace;                                // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAnimNode_BlendSpacePlayerBase) == 0x000008, "Wrong alignment on FAnimNode_BlendSpacePlayerBase");
static_assert(sizeof(FAnimNode_BlendSpacePlayerBase) == 0x000068, "Wrong size on FAnimNode_BlendSpacePlayerBase");
static_assert(offsetof(FAnimNode_BlendSpacePlayerBase, PreviousBlendSpace) == 0x000060, "Member 'FAnimNode_BlendSpacePlayerBase::PreviousBlendSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpacePlayer
// 0x0008 (0x0070 - 0x0068)
struct FAnimNode_BlendSpacePlayer : public FAnimNode_BlendSpacePlayerBase
{
public:
	class UBlendSpace*                            BlendSpace;                                        // 0x0068(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_BlendSpacePlayer) == 0x000008, "Wrong alignment on FAnimNode_BlendSpacePlayer");
static_assert(sizeof(FAnimNode_BlendSpacePlayer) == 0x000070, "Wrong size on FAnimNode_BlendSpacePlayer");
static_assert(offsetof(FAnimNode_BlendSpacePlayer, BlendSpace) == 0x000068, "Member 'FAnimNode_BlendSpacePlayer::BlendSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotationOffsetBlendSpace
// 0x00A8 (0x0118 - 0x0070)
struct FAnimNode_RotationOffsetBlendSpace final : public FAnimNode_BlendSpacePlayer
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0090(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x00E0(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x4];                                      // 0x0110(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaBoolEnabled;                                 // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RotationOffsetBlendSpace) == 0x000008, "Wrong alignment on FAnimNode_RotationOffsetBlendSpace");
static_assert(sizeof(FAnimNode_RotationOffsetBlendSpace) == 0x000118, "Wrong size on FAnimNode_RotationOffsetBlendSpace");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, BasePose) == 0x000070, "Member 'FAnimNode_RotationOffsetBlendSpace::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, LODThreshold) == 0x000080, "Member 'FAnimNode_RotationOffsetBlendSpace::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, Alpha) == 0x000084, "Member 'FAnimNode_RotationOffsetBlendSpace::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias) == 0x000088, "Member 'FAnimNode_RotationOffsetBlendSpace::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend) == 0x000090, "Member 'FAnimNode_RotationOffsetBlendSpace::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, AlphaCurveName) == 0x0000D8, "Member 'FAnimNode_RotationOffsetBlendSpace::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp) == 0x0000E0, "Member 'FAnimNode_RotationOffsetBlendSpace::AlphaScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, AlphaInputType) == 0x000114, "Member 'FAnimNode_RotationOffsetBlendSpace::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled) == 0x000115, "Member 'FAnimNode_RotationOffsetBlendSpace::bAlphaBoolEnabled' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceGraphBase
// 0x0058 (0x0068 - 0x0010)
struct FAnimNode_BlendSpaceGraphBase : public FAnimNode_Base
{
public:
	float                                         X;                                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Y;                                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   GroupName;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAnimGroupRole                                GroupRole;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            BlendSpace;                                        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FPoseLink>                      SamplePoseLinks;                                   // 0x0030(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendSpaceGraphBase) == 0x000008, "Wrong alignment on FAnimNode_BlendSpaceGraphBase");
static_assert(sizeof(FAnimNode_BlendSpaceGraphBase) == 0x000068, "Wrong size on FAnimNode_BlendSpaceGraphBase");
static_assert(offsetof(FAnimNode_BlendSpaceGraphBase, X) == 0x000010, "Member 'FAnimNode_BlendSpaceGraphBase::X' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpaceGraphBase, Y) == 0x000014, "Member 'FAnimNode_BlendSpaceGraphBase::Y' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpaceGraphBase, GroupName) == 0x000018, "Member 'FAnimNode_BlendSpaceGraphBase::GroupName' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpaceGraphBase, GroupRole) == 0x000020, "Member 'FAnimNode_BlendSpaceGraphBase::GroupRole' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpaceGraphBase, BlendSpace) == 0x000028, "Member 'FAnimNode_BlendSpaceGraphBase::BlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpaceGraphBase, SamplePoseLinks) == 0x000030, "Member 'FAnimNode_BlendSpaceGraphBase::SamplePoseLinks' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SequenceEvaluatorBase
// 0x0008 (0x0040 - 0x0038)
struct FAnimNode_SequenceEvaluatorBase : public FAnimNode_AssetPlayerBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SequenceEvaluatorBase) == 0x000008, "Wrong alignment on FAnimNode_SequenceEvaluatorBase");
static_assert(sizeof(FAnimNode_SequenceEvaluatorBase) == 0x000040, "Wrong size on FAnimNode_SequenceEvaluatorBase");

// ScriptStruct AnimGraphRuntime.AnimNode_SequenceEvaluator
// 0x0000 (0x0040 - 0x0040)
struct FAnimNode_SequenceEvaluator final : public FAnimNode_SequenceEvaluatorBase
{
};
static_assert(alignof(FAnimNode_SequenceEvaluator) == 0x000008, "Wrong alignment on FAnimNode_SequenceEvaluator");
static_assert(sizeof(FAnimNode_SequenceEvaluator) == 0x000040, "Wrong size on FAnimNode_SequenceEvaluator");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceGraph
// 0x0000 (0x0068 - 0x0068)
struct FAnimNode_BlendSpaceGraph final : public FAnimNode_BlendSpaceGraphBase
{
};
static_assert(alignof(FAnimNode_BlendSpaceGraph) == 0x000008, "Wrong alignment on FAnimNode_BlendSpaceGraph");
static_assert(sizeof(FAnimNode_BlendSpaceGraph) == 0x000068, "Wrong size on FAnimNode_BlendSpaceGraph");

// ScriptStruct AnimGraphRuntime.AnimNode_ModifyBone
// 0x0060 (0x0128 - 0x00C8)
struct FAnimNode_ModifyBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Translation;                                       // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         TranslationMode;                                   // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         RotationMode;                                      // 0x0121(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneModificationMode                         ScaleMode;                                         // 0x0122(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TranslationSpace;                                  // 0x0123(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             RotationSpace;                                     // 0x0124(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ScaleSpace;                                        // 0x0125(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ModifyBone) == 0x000008, "Wrong alignment on FAnimNode_ModifyBone");
static_assert(sizeof(FAnimNode_ModifyBone) == 0x000128, "Wrong size on FAnimNode_ModifyBone");
static_assert(offsetof(FAnimNode_ModifyBone, BoneToModify) == 0x0000C8, "Member 'FAnimNode_ModifyBone::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Translation) == 0x0000D8, "Member 'FAnimNode_ModifyBone::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Rotation) == 0x0000F0, "Member 'FAnimNode_ModifyBone::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, Scale) == 0x000108, "Member 'FAnimNode_ModifyBone::Scale' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, TranslationMode) == 0x000120, "Member 'FAnimNode_ModifyBone::TranslationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, RotationMode) == 0x000121, "Member 'FAnimNode_ModifyBone::RotationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, ScaleMode) == 0x000122, "Member 'FAnimNode_ModifyBone::ScaleMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, TranslationSpace) == 0x000123, "Member 'FAnimNode_ModifyBone::TranslationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, RotationSpace) == 0x000124, "Member 'FAnimNode_ModifyBone::RotationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyBone, ScaleSpace) == 0x000125, "Member 'FAnimNode_ModifyBone::ScaleSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Slot
// 0x0038 (0x0048 - 0x0010)
struct FAnimNode_Slot final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysUpdateSourcePose;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x1F];                                      // 0x0029(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Slot) == 0x000008, "Wrong alignment on FAnimNode_Slot");
static_assert(sizeof(FAnimNode_Slot) == 0x000048, "Wrong size on FAnimNode_Slot");
static_assert(offsetof(FAnimNode_Slot, Source) == 0x000010, "Member 'FAnimNode_Slot::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_Slot, SlotName) == 0x000020, "Member 'FAnimNode_Slot::SlotName' has a wrong offset!");
static_assert(offsetof(FAnimNode_Slot, bAlwaysUpdateSourcePose) == 0x000028, "Member 'FAnimNode_Slot::bAlwaysUpdateSourcePose' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceSampleResult
// 0x0000 (0x0020 - 0x0020)
struct FAnimNode_BlendSpaceSampleResult final : public FAnimNode_Root
{
};
static_assert(alignof(FAnimNode_BlendSpaceSampleResult) == 0x000008, "Wrong alignment on FAnimNode_BlendSpaceSampleResult");
static_assert(sizeof(FAnimNode_BlendSpaceSampleResult) == 0x000020, "Wrong size on FAnimNode_BlendSpaceSampleResult");

// ScriptStruct AnimGraphRuntime.AnimNode_Sync
// 0x0020 (0x0030 - 0x0010)
struct FAnimNode_Sync final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	class FName                                   GroupName;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAnimGroupRole                                GroupRole;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Sync) == 0x000008, "Wrong alignment on FAnimNode_Sync");
static_assert(sizeof(FAnimNode_Sync) == 0x000030, "Wrong size on FAnimNode_Sync");
static_assert(offsetof(FAnimNode_Sync, Source) == 0x000010, "Member 'FAnimNode_Sync::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_Sync, GroupName) == 0x000020, "Member 'FAnimNode_Sync::GroupName' has a wrong offset!");
static_assert(offsetof(FAnimNode_Sync, GroupRole) == 0x000028, "Member 'FAnimNode_Sync::GroupRole' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RefPose
// 0x0000 (0x0010 - 0x0010)
struct FAnimNode_RefPose final : public FAnimNode_Base
{
};
static_assert(alignof(FAnimNode_RefPose) == 0x000008, "Wrong alignment on FAnimNode_RefPose");
static_assert(sizeof(FAnimNode_RefPose) == 0x000010, "Wrong size on FAnimNode_RefPose");

// ScriptStruct AnimGraphRuntime.RigidBodyAnimNodeReference
// 0x0000 (0x0010 - 0x0010)
struct FRigidBodyAnimNodeReference final : public FAnimNodeReference
{
};
static_assert(alignof(FRigidBodyAnimNodeReference) == 0x000008, "Wrong alignment on FRigidBodyAnimNodeReference");
static_assert(sizeof(FRigidBodyAnimNodeReference) == 0x000010, "Wrong size on FRigidBodyAnimNodeReference");

// ScriptStruct AnimGraphRuntime.AnimNode_RotationMultiplier
// 0x0028 (0x00F0 - 0x00C8)
struct FAnimNode_RotationMultiplier final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         SourceBone;                                        // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneAxis                                     RotationAxisToRefer;                               // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdditive;                                       // 0x00ED(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE[0x2];                                       // 0x00EE(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RotationMultiplier) == 0x000008, "Wrong alignment on FAnimNode_RotationMultiplier");
static_assert(sizeof(FAnimNode_RotationMultiplier) == 0x0000F0, "Wrong size on FAnimNode_RotationMultiplier");
static_assert(offsetof(FAnimNode_RotationMultiplier, TargetBone) == 0x0000C8, "Member 'FAnimNode_RotationMultiplier::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, SourceBone) == 0x0000D8, "Member 'FAnimNode_RotationMultiplier::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, Multiplier) == 0x0000E8, "Member 'FAnimNode_RotationMultiplier::Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, RotationAxisToRefer) == 0x0000EC, "Member 'FAnimNode_RotationMultiplier::RotationAxisToRefer' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationMultiplier, bIsAdditive) == 0x0000ED, "Member 'FAnimNode_RotationMultiplier::bIsAdditive' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.BlendSpaceReference
// 0x0000 (0x0010 - 0x0010)
struct FBlendSpaceReference final : public FAnimNodeReference
{
};
static_assert(alignof(FBlendSpaceReference) == 0x000008, "Wrong alignment on FBlendSpaceReference");
static_assert(sizeof(FBlendSpaceReference) == 0x000010, "Wrong size on FBlendSpaceReference");

// ScriptStruct AnimGraphRuntime.PositionHistory
// 0x0030 (0x0030 - 0x0000)
struct FPositionHistory final
{
public:
	TArray<struct FVector>                        Positions;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x1C];                                      // 0x0014(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPositionHistory) == 0x000008, "Wrong alignment on FPositionHistory");
static_assert(sizeof(FPositionHistory) == 0x000030, "Wrong size on FPositionHistory");
static_assert(offsetof(FPositionHistory, Positions) == 0x000000, "Member 'FPositionHistory::Positions' has a wrong offset!");
static_assert(offsetof(FPositionHistory, Range) == 0x000010, "Member 'FPositionHistory::Range' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimationStateResultReference
// 0x0000 (0x0010 - 0x0010)
struct FAnimationStateResultReference final : public FAnimNodeReference
{
};
static_assert(alignof(FAnimationStateResultReference) == 0x000008, "Wrong alignment on FAnimationStateResultReference");
static_assert(sizeof(FAnimationStateResultReference) == 0x000010, "Wrong size on FAnimationStateResultReference");

// ScriptStruct AnimGraphRuntime.AnimationStateMachineReference
// 0x0000 (0x0010 - 0x0010)
struct FAnimationStateMachineReference final : public FAnimNodeReference
{
};
static_assert(alignof(FAnimationStateMachineReference) == 0x000008, "Wrong alignment on FAnimationStateMachineReference");
static_assert(sizeof(FAnimationStateMachineReference) == 0x000010, "Wrong size on FAnimationStateMachineReference");

// ScriptStruct AnimGraphRuntime.AnimNode_AimOffsetLookAt
// 0x0160 (0x01D0 - 0x0070)
struct alignas(0x10) FAnimNode_AimOffsetLookAt final : public FAnimNode_BlendSpacePlayer
{
public:
	uint8                                         Pad_70[0xC0];                                      // 0x0070(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              BasePose;                                          // 0x0130(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SourceSocketName;                                  // 0x0144(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PivotSocketName;                                   // 0x014C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtLocation;                                    // 0x0158(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketAxis;                                        // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x44];                                     // 0x018C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AimOffsetLookAt) == 0x000010, "Wrong alignment on FAnimNode_AimOffsetLookAt");
static_assert(sizeof(FAnimNode_AimOffsetLookAt) == 0x0001D0, "Wrong size on FAnimNode_AimOffsetLookAt");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, BasePose) == 0x000130, "Member 'FAnimNode_AimOffsetLookAt::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, LODThreshold) == 0x000140, "Member 'FAnimNode_AimOffsetLookAt::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, SourceSocketName) == 0x000144, "Member 'FAnimNode_AimOffsetLookAt::SourceSocketName' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, PivotSocketName) == 0x00014C, "Member 'FAnimNode_AimOffsetLookAt::PivotSocketName' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, LookAtLocation) == 0x000158, "Member 'FAnimNode_AimOffsetLookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, SocketAxis) == 0x000170, "Member 'FAnimNode_AimOffsetLookAt::SocketAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetLookAt, Alpha) == 0x000188, "Member 'FAnimNode_AimOffsetLookAt::Alpha' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ApplyAdditive
// 0x00B8 (0x00C8 - 0x0010)
struct FAnimNode_ApplyAdditive final : public FAnimNode_Base
{
public:
	struct FPoseLink                              base;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              Additive;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0034(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         LODThreshold;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0040(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x0090(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x4];                                       // 0x00C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x00C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlphaBoolEnabled;                                 // 0x00C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ApplyAdditive) == 0x000008, "Wrong alignment on FAnimNode_ApplyAdditive");
static_assert(sizeof(FAnimNode_ApplyAdditive) == 0x0000C8, "Wrong size on FAnimNode_ApplyAdditive");
static_assert(offsetof(FAnimNode_ApplyAdditive, base) == 0x000010, "Member 'FAnimNode_ApplyAdditive::base' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, Additive) == 0x000020, "Member 'FAnimNode_ApplyAdditive::Additive' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, Alpha) == 0x000030, "Member 'FAnimNode_ApplyAdditive::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, AlphaScaleBias) == 0x000034, "Member 'FAnimNode_ApplyAdditive::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, LODThreshold) == 0x00003C, "Member 'FAnimNode_ApplyAdditive::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, AlphaBoolBlend) == 0x000040, "Member 'FAnimNode_ApplyAdditive::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, AlphaCurveName) == 0x000088, "Member 'FAnimNode_ApplyAdditive::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, AlphaScaleBiasClamp) == 0x000090, "Member 'FAnimNode_ApplyAdditive::AlphaScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, AlphaInputType) == 0x0000C4, "Member 'FAnimNode_ApplyAdditive::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyAdditive, bAlphaBoolEnabled) == 0x0000C5, "Member 'FAnimNode_ApplyAdditive::bAlphaBoolEnabled' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.BlendBoneByChannelEntry
// 0x0024 (0x0024 - 0x0000)
struct FBlendBoneByChannelEntry final
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bBlendTranslation;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendRotation;                                    // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendScale;                                       // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlendBoneByChannelEntry) == 0x000004, "Wrong alignment on FBlendBoneByChannelEntry");
static_assert(sizeof(FBlendBoneByChannelEntry) == 0x000024, "Wrong size on FBlendBoneByChannelEntry");
static_assert(offsetof(FBlendBoneByChannelEntry, SourceBone) == 0x000000, "Member 'FBlendBoneByChannelEntry::SourceBone' has a wrong offset!");
static_assert(offsetof(FBlendBoneByChannelEntry, TargetBone) == 0x000010, "Member 'FBlendBoneByChannelEntry::TargetBone' has a wrong offset!");
static_assert(offsetof(FBlendBoneByChannelEntry, bBlendTranslation) == 0x000020, "Member 'FBlendBoneByChannelEntry::bBlendTranslation' has a wrong offset!");
static_assert(offsetof(FBlendBoneByChannelEntry, bBlendRotation) == 0x000021, "Member 'FBlendBoneByChannelEntry::bBlendRotation' has a wrong offset!");
static_assert(offsetof(FBlendBoneByChannelEntry, bBlendScale) == 0x000022, "Member 'FBlendBoneByChannelEntry::bBlendScale' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendBoneByChannel
// 0x0058 (0x0068 - 0x0010)
struct FAnimNode_BlendBoneByChannel final : public FAnimNode_Base
{
public:
	struct FPoseLink                              A;                                                 // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              B;                                                 // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBlendBoneByChannelEntry>       BoneDefinitions;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TransformsSpace;                                   // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendBoneByChannel) == 0x000008, "Wrong alignment on FAnimNode_BlendBoneByChannel");
static_assert(sizeof(FAnimNode_BlendBoneByChannel) == 0x000068, "Wrong size on FAnimNode_BlendBoneByChannel");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, A) == 0x000010, "Member 'FAnimNode_BlendBoneByChannel::A' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, B) == 0x000020, "Member 'FAnimNode_BlendBoneByChannel::B' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, BoneDefinitions) == 0x000030, "Member 'FAnimNode_BlendBoneByChannel::BoneDefinitions' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, Alpha) == 0x000050, "Member 'FAnimNode_BlendBoneByChannel::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, AlphaScaleBias) == 0x000058, "Member 'FAnimNode_BlendBoneByChannel::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendBoneByChannel, TransformsSpace) == 0x000060, "Member 'FAnimNode_BlendBoneByChannel::TransformsSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListBase
// 0x0038 (0x0048 - 0x0010)
struct FAnimNode_BlendListBase : public FAnimNode_Base
{
public:
	TArray<struct FPoseLink>                      BlendPose;                                         // 0x0010(0x0010)(Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x28];                                      // 0x0020(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendListBase) == 0x000008, "Wrong alignment on FAnimNode_BlendListBase");
static_assert(sizeof(FAnimNode_BlendListBase) == 0x000048, "Wrong size on FAnimNode_BlendListBase");
static_assert(offsetof(FAnimNode_BlendListBase, BlendPose) == 0x000010, "Member 'FAnimNode_BlendListBase::BlendPose' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByBool
// 0x0000 (0x0048 - 0x0048)
struct FAnimNode_BlendListByBool final : public FAnimNode_BlendListBase
{
};
static_assert(alignof(FAnimNode_BlendListByBool) == 0x000008, "Wrong alignment on FAnimNode_BlendListByBool");
static_assert(sizeof(FAnimNode_BlendListByBool) == 0x000048, "Wrong size on FAnimNode_BlendListByBool");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByEnum
// 0x0000 (0x0048 - 0x0048)
struct FAnimNode_BlendListByEnum final : public FAnimNode_BlendListBase
{
};
static_assert(alignof(FAnimNode_BlendListByEnum) == 0x000008, "Wrong alignment on FAnimNode_BlendListByEnum");
static_assert(sizeof(FAnimNode_BlendListByEnum) == 0x000048, "Wrong size on FAnimNode_BlendListByEnum");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendListByInt
// 0x0000 (0x0048 - 0x0048)
struct FAnimNode_BlendListByInt final : public FAnimNode_BlendListBase
{
};
static_assert(alignof(FAnimNode_BlendListByInt) == 0x000008, "Wrong alignment on FAnimNode_BlendListByInt");
static_assert(sizeof(FAnimNode_BlendListByInt) == 0x000048, "Wrong size on FAnimNode_BlendListByInt");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpaceEvaluator
// 0x0008 (0x0078 - 0x0070)
struct FAnimNode_BlendSpaceEvaluator final : public FAnimNode_BlendSpacePlayer
{
public:
	float                                         NormalizedTime;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleportToNormalizedTime;                         // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendSpaceEvaluator) == 0x000008, "Wrong alignment on FAnimNode_BlendSpaceEvaluator");
static_assert(sizeof(FAnimNode_BlendSpaceEvaluator) == 0x000078, "Wrong size on FAnimNode_BlendSpaceEvaluator");
static_assert(offsetof(FAnimNode_BlendSpaceEvaluator, NormalizedTime) == 0x000070, "Member 'FAnimNode_BlendSpaceEvaluator::NormalizedTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpaceEvaluator, bTeleportToNormalizedTime) == 0x000074, "Member 'FAnimNode_BlendSpaceEvaluator::bTeleportToNormalizedTime' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BlendSpacePlayer_Standalone
// 0x0028 (0x0090 - 0x0068)
struct FAnimNode_BlendSpacePlayer_Standalone final : public FAnimNode_BlendSpacePlayerBase
{
public:
	class FName                                   GroupName;                                         // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAnimGroupRole                                GroupRole;                                         // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAnimSyncMethod                               Method;                                            // 0x0071(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIgnoreForRelevancyTest;                           // 0x0072(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_73[0x1];                                       // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         X;                                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Y;                                                 // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayRate;                                          // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bLoop;                                             // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bResetPlayTimeWhenBlendSpaceChanges;               // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlendSpace*                            BlendSpace;                                        // 0x0088(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_BlendSpacePlayer_Standalone) == 0x000008, "Wrong alignment on FAnimNode_BlendSpacePlayer_Standalone");
static_assert(sizeof(FAnimNode_BlendSpacePlayer_Standalone) == 0x000090, "Wrong size on FAnimNode_BlendSpacePlayer_Standalone");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, GroupName) == 0x000068, "Member 'FAnimNode_BlendSpacePlayer_Standalone::GroupName' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, GroupRole) == 0x000070, "Member 'FAnimNode_BlendSpacePlayer_Standalone::GroupRole' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, Method) == 0x000071, "Member 'FAnimNode_BlendSpacePlayer_Standalone::Method' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, bIgnoreForRelevancyTest) == 0x000072, "Member 'FAnimNode_BlendSpacePlayer_Standalone::bIgnoreForRelevancyTest' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, X) == 0x000074, "Member 'FAnimNode_BlendSpacePlayer_Standalone::X' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, Y) == 0x000078, "Member 'FAnimNode_BlendSpacePlayer_Standalone::Y' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, PlayRate) == 0x00007C, "Member 'FAnimNode_BlendSpacePlayer_Standalone::PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, bLoop) == 0x000080, "Member 'FAnimNode_BlendSpacePlayer_Standalone::bLoop' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, bResetPlayTimeWhenBlendSpaceChanges) == 0x000081, "Member 'FAnimNode_BlendSpacePlayer_Standalone::bResetPlayTimeWhenBlendSpaceChanges' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, StartPosition) == 0x000084, "Member 'FAnimNode_BlendSpacePlayer_Standalone::StartPosition' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayer_Standalone, BlendSpace) == 0x000088, "Member 'FAnimNode_BlendSpacePlayer_Standalone::BlendSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CallFunction
// 0x0028 (0x0038 - 0x0010)
struct FAnimNode_CallFunction final : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x14];                                      // 0x0020(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimFunctionCallSite                         CallSite;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CallFunction) == 0x000008, "Wrong alignment on FAnimNode_CallFunction");
static_assert(sizeof(FAnimNode_CallFunction) == 0x000038, "Wrong size on FAnimNode_CallFunction");
static_assert(offsetof(FAnimNode_CallFunction, Source) == 0x000010, "Member 'FAnimNode_CallFunction::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_CallFunction, CallSite) == 0x000034, "Member 'FAnimNode_CallFunction::CallSite' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CopyPoseFromMesh
// 0x0148 (0x0158 - 0x0010)
struct FAnimNode_CopyPoseFromMesh final : public FAnimNode_Base
{
public:
	TWeakObjectPtr<class USkeletalMeshComponent>  SourceMeshComponent;                               // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseAttachedParent : 1;                            // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCopyCurves : 1;                                   // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bCopyCustomAttributes;                             // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseMeshPose : 1;                                  // 0x001A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RootBoneToCopy;                                    // 0x001C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x134];                                     // 0x0024(0x0134)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CopyPoseFromMesh) == 0x000008, "Wrong alignment on FAnimNode_CopyPoseFromMesh");
static_assert(sizeof(FAnimNode_CopyPoseFromMesh) == 0x000158, "Wrong size on FAnimNode_CopyPoseFromMesh");
static_assert(offsetof(FAnimNode_CopyPoseFromMesh, SourceMeshComponent) == 0x000010, "Member 'FAnimNode_CopyPoseFromMesh::SourceMeshComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyPoseFromMesh, bCopyCustomAttributes) == 0x000019, "Member 'FAnimNode_CopyPoseFromMesh::bCopyCustomAttributes' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyPoseFromMesh, RootBoneToCopy) == 0x00001C, "Member 'FAnimNode_CopyPoseFromMesh::RootBoneToCopy' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CurveSource
// 0x0030 (0x0040 - 0x0010)
struct FAnimNode_CurveSource final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SourceBinding;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ICurveSourceInterface> CurveSource;                                       // 0x0030(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CurveSource) == 0x000008, "Wrong alignment on FAnimNode_CurveSource");
static_assert(sizeof(FAnimNode_CurveSource) == 0x000040, "Wrong size on FAnimNode_CurveSource");
static_assert(offsetof(FAnimNode_CurveSource, SourcePose) == 0x000010, "Member 'FAnimNode_CurveSource::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveSource, SourceBinding) == 0x000020, "Member 'FAnimNode_CurveSource::SourceBinding' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveSource, Alpha) == 0x000028, "Member 'FAnimNode_CurveSource::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveSource, CurveSource) == 0x000030, "Member 'FAnimNode_CurveSource::CurveSource' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_LayeredBoneBlend
// 0x00E0 (0x00F0 - 0x0010)
struct FAnimNode_LayeredBoneBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FPoseLink>                      BlendPoses;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	ELayeredBoneBlendMode                         BlendMode;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBlendProfile*>                  BlendMasks;                                        // 0x0038(0x0010)(Edit, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FInputBlendPose>                LayerSetup;                                        // 0x0048(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 BlendWeights;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceRotationBlend;                           // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceScaleBlend;                              // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECurveBlendOption                             CurveBlendOption;                                  // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlendRootMotionBasedOnRootBone;                   // 0x006B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODThreshold;                                      // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPerBoneBlendWeight>            PerBoneBlendWeights;                               // 0x0078(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  SkeletonGuid;                                      // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  VirtualBoneGuid;                                   // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0x48];                                      // 0x00A8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_LayeredBoneBlend) == 0x000008, "Wrong alignment on FAnimNode_LayeredBoneBlend");
static_assert(sizeof(FAnimNode_LayeredBoneBlend) == 0x0000F0, "Wrong size on FAnimNode_LayeredBoneBlend");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BasePose) == 0x000010, "Member 'FAnimNode_LayeredBoneBlend::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BlendPoses) == 0x000020, "Member 'FAnimNode_LayeredBoneBlend::BlendPoses' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BlendMode) == 0x000030, "Member 'FAnimNode_LayeredBoneBlend::BlendMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BlendMasks) == 0x000038, "Member 'FAnimNode_LayeredBoneBlend::BlendMasks' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, LayerSetup) == 0x000048, "Member 'FAnimNode_LayeredBoneBlend::LayerSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, BlendWeights) == 0x000058, "Member 'FAnimNode_LayeredBoneBlend::BlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend) == 0x000068, "Member 'FAnimNode_LayeredBoneBlend::bMeshSpaceRotationBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend) == 0x000069, "Member 'FAnimNode_LayeredBoneBlend::bMeshSpaceScaleBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, CurveBlendOption) == 0x00006A, "Member 'FAnimNode_LayeredBoneBlend::CurveBlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone) == 0x00006B, "Member 'FAnimNode_LayeredBoneBlend::bBlendRootMotionBasedOnRootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, LODThreshold) == 0x000070, "Member 'FAnimNode_LayeredBoneBlend::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, PerBoneBlendWeights) == 0x000078, "Member 'FAnimNode_LayeredBoneBlend::PerBoneBlendWeights' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, SkeletonGuid) == 0x000088, "Member 'FAnimNode_LayeredBoneBlend::SkeletonGuid' has a wrong offset!");
static_assert(offsetof(FAnimNode_LayeredBoneBlend, VirtualBoneGuid) == 0x000098, "Member 'FAnimNode_LayeredBoneBlend::VirtualBoneGuid' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_MakeDynamicAdditive
// 0x0028 (0x0038 - 0x0010)
struct FAnimNode_MakeDynamicAdditive final : public FAnimNode_Base
{
public:
	struct FPoseLink                              base;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              Additive;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMeshSpaceAdditive;                                // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MakeDynamicAdditive) == 0x000008, "Wrong alignment on FAnimNode_MakeDynamicAdditive");
static_assert(sizeof(FAnimNode_MakeDynamicAdditive) == 0x000038, "Wrong size on FAnimNode_MakeDynamicAdditive");
static_assert(offsetof(FAnimNode_MakeDynamicAdditive, base) == 0x000010, "Member 'FAnimNode_MakeDynamicAdditive::base' has a wrong offset!");
static_assert(offsetof(FAnimNode_MakeDynamicAdditive, Additive) == 0x000020, "Member 'FAnimNode_MakeDynamicAdditive::Additive' has a wrong offset!");
static_assert(offsetof(FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive) == 0x000030, "Member 'FAnimNode_MakeDynamicAdditive::bMeshSpaceAdditive' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_MirrorBase
// 0x0038 (0x0048 - 0x0010)
struct FAnimNode_MirrorBase : public FAnimNode_Base
{
public:
	struct FPoseLink                              Source;                                            // 0x0010(0x0010)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x28];                                      // 0x0020(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MirrorBase) == 0x000008, "Wrong alignment on FAnimNode_MirrorBase");
static_assert(sizeof(FAnimNode_MirrorBase) == 0x000048, "Wrong size on FAnimNode_MirrorBase");
static_assert(offsetof(FAnimNode_MirrorBase, Source) == 0x000010, "Member 'FAnimNode_MirrorBase::Source' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Mirror
// 0x0000 (0x0048 - 0x0048)
struct FAnimNode_Mirror final : public FAnimNode_MirrorBase
{
};
static_assert(alignof(FAnimNode_Mirror) == 0x000008, "Wrong alignment on FAnimNode_Mirror");
static_assert(sizeof(FAnimNode_Mirror) == 0x000048, "Wrong size on FAnimNode_Mirror");

// ScriptStruct AnimGraphRuntime.AnimNode_Mirror_Standalone
// 0x0018 (0x0060 - 0x0048)
struct FAnimNode_Mirror_Standalone final : public FAnimNode_MirrorBase
{
public:
	bool                                          bMirror;                                           // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMirrorDataTable*                       MirrorDataTable;                                   // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlendTime;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bResetChild;                                       // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoneMirroring;                                    // 0x005D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCurveMirroring;                                   // 0x005E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAttributeMirroring;                               // 0x005F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAnimNode_Mirror_Standalone) == 0x000008, "Wrong alignment on FAnimNode_Mirror_Standalone");
static_assert(sizeof(FAnimNode_Mirror_Standalone) == 0x000060, "Wrong size on FAnimNode_Mirror_Standalone");
static_assert(offsetof(FAnimNode_Mirror_Standalone, bMirror) == 0x000048, "Member 'FAnimNode_Mirror_Standalone::bMirror' has a wrong offset!");
static_assert(offsetof(FAnimNode_Mirror_Standalone, MirrorDataTable) == 0x000050, "Member 'FAnimNode_Mirror_Standalone::MirrorDataTable' has a wrong offset!");
static_assert(offsetof(FAnimNode_Mirror_Standalone, BlendTime) == 0x000058, "Member 'FAnimNode_Mirror_Standalone::BlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_Mirror_Standalone, bResetChild) == 0x00005C, "Member 'FAnimNode_Mirror_Standalone::bResetChild' has a wrong offset!");
static_assert(offsetof(FAnimNode_Mirror_Standalone, bBoneMirroring) == 0x00005D, "Member 'FAnimNode_Mirror_Standalone::bBoneMirroring' has a wrong offset!");
static_assert(offsetof(FAnimNode_Mirror_Standalone, bCurveMirroring) == 0x00005E, "Member 'FAnimNode_Mirror_Standalone::bCurveMirroring' has a wrong offset!");
static_assert(offsetof(FAnimNode_Mirror_Standalone, bAttributeMirroring) == 0x00005F, "Member 'FAnimNode_Mirror_Standalone::bAttributeMirroring' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ModifyCurve
// 0x0110 (0x0120 - 0x0010)
struct FAnimNode_ModifyCurve final : public FAnimNode_Base
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      CurveMap;                                          // 0x0020(0x0050)(Edit, BlueprintVisible, EditFixedSize, NativeAccessSpecifierPublic)
	TArray<float>                                 CurveValues;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CurveNames;                                        // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x88];                                      // 0x0090(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModifyCurveApplyMode                         ApplyMode;                                         // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ModifyCurve) == 0x000008, "Wrong alignment on FAnimNode_ModifyCurve");
static_assert(sizeof(FAnimNode_ModifyCurve) == 0x000120, "Wrong size on FAnimNode_ModifyCurve");
static_assert(offsetof(FAnimNode_ModifyCurve, SourcePose) == 0x000010, "Member 'FAnimNode_ModifyCurve::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, CurveMap) == 0x000020, "Member 'FAnimNode_ModifyCurve::CurveMap' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, CurveValues) == 0x000070, "Member 'FAnimNode_ModifyCurve::CurveValues' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, CurveNames) == 0x000080, "Member 'FAnimNode_ModifyCurve::CurveNames' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, Alpha) == 0x000118, "Member 'FAnimNode_ModifyCurve::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_ModifyCurve, ApplyMode) == 0x00011C, "Member 'FAnimNode_ModifyCurve::ApplyMode' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_MultiWayBlend
// 0x0040 (0x0050 - 0x0010)
struct FAnimNode_MultiWayBlend final : public FAnimNode_Base
{
public:
	TArray<struct FPoseLink>                      Poses;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 DesiredAlphas;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAdditiveNode;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNormalizeAlpha;                                   // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_MultiWayBlend) == 0x000008, "Wrong alignment on FAnimNode_MultiWayBlend");
static_assert(sizeof(FAnimNode_MultiWayBlend) == 0x000050, "Wrong size on FAnimNode_MultiWayBlend");
static_assert(offsetof(FAnimNode_MultiWayBlend, Poses) == 0x000010, "Member 'FAnimNode_MultiWayBlend::Poses' has a wrong offset!");
static_assert(offsetof(FAnimNode_MultiWayBlend, DesiredAlphas) == 0x000020, "Member 'FAnimNode_MultiWayBlend::DesiredAlphas' has a wrong offset!");
static_assert(offsetof(FAnimNode_MultiWayBlend, AlphaScaleBias) == 0x000040, "Member 'FAnimNode_MultiWayBlend::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_MultiWayBlend, bAdditiveNode) == 0x000048, "Member 'FAnimNode_MultiWayBlend::bAdditiveNode' has a wrong offset!");
static_assert(offsetof(FAnimNode_MultiWayBlend, bNormalizeAlpha) == 0x000049, "Member 'FAnimNode_MultiWayBlend::bNormalizeAlpha' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseHandler
// 0x0060 (0x0098 - 0x0038)
struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
{
public:
	class UPoseAsset*                             PoseAsset;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x58];                                      // 0x0040(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseHandler) == 0x000008, "Wrong alignment on FAnimNode_PoseHandler");
static_assert(sizeof(FAnimNode_PoseHandler) == 0x000098, "Wrong size on FAnimNode_PoseHandler");
static_assert(offsetof(FAnimNode_PoseHandler, PoseAsset) == 0x000038, "Member 'FAnimNode_PoseHandler::PoseAsset' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseBlendNode
// 0x0038 (0x00D0 - 0x0098)
struct FAnimNode_PoseBlendNode final : public FAnimNode_PoseHandler
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendOption;                                       // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomCurve;                                       // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseBlendNode) == 0x000008, "Wrong alignment on FAnimNode_PoseBlendNode");
static_assert(sizeof(FAnimNode_PoseBlendNode) == 0x0000D0, "Wrong size on FAnimNode_PoseBlendNode");
static_assert(offsetof(FAnimNode_PoseBlendNode, SourcePose) == 0x000098, "Member 'FAnimNode_PoseBlendNode::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseBlendNode, BlendOption) == 0x0000A8, "Member 'FAnimNode_PoseBlendNode::BlendOption' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseBlendNode, CustomCurve) == 0x0000B0, "Member 'FAnimNode_PoseBlendNode::CustomCurve' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseByName
// 0x0018 (0x00B0 - 0x0098)
struct FAnimNode_PoseByName final : public FAnimNode_PoseHandler
{
public:
	class FName                                   PoseName;                                          // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoseWeight;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseByName) == 0x000008, "Wrong alignment on FAnimNode_PoseByName");
static_assert(sizeof(FAnimNode_PoseByName) == 0x0000B0, "Wrong size on FAnimNode_PoseByName");
static_assert(offsetof(FAnimNode_PoseByName, PoseName) == 0x000098, "Member 'FAnimNode_PoseByName::PoseName' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseByName, PoseWeight) == 0x0000A0, "Member 'FAnimNode_PoseByName::PoseWeight' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.PoseDriverTransform
// 0x0030 (0x0030 - 0x0000)
struct FPoseDriverTransform final
{
public:
	struct FVector                                TargetTranslation;                                 // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseDriverTransform) == 0x000008, "Wrong alignment on FPoseDriverTransform");
static_assert(sizeof(FPoseDriverTransform) == 0x000030, "Wrong size on FPoseDriverTransform");
static_assert(offsetof(FPoseDriverTransform, TargetTranslation) == 0x000000, "Member 'FPoseDriverTransform::TargetTranslation' has a wrong offset!");
static_assert(offsetof(FPoseDriverTransform, TargetRotation) == 0x000018, "Member 'FPoseDriverTransform::TargetRotation' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.PoseDriverTarget
// 0x00C8 (0x00C8 - 0x0000)
struct FPoseDriverTarget final
{
public:
	TArray<struct FPoseDriverTransform>           BoneTransforms;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotation;                                    // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TargetScale;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFDistanceMethod                            DistanceMethod;                                    // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFFunctionType                              FunctionType;                                      // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCustomCurve;                                 // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             CustomCurve;                                       // 0x0030(0x0080)(Edit, NativeAccessSpecifierPublic)
	class FName                                   DrivenName;                                        // 0x00B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsHidden;                                         // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseDriverTarget) == 0x000008, "Wrong alignment on FPoseDriverTarget");
static_assert(sizeof(FPoseDriverTarget) == 0x0000C8, "Wrong size on FPoseDriverTarget");
static_assert(offsetof(FPoseDriverTarget, BoneTransforms) == 0x000000, "Member 'FPoseDriverTarget::BoneTransforms' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, TargetRotation) == 0x000010, "Member 'FPoseDriverTarget::TargetRotation' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, TargetScale) == 0x000028, "Member 'FPoseDriverTarget::TargetScale' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, DistanceMethod) == 0x00002C, "Member 'FPoseDriverTarget::DistanceMethod' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, FunctionType) == 0x00002D, "Member 'FPoseDriverTarget::FunctionType' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, bApplyCustomCurve) == 0x00002E, "Member 'FPoseDriverTarget::bApplyCustomCurve' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, CustomCurve) == 0x000030, "Member 'FPoseDriverTarget::CustomCurve' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, DrivenName) == 0x0000B0, "Member 'FPoseDriverTarget::DrivenName' has a wrong offset!");
static_assert(offsetof(FPoseDriverTarget, bIsHidden) == 0x0000C0, "Member 'FPoseDriverTarget::bIsHidden' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RBFParams
// 0x0038 (0x0038 - 0x0000)
struct FRBFParams final
{
public:
	int32                                         TargetDimensions;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFSolverType                                SolverType;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutomaticRadius;                                  // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFFunctionType                              Function;                                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFDistanceMethod                            DistanceMethod;                                    // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneAxis                                     TwistAxis;                                         // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightThreshold;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFNormalizeMethod                           NormalizeMethod;                                   // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MedianReference;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedianMin;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedianMax;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRBFParams) == 0x000008, "Wrong alignment on FRBFParams");
static_assert(sizeof(FRBFParams) == 0x000038, "Wrong size on FRBFParams");
static_assert(offsetof(FRBFParams, TargetDimensions) == 0x000000, "Member 'FRBFParams::TargetDimensions' has a wrong offset!");
static_assert(offsetof(FRBFParams, SolverType) == 0x000004, "Member 'FRBFParams::SolverType' has a wrong offset!");
static_assert(offsetof(FRBFParams, Radius) == 0x000008, "Member 'FRBFParams::Radius' has a wrong offset!");
static_assert(offsetof(FRBFParams, bAutomaticRadius) == 0x00000C, "Member 'FRBFParams::bAutomaticRadius' has a wrong offset!");
static_assert(offsetof(FRBFParams, Function) == 0x00000D, "Member 'FRBFParams::Function' has a wrong offset!");
static_assert(offsetof(FRBFParams, DistanceMethod) == 0x00000E, "Member 'FRBFParams::DistanceMethod' has a wrong offset!");
static_assert(offsetof(FRBFParams, TwistAxis) == 0x00000F, "Member 'FRBFParams::TwistAxis' has a wrong offset!");
static_assert(offsetof(FRBFParams, WeightThreshold) == 0x000010, "Member 'FRBFParams::WeightThreshold' has a wrong offset!");
static_assert(offsetof(FRBFParams, NormalizeMethod) == 0x000014, "Member 'FRBFParams::NormalizeMethod' has a wrong offset!");
static_assert(offsetof(FRBFParams, MedianReference) == 0x000018, "Member 'FRBFParams::MedianReference' has a wrong offset!");
static_assert(offsetof(FRBFParams, MedianMin) == 0x000030, "Member 'FRBFParams::MedianMin' has a wrong offset!");
static_assert(offsetof(FRBFParams, MedianMax) == 0x000034, "Member 'FRBFParams::MedianMax' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseDriver
// 0x0108 (0x01A0 - 0x0098)
struct FAnimNode_PoseDriver final : public FAnimNode_PoseHandler
{
public:
	struct FPoseLink                              SourcePose;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, EditFixedSize, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 SourceBones;                                       // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EvalSpaceBone;                                     // 0x00B8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEvalFromRefPose;                                  // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBoneReference>                 OnlyDriveBones;                                    // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPoseDriverTarget>              PoseTargets;                                       // 0x00E0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRBFParams                             RBFParams;                                         // 0x00F0(0x0038)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EPoseDriverSource                             DriveSource;                                       // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseDriverOutput                             DriveOutput;                                       // 0x0129(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x42];                                     // 0x012A(0x0042)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LODThreshold;                                      // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_170[0x30];                                     // 0x0170(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseDriver) == 0x000008, "Wrong alignment on FAnimNode_PoseDriver");
static_assert(sizeof(FAnimNode_PoseDriver) == 0x0001A0, "Wrong size on FAnimNode_PoseDriver");
static_assert(offsetof(FAnimNode_PoseDriver, SourcePose) == 0x000098, "Member 'FAnimNode_PoseDriver::SourcePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, SourceBones) == 0x0000A8, "Member 'FAnimNode_PoseDriver::SourceBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, EvalSpaceBone) == 0x0000B8, "Member 'FAnimNode_PoseDriver::EvalSpaceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, bEvalFromRefPose) == 0x0000C8, "Member 'FAnimNode_PoseDriver::bEvalFromRefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, OnlyDriveBones) == 0x0000D0, "Member 'FAnimNode_PoseDriver::OnlyDriveBones' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, PoseTargets) == 0x0000E0, "Member 'FAnimNode_PoseDriver::PoseTargets' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, RBFParams) == 0x0000F0, "Member 'FAnimNode_PoseDriver::RBFParams' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, DriveSource) == 0x000128, "Member 'FAnimNode_PoseDriver::DriveSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, DriveOutput) == 0x000129, "Member 'FAnimNode_PoseDriver::DriveOutput' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseDriver, LODThreshold) == 0x00016C, "Member 'FAnimNode_PoseDriver::LODThreshold' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_PoseSnapshot
// 0x0080 (0x0090 - 0x0010)
struct FAnimNode_PoseSnapshot final : public FAnimNode_Base
{
public:
	class FName                                   SnapshotName;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSnapshot                          Snapshot;                                          // 0x0018(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESnapshotSourceMode                           Mode;                                              // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3F];                                      // 0x0051(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_PoseSnapshot) == 0x000008, "Wrong alignment on FAnimNode_PoseSnapshot");
static_assert(sizeof(FAnimNode_PoseSnapshot) == 0x000090, "Wrong size on FAnimNode_PoseSnapshot");
static_assert(offsetof(FAnimNode_PoseSnapshot, SnapshotName) == 0x000010, "Member 'FAnimNode_PoseSnapshot::SnapshotName' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSnapshot, Snapshot) == 0x000018, "Member 'FAnimNode_PoseSnapshot::Snapshot' has a wrong offset!");
static_assert(offsetof(FAnimNode_PoseSnapshot, Mode) == 0x000050, "Member 'FAnimNode_PoseSnapshot::Mode' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RandomPlayerSequenceEntry
// 0x0050 (0x0050 - 0x0000)
struct FRandomPlayerSequenceEntry final
{
public:
	class UAnimSequenceBase*                      Sequence;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChanceToPlay;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinLoopCount;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLoopCount;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPlayRate;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPlayRate;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            BlendIn;                                           // 0x0020(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRandomPlayerSequenceEntry) == 0x000008, "Wrong alignment on FRandomPlayerSequenceEntry");
static_assert(sizeof(FRandomPlayerSequenceEntry) == 0x000050, "Wrong size on FRandomPlayerSequenceEntry");
static_assert(offsetof(FRandomPlayerSequenceEntry, Sequence) == 0x000000, "Member 'FRandomPlayerSequenceEntry::Sequence' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, ChanceToPlay) == 0x000008, "Member 'FRandomPlayerSequenceEntry::ChanceToPlay' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MinLoopCount) == 0x00000C, "Member 'FRandomPlayerSequenceEntry::MinLoopCount' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MaxLoopCount) == 0x000010, "Member 'FRandomPlayerSequenceEntry::MaxLoopCount' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MinPlayRate) == 0x000014, "Member 'FRandomPlayerSequenceEntry::MinPlayRate' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, MaxPlayRate) == 0x000018, "Member 'FRandomPlayerSequenceEntry::MaxPlayRate' has a wrong offset!");
static_assert(offsetof(FRandomPlayerSequenceEntry, BlendIn) == 0x000020, "Member 'FRandomPlayerSequenceEntry::BlendIn' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RandomPlayer
// 0x0068 (0x0078 - 0x0010)
struct FAnimNode_RandomPlayer final : public FAnimNode_AssetPlayerRelevancyBase
{
public:
	TArray<struct FRandomPlayerSequenceEntry>     Entries;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x50];                                      // 0x0020(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendWeight;                                       // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShuffleMode;                                      // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RandomPlayer) == 0x000008, "Wrong alignment on FAnimNode_RandomPlayer");
static_assert(sizeof(FAnimNode_RandomPlayer) == 0x000078, "Wrong size on FAnimNode_RandomPlayer");
static_assert(offsetof(FAnimNode_RandomPlayer, Entries) == 0x000010, "Member 'FAnimNode_RandomPlayer::Entries' has a wrong offset!");
static_assert(offsetof(FAnimNode_RandomPlayer, BlendWeight) == 0x000070, "Member 'FAnimNode_RandomPlayer::BlendWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_RandomPlayer, bShuffleMode) == 0x000074, "Member 'FAnimNode_RandomPlayer::bShuffleMode' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotateRootBone
// 0x00A0 (0x00B0 - 0x0010)
struct FAnimNode_RotateRootBone final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   PitchScaleBiasClamp;                               // 0x0028(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   YawScaleBiasClamp;                                 // 0x0058(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               MeshToComponent;                                   // 0x0088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRotateRootMotionAttribute;                        // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0xF];                                       // 0x00A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RotateRootBone) == 0x000008, "Wrong alignment on FAnimNode_RotateRootBone");
static_assert(sizeof(FAnimNode_RotateRootBone) == 0x0000B0, "Wrong size on FAnimNode_RotateRootBone");
static_assert(offsetof(FAnimNode_RotateRootBone, BasePose) == 0x000010, "Member 'FAnimNode_RotateRootBone::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, Pitch) == 0x000020, "Member 'FAnimNode_RotateRootBone::Pitch' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, Yaw) == 0x000024, "Member 'FAnimNode_RotateRootBone::Yaw' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, PitchScaleBiasClamp) == 0x000028, "Member 'FAnimNode_RotateRootBone::PitchScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, YawScaleBiasClamp) == 0x000058, "Member 'FAnimNode_RotateRootBone::YawScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, MeshToComponent) == 0x000088, "Member 'FAnimNode_RotateRootBone::MeshToComponent' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotateRootBone, bRotateRootMotionAttribute) == 0x0000A0, "Member 'FAnimNode_RotateRootBone::bRotateRootMotionAttribute' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RotationOffsetBlendSpaceGraph
// 0x00A8 (0x0110 - 0x0068)
struct FAnimNode_RotationOffsetBlendSpaceGraph final : public FAnimNode_BlendSpaceGraphBase
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPrivate)
	int32                                         LODThreshold;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Alpha;                                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0080(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPrivate)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0088(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPrivate)
	class FName                                   AlphaCurveName;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x00D8(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x4];                                      // 0x0108(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x010C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAlphaBoolEnabled;                                 // 0x010D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RotationOffsetBlendSpaceGraph) == 0x000008, "Wrong alignment on FAnimNode_RotationOffsetBlendSpaceGraph");
static_assert(sizeof(FAnimNode_RotationOffsetBlendSpaceGraph) == 0x000110, "Wrong size on FAnimNode_RotationOffsetBlendSpaceGraph");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, BasePose) == 0x000068, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, LODThreshold) == 0x000078, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::LODThreshold' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, Alpha) == 0x00007C, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, AlphaScaleBias) == 0x000080, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, AlphaBoolBlend) == 0x000088, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, AlphaCurveName) == 0x0000D0, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, AlphaScaleBiasClamp) == 0x0000D8, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::AlphaScaleBiasClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, AlphaInputType) == 0x00010C, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FAnimNode_RotationOffsetBlendSpaceGraph, bAlphaBoolEnabled) == 0x00010D, "Member 'FAnimNode_RotationOffsetBlendSpaceGraph::bAlphaBoolEnabled' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SequenceEvaluator_Standalone
// 0x0030 (0x0070 - 0x0040)
struct FAnimNode_SequenceEvaluator_Standalone final : public FAnimNode_SequenceEvaluatorBase
{
public:
	class FName                                   GroupName;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAnimGroupRole                                GroupRole;                                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EAnimSyncMethod                               Method;                                            // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIgnoreForRelevancyTest;                           // 0x004A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      Sequence;                                          // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ExplicitTime;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseExplicitFrame;                                 // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExplicitFrame;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldLoop;                                       // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTeleportToExplicitTime;                           // 0x0065(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESequenceEvalReinit                           ReinitializationBehavior;                          // 0x0066(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_67[0x1];                                       // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartPosition;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SequenceEvaluator_Standalone) == 0x000008, "Wrong alignment on FAnimNode_SequenceEvaluator_Standalone");
static_assert(sizeof(FAnimNode_SequenceEvaluator_Standalone) == 0x000070, "Wrong size on FAnimNode_SequenceEvaluator_Standalone");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, GroupName) == 0x000040, "Member 'FAnimNode_SequenceEvaluator_Standalone::GroupName' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, GroupRole) == 0x000048, "Member 'FAnimNode_SequenceEvaluator_Standalone::GroupRole' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, Method) == 0x000049, "Member 'FAnimNode_SequenceEvaluator_Standalone::Method' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, bIgnoreForRelevancyTest) == 0x00004A, "Member 'FAnimNode_SequenceEvaluator_Standalone::bIgnoreForRelevancyTest' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, Sequence) == 0x000050, "Member 'FAnimNode_SequenceEvaluator_Standalone::Sequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, ExplicitTime) == 0x000058, "Member 'FAnimNode_SequenceEvaluator_Standalone::ExplicitTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, bUseExplicitFrame) == 0x00005C, "Member 'FAnimNode_SequenceEvaluator_Standalone::bUseExplicitFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, ExplicitFrame) == 0x000060, "Member 'FAnimNode_SequenceEvaluator_Standalone::ExplicitFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, bShouldLoop) == 0x000064, "Member 'FAnimNode_SequenceEvaluator_Standalone::bShouldLoop' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, bTeleportToExplicitTime) == 0x000065, "Member 'FAnimNode_SequenceEvaluator_Standalone::bTeleportToExplicitTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, ReinitializationBehavior) == 0x000066, "Member 'FAnimNode_SequenceEvaluator_Standalone::ReinitializationBehavior' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceEvaluator_Standalone, StartPosition) == 0x000068, "Member 'FAnimNode_SequenceEvaluator_Standalone::StartPosition' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_TwoWayBlend
// 0x00B8 (0x00C8 - 0x0010)
struct FAnimNode_TwoWayBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              A;                                                 // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              B;                                                 // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EAnimAlphaInputType                           AlphaInputType;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAlphaBoolEnabled : 1;                             // 0x0031(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_31_1 : 2;                                   // 0x0031(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bResetChildOnActivation : 1;                       // 0x0031(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bAlwaysUpdateChildren : 1;                         // 0x0031(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FInputAlphaBoolBlend                   AlphaBoolBlend;                                    // 0x0040(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AlphaCurveName;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   AlphaScaleBiasClamp;                               // 0x0090(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_TwoWayBlend) == 0x000008, "Wrong alignment on FAnimNode_TwoWayBlend");
static_assert(sizeof(FAnimNode_TwoWayBlend) == 0x0000C8, "Wrong size on FAnimNode_TwoWayBlend");
static_assert(offsetof(FAnimNode_TwoWayBlend, A) == 0x000010, "Member 'FAnimNode_TwoWayBlend::A' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, B) == 0x000020, "Member 'FAnimNode_TwoWayBlend::B' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, AlphaInputType) == 0x000030, "Member 'FAnimNode_TwoWayBlend::AlphaInputType' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, Alpha) == 0x000034, "Member 'FAnimNode_TwoWayBlend::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, AlphaScaleBias) == 0x000038, "Member 'FAnimNode_TwoWayBlend::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, AlphaBoolBlend) == 0x000040, "Member 'FAnimNode_TwoWayBlend::AlphaBoolBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, AlphaCurveName) == 0x000088, "Member 'FAnimNode_TwoWayBlend::AlphaCurveName' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoWayBlend, AlphaScaleBiasClamp) == 0x000090, "Member 'FAnimNode_TwoWayBlend::AlphaScaleBiasClamp' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimSequencerInstanceProxy
// 0x0460 (0x0BA0 - 0x0740)
struct FAnimSequencerInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_740[0x460];                                    // 0x0740(0x0460)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimSequencerInstanceProxy) == 0x000010, "Wrong alignment on FAnimSequencerInstanceProxy");
static_assert(sizeof(FAnimSequencerInstanceProxy) == 0x000BA0, "Wrong size on FAnimSequencerInstanceProxy");

// ScriptStruct AnimGraphRuntime.BlendListBaseReference
// 0x0000 (0x0010 - 0x0010)
struct FBlendListBaseReference final : public FAnimNodeReference
{
};
static_assert(alignof(FBlendListBaseReference) == 0x000008, "Wrong alignment on FBlendListBaseReference");
static_assert(sizeof(FBlendListBaseReference) == 0x000010, "Wrong size on FBlendListBaseReference");

// ScriptStruct AnimGraphRuntime.BlendSpacePlayerReference
// 0x0000 (0x0010 - 0x0010)
struct FBlendSpacePlayerReference final : public FAnimNodeReference
{
};
static_assert(alignof(FBlendSpacePlayerReference) == 0x000008, "Wrong alignment on FBlendSpacePlayerReference");
static_assert(sizeof(FBlendSpacePlayerReference) == 0x000010, "Wrong size on FBlendSpacePlayerReference");

// ScriptStruct AnimGraphRuntime.AngularRangeLimit
// 0x0040 (0x0040 - 0x0000)
struct FAngularRangeLimit final
{
public:
	struct FVector                                LimitMin;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LimitMax;                                          // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         bone;                                              // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAngularRangeLimit) == 0x000008, "Wrong alignment on FAngularRangeLimit");
static_assert(sizeof(FAngularRangeLimit) == 0x000040, "Wrong size on FAngularRangeLimit");
static_assert(offsetof(FAngularRangeLimit, LimitMin) == 0x000000, "Member 'FAngularRangeLimit::LimitMin' has a wrong offset!");
static_assert(offsetof(FAngularRangeLimit, LimitMax) == 0x000018, "Member 'FAngularRangeLimit::LimitMax' has a wrong offset!");
static_assert(offsetof(FAngularRangeLimit, bone) == 0x000030, "Member 'FAngularRangeLimit::bone' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ApplyLimits
// 0x0020 (0x00E8 - 0x00C8)
struct FAnimNode_ApplyLimits final : public FAnimNode_SkeletalControlBase
{
public:
	TArray<struct FAngularRangeLimit>             AngularRangeLimits;                                // 0x00C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        AngularOffsets;                                    // 0x00D8(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_ApplyLimits) == 0x000008, "Wrong alignment on FAnimNode_ApplyLimits");
static_assert(sizeof(FAnimNode_ApplyLimits) == 0x0000E8, "Wrong size on FAnimNode_ApplyLimits");
static_assert(offsetof(FAnimNode_ApplyLimits, AngularRangeLimits) == 0x0000C8, "Member 'FAnimNode_ApplyLimits::AngularRangeLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_ApplyLimits, AngularOffsets) == 0x0000D8, "Member 'FAnimNode_ApplyLimits::AngularOffsets' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_BoneDrivenController
// 0x0060 (0x0128 - 0x00C8)
struct FAnimNode_BoneDrivenController final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DrivingCurve;                                      // 0x00D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RangeMin;                                          // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RangeMax;                                          // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RemappedMin;                                       // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RemappedMax;                                       // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x0110(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EDrivenDestinationMode                        DestinationMode;                                   // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrivenBoneModificationMode                   ModificationMode;                                  // 0x0121(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentType                                SourceComponent;                                   // 0x0122(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseRange : 1;                                     // 0x0123(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationX : 1;                     // 0x0123(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationY : 1;                     // 0x0123(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationZ : 1;                     // 0x0123(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationX : 1;                        // 0x0123(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationY : 1;                        // 0x0123(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationZ : 1;                        // 0x0123(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleX : 1;                           // 0x0123(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleY : 1;                           // 0x0124(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleZ : 1;                           // 0x0124(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BoneDrivenController) == 0x000008, "Wrong alignment on FAnimNode_BoneDrivenController");
static_assert(sizeof(FAnimNode_BoneDrivenController) == 0x000128, "Wrong size on FAnimNode_BoneDrivenController");
static_assert(offsetof(FAnimNode_BoneDrivenController, SourceBone) == 0x0000C8, "Member 'FAnimNode_BoneDrivenController::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, DrivingCurve) == 0x0000D8, "Member 'FAnimNode_BoneDrivenController::DrivingCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, Multiplier) == 0x0000E0, "Member 'FAnimNode_BoneDrivenController::Multiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RangeMin) == 0x0000E8, "Member 'FAnimNode_BoneDrivenController::RangeMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RangeMax) == 0x0000F0, "Member 'FAnimNode_BoneDrivenController::RangeMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RemappedMin) == 0x0000F8, "Member 'FAnimNode_BoneDrivenController::RemappedMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, RemappedMax) == 0x000100, "Member 'FAnimNode_BoneDrivenController::RemappedMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, ParameterName) == 0x000108, "Member 'FAnimNode_BoneDrivenController::ParameterName' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, TargetBone) == 0x000110, "Member 'FAnimNode_BoneDrivenController::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, DestinationMode) == 0x000120, "Member 'FAnimNode_BoneDrivenController::DestinationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, ModificationMode) == 0x000121, "Member 'FAnimNode_BoneDrivenController::ModificationMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_BoneDrivenController, SourceComponent) == 0x000122, "Member 'FAnimNode_BoneDrivenController::SourceComponent' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CCDIK
// 0x00F8 (0x01C0 - 0x00C8)
struct FAnimNode_CCDIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FVector                                EffectorLocation;                                  // 0x00C8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      EffectorTarget;                                    // 0x00F0(0x0090)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TipBone;                                           // 0x0180(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x0190(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartFromTail;                                    // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationLimit;                              // 0x01A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 RotationLimitPerJoints;                            // 0x01B0(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FAnimNode_CCDIK) == 0x000010, "Wrong alignment on FAnimNode_CCDIK");
static_assert(sizeof(FAnimNode_CCDIK) == 0x0001C0, "Wrong size on FAnimNode_CCDIK");
static_assert(offsetof(FAnimNode_CCDIK, EffectorLocation) == 0x0000C8, "Member 'FAnimNode_CCDIK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, EffectorLocationSpace) == 0x0000E0, "Member 'FAnimNode_CCDIK::EffectorLocationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, EffectorTarget) == 0x0000F0, "Member 'FAnimNode_CCDIK::EffectorTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, TipBone) == 0x000180, "Member 'FAnimNode_CCDIK::TipBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, RootBone) == 0x000190, "Member 'FAnimNode_CCDIK::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, Precision) == 0x0001A0, "Member 'FAnimNode_CCDIK::Precision' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, MaxIterations) == 0x0001A4, "Member 'FAnimNode_CCDIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, bStartFromTail) == 0x0001A8, "Member 'FAnimNode_CCDIK::bStartFromTail' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, bEnableRotationLimit) == 0x0001A9, "Member 'FAnimNode_CCDIK::bEnableRotationLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_CCDIK, RotationLimitPerJoints) == 0x0001B0, "Member 'FAnimNode_CCDIK::RotationLimitPerJoints' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.Constraint
// 0x001C (0x001C - 0x0000)
struct FConstraint final
{
public:
	struct FBoneReference                         TargetBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EConstraintOffsetOption                       OffsetOption;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformConstraintType                      TransformType;                                     // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilterOptionPerAxis                   PerAxis;                                           // 0x0012(0x0003)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x7];                                       // 0x0015(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConstraint) == 0x000004, "Wrong alignment on FConstraint");
static_assert(sizeof(FConstraint) == 0x00001C, "Wrong size on FConstraint");
static_assert(offsetof(FConstraint, TargetBone) == 0x000000, "Member 'FConstraint::TargetBone' has a wrong offset!");
static_assert(offsetof(FConstraint, OffsetOption) == 0x000010, "Member 'FConstraint::OffsetOption' has a wrong offset!");
static_assert(offsetof(FConstraint, TransformType) == 0x000011, "Member 'FConstraint::TransformType' has a wrong offset!");
static_assert(offsetof(FConstraint, PerAxis) == 0x000012, "Member 'FConstraint::PerAxis' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Constraint
// 0x0040 (0x0108 - 0x00C8)
struct FAnimNode_Constraint final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FConstraint>                    ConstraintSetup;                                   // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 ConstraintWeights;                                 // 0x00E8(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Constraint) == 0x000008, "Wrong alignment on FAnimNode_Constraint");
static_assert(sizeof(FAnimNode_Constraint) == 0x000108, "Wrong size on FAnimNode_Constraint");
static_assert(offsetof(FAnimNode_Constraint, BoneToModify) == 0x0000C8, "Member 'FAnimNode_Constraint::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_Constraint, ConstraintSetup) == 0x0000D8, "Member 'FAnimNode_Constraint::ConstraintSetup' has a wrong offset!");
static_assert(offsetof(FAnimNode_Constraint, ConstraintWeights) == 0x0000E8, "Member 'FAnimNode_Constraint::ConstraintWeights' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CopyBone
// 0x0028 (0x00F0 - 0x00C8)
struct FAnimNode_CopyBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCopyTranslation;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyRotation;                                     // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyScale;                                        // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             ControlSpace;                                      // 0x00EB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_CopyBone) == 0x000008, "Wrong alignment on FAnimNode_CopyBone");
static_assert(sizeof(FAnimNode_CopyBone) == 0x0000F0, "Wrong size on FAnimNode_CopyBone");
static_assert(offsetof(FAnimNode_CopyBone, SourceBone) == 0x0000C8, "Member 'FAnimNode_CopyBone::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, TargetBone) == 0x0000D8, "Member 'FAnimNode_CopyBone::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyTranslation) == 0x0000E8, "Member 'FAnimNode_CopyBone::bCopyTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyRotation) == 0x0000E9, "Member 'FAnimNode_CopyBone::bCopyRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, bCopyScale) == 0x0000EA, "Member 'FAnimNode_CopyBone::bCopyScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBone, ControlSpace) == 0x0000EB, "Member 'FAnimNode_CopyBone::ControlSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_CopyBoneDelta
// 0x0030 (0x00F8 - 0x00C8)
struct FAnimNode_CopyBoneDelta final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCopyTranslation;                                  // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyRotation;                                     // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyScale;                                        // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECopyBoneDeltaMode                            CopyMode;                                          // 0x00EB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationMultiplier;                             // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationMultiplier;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMultiplier;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CopyBoneDelta) == 0x000008, "Wrong alignment on FAnimNode_CopyBoneDelta");
static_assert(sizeof(FAnimNode_CopyBoneDelta) == 0x0000F8, "Wrong size on FAnimNode_CopyBoneDelta");
static_assert(offsetof(FAnimNode_CopyBoneDelta, SourceBone) == 0x0000C8, "Member 'FAnimNode_CopyBoneDelta::SourceBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, TargetBone) == 0x0000D8, "Member 'FAnimNode_CopyBoneDelta::TargetBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, bCopyTranslation) == 0x0000E8, "Member 'FAnimNode_CopyBoneDelta::bCopyTranslation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, bCopyRotation) == 0x0000E9, "Member 'FAnimNode_CopyBoneDelta::bCopyRotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, bCopyScale) == 0x0000EA, "Member 'FAnimNode_CopyBoneDelta::bCopyScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, CopyMode) == 0x0000EB, "Member 'FAnimNode_CopyBoneDelta::CopyMode' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, TranslationMultiplier) == 0x0000EC, "Member 'FAnimNode_CopyBoneDelta::TranslationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, RotationMultiplier) == 0x0000F0, "Member 'FAnimNode_CopyBoneDelta::RotationMultiplier' has a wrong offset!");
static_assert(offsetof(FAnimNode_CopyBoneDelta, ScaleMultiplier) == 0x0000F4, "Member 'FAnimNode_CopyBoneDelta::ScaleMultiplier' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Fabrik
// 0x0128 (0x01F0 - 0x00C8)
struct FAnimNode_Fabrik final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             EffectorTransform;                                 // 0x00D0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneSocketTarget                      EffectorTarget;                                    // 0x0130(0x0090)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         TipBone;                                           // 0x01C0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RootBone;                                          // 0x01D0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorTransformSpace;                            // 0x01E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneRotationSource                           EffectorRotationSource;                            // 0x01E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Fabrik) == 0x000010, "Wrong alignment on FAnimNode_Fabrik");
static_assert(sizeof(FAnimNode_Fabrik) == 0x0001F0, "Wrong size on FAnimNode_Fabrik");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTransform) == 0x0000D0, "Member 'FAnimNode_Fabrik::EffectorTransform' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTarget) == 0x000130, "Member 'FAnimNode_Fabrik::EffectorTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, TipBone) == 0x0001C0, "Member 'FAnimNode_Fabrik::TipBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, RootBone) == 0x0001D0, "Member 'FAnimNode_Fabrik::RootBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, Precision) == 0x0001E0, "Member 'FAnimNode_Fabrik::Precision' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, MaxIterations) == 0x0001E4, "Member 'FAnimNode_Fabrik::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorTransformSpace) == 0x0001E8, "Member 'FAnimNode_Fabrik::EffectorTransformSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_Fabrik, EffectorRotationSource) == 0x0001E9, "Member 'FAnimNode_Fabrik::EffectorRotationSource' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_HandIKRetargeting
// 0x0070 (0x0138 - 0x00C8)
struct FAnimNode_HandIKRetargeting final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         RightHandFK;                                       // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHandFK;                                        // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightHandIK;                                       // 0x00E8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftHandIK;                                        // 0x00F8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 IKBonesToMove;                                     // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                PerAxisAlpha;                                      // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandFKWeight;                                      // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_HandIKRetargeting) == 0x000008, "Wrong alignment on FAnimNode_HandIKRetargeting");
static_assert(sizeof(FAnimNode_HandIKRetargeting) == 0x000138, "Wrong size on FAnimNode_HandIKRetargeting");
static_assert(offsetof(FAnimNode_HandIKRetargeting, RightHandFK) == 0x0000C8, "Member 'FAnimNode_HandIKRetargeting::RightHandFK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, LeftHandFK) == 0x0000D8, "Member 'FAnimNode_HandIKRetargeting::LeftHandFK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, RightHandIK) == 0x0000E8, "Member 'FAnimNode_HandIKRetargeting::RightHandIK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, LeftHandIK) == 0x0000F8, "Member 'FAnimNode_HandIKRetargeting::LeftHandIK' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, IKBonesToMove) == 0x000108, "Member 'FAnimNode_HandIKRetargeting::IKBonesToMove' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, PerAxisAlpha) == 0x000118, "Member 'FAnimNode_HandIKRetargeting::PerAxisAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_HandIKRetargeting, HandFKWeight) == 0x000130, "Member 'FAnimNode_HandIKRetargeting::HandFKWeight' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.IKChainLink
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FIKChainLink final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKChainLink) == 0x000008, "Wrong alignment on FIKChainLink");
static_assert(sizeof(FIKChainLink) == 0x000070, "Wrong size on FIKChainLink");

// ScriptStruct AnimGraphRuntime.IKChain
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FIKChain final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKChain) == 0x000008, "Wrong alignment on FIKChain");
static_assert(sizeof(FIKChain) == 0x000050, "Wrong size on FIKChain");

// ScriptStruct AnimGraphRuntime.AnimLegIKDefinition
// 0x0034 (0x0034 - 0x0000)
struct FAnimLegIKDefinition final
{
public:
	struct FBoneReference                         IKFootBone;                                        // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         FKFootBone;                                        // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumBonesInLimb;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRotationAngle;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         FootBoneForwardAxis;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         HingeRotationAxis;                                 // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationLimit;                              // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableKneeTwistCorrection;                        // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TwistOffsetCurveName;                              // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimLegIKDefinition) == 0x000004, "Wrong alignment on FAnimLegIKDefinition");
static_assert(sizeof(FAnimLegIKDefinition) == 0x000034, "Wrong size on FAnimLegIKDefinition");
static_assert(offsetof(FAnimLegIKDefinition, IKFootBone) == 0x000000, "Member 'FAnimLegIKDefinition::IKFootBone' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, FKFootBone) == 0x000010, "Member 'FAnimLegIKDefinition::FKFootBone' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, NumBonesInLimb) == 0x000020, "Member 'FAnimLegIKDefinition::NumBonesInLimb' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, MinRotationAngle) == 0x000024, "Member 'FAnimLegIKDefinition::MinRotationAngle' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, FootBoneForwardAxis) == 0x000028, "Member 'FAnimLegIKDefinition::FootBoneForwardAxis' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, HingeRotationAxis) == 0x000029, "Member 'FAnimLegIKDefinition::HingeRotationAxis' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, bEnableRotationLimit) == 0x00002A, "Member 'FAnimLegIKDefinition::bEnableRotationLimit' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, bEnableKneeTwistCorrection) == 0x00002B, "Member 'FAnimLegIKDefinition::bEnableKneeTwistCorrection' has a wrong offset!");
static_assert(offsetof(FAnimLegIKDefinition, TwistOffsetCurveName) == 0x00002C, "Member 'FAnimLegIKDefinition::TwistOffsetCurveName' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimLegIKData
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FAnimLegIKData final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimLegIKData) == 0x000010, "Wrong alignment on FAnimLegIKData");
static_assert(sizeof(FAnimLegIKData) == 0x0000F0, "Wrong size on FAnimLegIKData");

// ScriptStruct AnimGraphRuntime.AnimNode_LegIK
// 0x0038 (0x0100 - 0x00C8)
struct FAnimNode_LegIK final : public FAnimNode_SkeletalControlBase
{
public:
	float                                         ReachPrecision;                                    // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftPercentLength;                                 // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoftAlpha;                                         // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimLegIKDefinition>           LegsDefinition;                                    // 0x00D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x18];                                      // 0x00E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_LegIK) == 0x000008, "Wrong alignment on FAnimNode_LegIK");
static_assert(sizeof(FAnimNode_LegIK) == 0x000100, "Wrong size on FAnimNode_LegIK");
static_assert(offsetof(FAnimNode_LegIK, ReachPrecision) == 0x0000C8, "Member 'FAnimNode_LegIK::ReachPrecision' has a wrong offset!");
static_assert(offsetof(FAnimNode_LegIK, MaxIterations) == 0x0000CC, "Member 'FAnimNode_LegIK::MaxIterations' has a wrong offset!");
static_assert(offsetof(FAnimNode_LegIK, SoftPercentLength) == 0x0000D0, "Member 'FAnimNode_LegIK::SoftPercentLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_LegIK, SoftAlpha) == 0x0000D4, "Member 'FAnimNode_LegIK::SoftAlpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_LegIK, LegsDefinition) == 0x0000D8, "Member 'FAnimNode_LegIK::LegsDefinition' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_LookAt
// 0x0188 (0x0250 - 0x00C8)
struct FAnimNode_LookAt final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToModify;                                      // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      LookAtTarget;                                      // 0x00E0(0x0090)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LookAtLocation;                                    // 0x0170(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxis                                  LookAt_Axis;                                       // 0x0188(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLookUpAxis;                                    // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInterpolationBlend                           InterpolationType;                                 // 0x01A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAxis                                  LookUp_Axis;                                       // 0x01B0(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LookAtClamp;                                       // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationTime;                                 // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolationTriggerThreashold;                    // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x74];                                     // 0x01DC(0x0074)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_LookAt) == 0x000010, "Wrong alignment on FAnimNode_LookAt");
static_assert(sizeof(FAnimNode_LookAt) == 0x000250, "Wrong size on FAnimNode_LookAt");
static_assert(offsetof(FAnimNode_LookAt, BoneToModify) == 0x0000C8, "Member 'FAnimNode_LookAt::BoneToModify' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtTarget) == 0x0000E0, "Member 'FAnimNode_LookAt::LookAtTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtLocation) == 0x000170, "Member 'FAnimNode_LookAt::LookAtLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAt_Axis) == 0x000188, "Member 'FAnimNode_LookAt::LookAt_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, bUseLookUpAxis) == 0x0001A8, "Member 'FAnimNode_LookAt::bUseLookUpAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationType) == 0x0001A9, "Member 'FAnimNode_LookAt::InterpolationType' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookUp_Axis) == 0x0001B0, "Member 'FAnimNode_LookAt::LookUp_Axis' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, LookAtClamp) == 0x0001D0, "Member 'FAnimNode_LookAt::LookAtClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationTime) == 0x0001D4, "Member 'FAnimNode_LookAt::InterpolationTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_LookAt, InterpolationTriggerThreashold) == 0x0001D8, "Member 'FAnimNode_LookAt::InterpolationTriggerThreashold' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ObserveBone
// 0x0060 (0x0128 - 0x00C8)
struct FAnimNode_ObserveBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         BoneToObserve;                                     // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             DisplaySpace;                                      // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeToRefPose;                                // 0x00D9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Translation;                                       // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_ObserveBone) == 0x000008, "Wrong alignment on FAnimNode_ObserveBone");
static_assert(sizeof(FAnimNode_ObserveBone) == 0x000128, "Wrong size on FAnimNode_ObserveBone");
static_assert(offsetof(FAnimNode_ObserveBone, BoneToObserve) == 0x0000C8, "Member 'FAnimNode_ObserveBone::BoneToObserve' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, DisplaySpace) == 0x0000D8, "Member 'FAnimNode_ObserveBone::DisplaySpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, bRelativeToRefPose) == 0x0000D9, "Member 'FAnimNode_ObserveBone::bRelativeToRefPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Translation) == 0x0000E0, "Member 'FAnimNode_ObserveBone::Translation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Rotation) == 0x0000F8, "Member 'FAnimNode_ObserveBone::Rotation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ObserveBone, Scale) == 0x000110, "Member 'FAnimNode_ObserveBone::Scale' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ResetRoot
// 0x0010 (0x00D8 - 0x00C8)
struct FAnimNode_ResetRoot final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ResetRoot) == 0x000008, "Wrong alignment on FAnimNode_ResetRoot");
static_assert(sizeof(FAnimNode_ResetRoot) == 0x0000D8, "Wrong size on FAnimNode_ResetRoot");

// ScriptStruct AnimGraphRuntime.SimSpaceSettings
// 0x0060 (0x0060 - 0x0000)
struct FSimSpaceSettings final
{
public:
	float                                         WorldAlpha;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityScaleZ;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLinearVelocity;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngularVelocity;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLinearAcceleration;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngularAcceleration;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalLinearDragV;                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalLinearVelocity;                            // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalAngularVelocity;                           // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimSpaceSettings) == 0x000008, "Wrong alignment on FSimSpaceSettings");
static_assert(sizeof(FSimSpaceSettings) == 0x000060, "Wrong size on FSimSpaceSettings");
static_assert(offsetof(FSimSpaceSettings, WorldAlpha) == 0x000000, "Member 'FSimSpaceSettings::WorldAlpha' has a wrong offset!");
static_assert(offsetof(FSimSpaceSettings, VelocityScaleZ) == 0x000004, "Member 'FSimSpaceSettings::VelocityScaleZ' has a wrong offset!");
static_assert(offsetof(FSimSpaceSettings, MaxLinearVelocity) == 0x000008, "Member 'FSimSpaceSettings::MaxLinearVelocity' has a wrong offset!");
static_assert(offsetof(FSimSpaceSettings, MaxAngularVelocity) == 0x00000C, "Member 'FSimSpaceSettings::MaxAngularVelocity' has a wrong offset!");
static_assert(offsetof(FSimSpaceSettings, MaxLinearAcceleration) == 0x000010, "Member 'FSimSpaceSettings::MaxLinearAcceleration' has a wrong offset!");
static_assert(offsetof(FSimSpaceSettings, MaxAngularAcceleration) == 0x000014, "Member 'FSimSpaceSettings::MaxAngularAcceleration' has a wrong offset!");
static_assert(offsetof(FSimSpaceSettings, ExternalLinearDragV) == 0x000018, "Member 'FSimSpaceSettings::ExternalLinearDragV' has a wrong offset!");
static_assert(offsetof(FSimSpaceSettings, ExternalLinearVelocity) == 0x000030, "Member 'FSimSpaceSettings::ExternalLinearVelocity' has a wrong offset!");
static_assert(offsetof(FSimSpaceSettings, ExternalAngularVelocity) == 0x000048, "Member 'FSimSpaceSettings::ExternalAngularVelocity' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_RigidBody
// 0x08A8 (0x0970 - 0x00C8)
struct alignas(0x10) FAnimNode_RigidBody final : public FAnimNode_SkeletalControlBase
{
public:
	class UPhysicsAsset*                          OverridePhysicsAsset;                              // 0x00C8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultToSkeletalMeshPhysicsAsset;                // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x137];                                     // 0x00D1(0x0137)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseLocalLODThresholdOnly;                         // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideWorldGravity;                              // 0x0210(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExternalForce;                                     // 0x0228(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearAccScale;                           // 0x0240(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentLinearVelScale;                           // 0x0258(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ComponentAppliedLinearAccClamp;                    // 0x0270(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSimSpaceSettings                      SimSpaceSettings;                                  // 0x0288(0x0060)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CachedBoundsScale;                                 // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         BaseBoneRef;                                       // 0x02EC(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             OverlapChannel;                                    // 0x02FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESimulationSpace                              SimulationSpace;                                   // 0x02FD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableCollisionBetweenConstraintBodies;     // 0x02FE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExternalClothCollision;                        // 0x02FF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_300[0x1];                                      // 0x0300(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bEnableWorldGeometry : 1;                          // 0x0301(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverrideWorldGravity : 1;                         // 0x0301(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTransferBoneVelocities : 1;                       // 0x0301(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFreezeIncomingPoseOnStart : 1;                    // 0x0301(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bClampLinearTranslationLimitToRefPose : 1;         // 0x0301(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_302[0x2];                                      // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldSpaceMinimumScale;                            // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvaluationResetTime;                               // 0x0308(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30C[0x1];                                      // 0x030C(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESimulationTiming                             SimulationTiming;                                  // 0x030D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30E[0x662];                                    // 0x030E(0x0662)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_RigidBody) == 0x000010, "Wrong alignment on FAnimNode_RigidBody");
static_assert(sizeof(FAnimNode_RigidBody) == 0x000970, "Wrong size on FAnimNode_RigidBody");
static_assert(offsetof(FAnimNode_RigidBody, OverridePhysicsAsset) == 0x0000C8, "Member 'FAnimNode_RigidBody::OverridePhysicsAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bDefaultToSkeletalMeshPhysicsAsset) == 0x0000D0, "Member 'FAnimNode_RigidBody::bDefaultToSkeletalMeshPhysicsAsset' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bUseLocalLODThresholdOnly) == 0x000208, "Member 'FAnimNode_RigidBody::bUseLocalLODThresholdOnly' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, OverrideWorldGravity) == 0x000210, "Member 'FAnimNode_RigidBody::OverrideWorldGravity' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, ExternalForce) == 0x000228, "Member 'FAnimNode_RigidBody::ExternalForce' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, ComponentLinearAccScale) == 0x000240, "Member 'FAnimNode_RigidBody::ComponentLinearAccScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, ComponentLinearVelScale) == 0x000258, "Member 'FAnimNode_RigidBody::ComponentLinearVelScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, ComponentAppliedLinearAccClamp) == 0x000270, "Member 'FAnimNode_RigidBody::ComponentAppliedLinearAccClamp' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, SimSpaceSettings) == 0x000288, "Member 'FAnimNode_RigidBody::SimSpaceSettings' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, CachedBoundsScale) == 0x0002E8, "Member 'FAnimNode_RigidBody::CachedBoundsScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, BaseBoneRef) == 0x0002EC, "Member 'FAnimNode_RigidBody::BaseBoneRef' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, OverlapChannel) == 0x0002FC, "Member 'FAnimNode_RigidBody::OverlapChannel' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, SimulationSpace) == 0x0002FD, "Member 'FAnimNode_RigidBody::SimulationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies) == 0x0002FE, "Member 'FAnimNode_RigidBody::bForceDisableCollisionBetweenConstraintBodies' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, bUseExternalClothCollision) == 0x0002FF, "Member 'FAnimNode_RigidBody::bUseExternalClothCollision' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, WorldSpaceMinimumScale) == 0x000304, "Member 'FAnimNode_RigidBody::WorldSpaceMinimumScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, EvaluationResetTime) == 0x000308, "Member 'FAnimNode_RigidBody::EvaluationResetTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_RigidBody, SimulationTiming) == 0x00030D, "Member 'FAnimNode_RigidBody::SimulationTiming' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_ScaleChainLength
// 0x0078 (0x0088 - 0x0010)
struct FAnimNode_ScaleChainLength final : public FAnimNode_Base
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0010(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DefaultChainLength;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainStartBone;                                    // 0x0024(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         ChainEndBone;                                      // 0x0034(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputScaleBias                        AlphaScaleBias;                                    // 0x0068(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EScaleChainInitialLength                      ChainInitialLength;                                // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x17];                                      // 0x0071(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_ScaleChainLength) == 0x000008, "Wrong alignment on FAnimNode_ScaleChainLength");
static_assert(sizeof(FAnimNode_ScaleChainLength) == 0x000088, "Wrong size on FAnimNode_ScaleChainLength");
static_assert(offsetof(FAnimNode_ScaleChainLength, InputPose) == 0x000010, "Member 'FAnimNode_ScaleChainLength::InputPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, DefaultChainLength) == 0x000020, "Member 'FAnimNode_ScaleChainLength::DefaultChainLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, ChainStartBone) == 0x000024, "Member 'FAnimNode_ScaleChainLength::ChainStartBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, ChainEndBone) == 0x000034, "Member 'FAnimNode_ScaleChainLength::ChainEndBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, TargetLocation) == 0x000048, "Member 'FAnimNode_ScaleChainLength::TargetLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, Alpha) == 0x000060, "Member 'FAnimNode_ScaleChainLength::Alpha' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, AlphaScaleBias) == 0x000068, "Member 'FAnimNode_ScaleChainLength::AlphaScaleBias' has a wrong offset!");
static_assert(offsetof(FAnimNode_ScaleChainLength, ChainInitialLength) == 0x000070, "Member 'FAnimNode_ScaleChainLength::ChainInitialLength' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.SplineIKCachedBoneData
// 0x0014 (0x0014 - 0x0000)
struct FSplineIKCachedBoneData final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         RefSkeletonIndex;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplineIKCachedBoneData) == 0x000004, "Wrong alignment on FSplineIKCachedBoneData");
static_assert(sizeof(FSplineIKCachedBoneData) == 0x000014, "Wrong size on FSplineIKCachedBoneData");
static_assert(offsetof(FSplineIKCachedBoneData, bone) == 0x000000, "Member 'FSplineIKCachedBoneData::bone' has a wrong offset!");
static_assert(offsetof(FSplineIKCachedBoneData, RefSkeletonIndex) == 0x000010, "Member 'FSplineIKCachedBoneData::RefSkeletonIndex' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SplineIK
// 0x01A8 (0x0270 - 0x00C8)
struct FAnimNode_SplineIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         StartBone;                                         // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         EndBone;                                           // 0x00D8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ESplineBoneAxis                               BoneAxis;                                          // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCalculateSpline;                              // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointCount;                                        // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     ControlPoints;                                     // 0x00F0(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistStart;                                        // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistEnd;                                          // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlphaBlend                            TwistBlend;                                        // 0x0110(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Stretch;                                           // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x128];                                    // 0x0148(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SplineIK) == 0x000008, "Wrong alignment on FAnimNode_SplineIK");
static_assert(sizeof(FAnimNode_SplineIK) == 0x000270, "Wrong size on FAnimNode_SplineIK");
static_assert(offsetof(FAnimNode_SplineIK, StartBone) == 0x0000C8, "Member 'FAnimNode_SplineIK::StartBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, EndBone) == 0x0000D8, "Member 'FAnimNode_SplineIK::EndBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, BoneAxis) == 0x0000E8, "Member 'FAnimNode_SplineIK::BoneAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, bAutoCalculateSpline) == 0x0000E9, "Member 'FAnimNode_SplineIK::bAutoCalculateSpline' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, PointCount) == 0x0000EC, "Member 'FAnimNode_SplineIK::PointCount' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, ControlPoints) == 0x0000F0, "Member 'FAnimNode_SplineIK::ControlPoints' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, Roll) == 0x000100, "Member 'FAnimNode_SplineIK::Roll' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, TwistStart) == 0x000104, "Member 'FAnimNode_SplineIK::TwistStart' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, TwistEnd) == 0x000108, "Member 'FAnimNode_SplineIK::TwistEnd' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, TwistBlend) == 0x000110, "Member 'FAnimNode_SplineIK::TwistBlend' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, Stretch) == 0x000140, "Member 'FAnimNode_SplineIK::Stretch' has a wrong offset!");
static_assert(offsetof(FAnimNode_SplineIK, Offset) == 0x000144, "Member 'FAnimNode_SplineIK::Offset' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_SpringBone
// 0x00A0 (0x0168 - 0x00C8)
struct FAnimNode_SpringBone final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SpringBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	double                                        MaxDisplacement;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SpringStiffness;                                   // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SpringDamping;                                     // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ErrorResetThresh;                                  // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x6C];                                      // 0x00F8(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bLimitDisplacement : 1;                            // 0x0164(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTranslateX : 1;                                   // 0x0164(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTranslateY : 1;                                   // 0x0164(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTranslateZ : 1;                                   // 0x0164(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRotateX : 1;                                      // 0x0164(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRotateY : 1;                                      // 0x0164(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRotateZ : 1;                                      // 0x0164(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SpringBone) == 0x000008, "Wrong alignment on FAnimNode_SpringBone");
static_assert(sizeof(FAnimNode_SpringBone) == 0x000168, "Wrong size on FAnimNode_SpringBone");
static_assert(offsetof(FAnimNode_SpringBone, SpringBone) == 0x0000C8, "Member 'FAnimNode_SpringBone::SpringBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, MaxDisplacement) == 0x0000D8, "Member 'FAnimNode_SpringBone::MaxDisplacement' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, SpringStiffness) == 0x0000E0, "Member 'FAnimNode_SpringBone::SpringStiffness' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, SpringDamping) == 0x0000E8, "Member 'FAnimNode_SpringBone::SpringDamping' has a wrong offset!");
static_assert(offsetof(FAnimNode_SpringBone, ErrorResetThresh) == 0x0000F0, "Member 'FAnimNode_SpringBone::ErrorResetThresh' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RotationLimit
// 0x0030 (0x0030 - 0x0000)
struct FRotationLimit final
{
public:
	struct FVector                                LimitMin;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LimitMax;                                          // 0x0018(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotationLimit) == 0x000008, "Wrong alignment on FRotationLimit");
static_assert(sizeof(FRotationLimit) == 0x000030, "Wrong size on FRotationLimit");
static_assert(offsetof(FRotationLimit, LimitMin) == 0x000000, "Member 'FRotationLimit::LimitMin' has a wrong offset!");
static_assert(offsetof(FRotationLimit, LimitMax) == 0x000018, "Member 'FRotationLimit::LimitMax' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_Trail
// 0x01D8 (0x02A0 - 0x00C8)
struct alignas(0x10) FAnimNode_Trail final : public FAnimNode_SkeletalControlBase
{
public:
	uint8                                         Pad_C8[0x68];                                      // 0x00C8(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneReference                         TrailBone;                                         // 0x0130(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ChainLength;                                       // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         ChainBoneAxis;                                     // 0x0144(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInvertChainBoneAxis : 1;                          // 0x0145(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLimitStretch : 1;                                 // 0x0145(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLimitRotation : 1;                                // 0x0145(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePlanarLimit : 1;                               // 0x0145(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bActorSpaceFakeVel : 1;                            // 0x0145(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bReorientParentToChild : 1;                        // 0x0145(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDeltaTime;                                      // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RelaxationSpeedScale;                              // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     TrailRelaxationSpeed;                              // 0x0150(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FInputScaleBiasClamp                   RelaxationSpeedScaleInputProcessor;                // 0x01D8(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FRotationLimit>                 RotationLimits;                                    // 0x0208(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        RotationOffsets;                                   // 0x0218(0x0010)(Edit, BlueprintVisible, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimPhysPlanarLimit>           PlanarLimits;                                      // 0x0228(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StretchLimit;                                      // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FakeVelocity;                                      // 0x0240(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         BaseJoint;                                         // 0x0258(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LastBoneRotationAnimAlphaBlend;                    // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C[0x34];                                     // 0x026C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_Trail) == 0x000010, "Wrong alignment on FAnimNode_Trail");
static_assert(sizeof(FAnimNode_Trail) == 0x0002A0, "Wrong size on FAnimNode_Trail");
static_assert(offsetof(FAnimNode_Trail, TrailBone) == 0x000130, "Member 'FAnimNode_Trail::TrailBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, ChainLength) == 0x000140, "Member 'FAnimNode_Trail::ChainLength' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, ChainBoneAxis) == 0x000144, "Member 'FAnimNode_Trail::ChainBoneAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, MaxDeltaTime) == 0x000148, "Member 'FAnimNode_Trail::MaxDeltaTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, RelaxationSpeedScale) == 0x00014C, "Member 'FAnimNode_Trail::RelaxationSpeedScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, TrailRelaxationSpeed) == 0x000150, "Member 'FAnimNode_Trail::TrailRelaxationSpeed' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, RelaxationSpeedScaleInputProcessor) == 0x0001D8, "Member 'FAnimNode_Trail::RelaxationSpeedScaleInputProcessor' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, RotationLimits) == 0x000208, "Member 'FAnimNode_Trail::RotationLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, RotationOffsets) == 0x000218, "Member 'FAnimNode_Trail::RotationOffsets' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, PlanarLimits) == 0x000228, "Member 'FAnimNode_Trail::PlanarLimits' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, StretchLimit) == 0x000238, "Member 'FAnimNode_Trail::StretchLimit' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, FakeVelocity) == 0x000240, "Member 'FAnimNode_Trail::FakeVelocity' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, BaseJoint) == 0x000258, "Member 'FAnimNode_Trail::BaseJoint' has a wrong offset!");
static_assert(offsetof(FAnimNode_Trail, LastBoneRotationAnimAlphaBlend) == 0x000268, "Member 'FAnimNode_Trail::LastBoneRotationAnimAlphaBlend' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.ReferenceBoneFrame
// 0x0030 (0x0030 - 0x0000)
struct FReferenceBoneFrame final
{
public:
	struct FBoneReference                         bone;                                              // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAxis                                  Axis;                                              // 0x0010(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReferenceBoneFrame) == 0x000008, "Wrong alignment on FReferenceBoneFrame");
static_assert(sizeof(FReferenceBoneFrame) == 0x000030, "Wrong size on FReferenceBoneFrame");
static_assert(offsetof(FReferenceBoneFrame, bone) == 0x000000, "Member 'FReferenceBoneFrame::bone' has a wrong offset!");
static_assert(offsetof(FReferenceBoneFrame, Axis) == 0x000010, "Member 'FReferenceBoneFrame::Axis' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_TwistCorrectiveNode
// 0x00A0 (0x0168 - 0x00C8)
struct FAnimNode_TwistCorrectiveNode final : public FAnimNode_SkeletalControlBase
{
public:
	struct FReferenceBoneFrame                    BaseFrame;                                         // 0x00C8(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FReferenceBoneFrame                    TwistFrame;                                        // 0x00F8(0x0030)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAxis                                  TwistPlaneNormalAxis;                              // 0x0128(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMin;                                       // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMax;                                       // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x0154(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0xC];                                      // 0x015C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_TwistCorrectiveNode) == 0x000008, "Wrong alignment on FAnimNode_TwistCorrectiveNode");
static_assert(sizeof(FAnimNode_TwistCorrectiveNode) == 0x000168, "Wrong size on FAnimNode_TwistCorrectiveNode");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, BaseFrame) == 0x0000C8, "Member 'FAnimNode_TwistCorrectiveNode::BaseFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, TwistFrame) == 0x0000F8, "Member 'FAnimNode_TwistCorrectiveNode::TwistFrame' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis) == 0x000128, "Member 'FAnimNode_TwistCorrectiveNode::TwistPlaneNormalAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, RangeMax) == 0x000148, "Member 'FAnimNode_TwistCorrectiveNode::RangeMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, RemappedMin) == 0x00014C, "Member 'FAnimNode_TwistCorrectiveNode::RemappedMin' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, RemappedMax) == 0x000150, "Member 'FAnimNode_TwistCorrectiveNode::RemappedMax' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwistCorrectiveNode, CurveName) == 0x000154, "Member 'FAnimNode_TwistCorrectiveNode::CurveName' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.AnimNode_TwoBoneIK
// 0x01B8 (0x0280 - 0x00C8)
struct FAnimNode_TwoBoneIK final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         IKBone;                                            // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	double                                        StartStretchRatio;                                 // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxStretchScale;                                   // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectorLocation;                                  // 0x00E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      EffectorTarget;                                    // 0x0110(0x0090)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                JointTargetLocation;                               // 0x01A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoneSocketTarget                      JointTarget;                                       // 0x01C0(0x0090)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FAxis                                  TwistAxis;                                         // 0x0250(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x0270(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneControlSpace                             JointTargetLocationSpace;                          // 0x0271(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowStretching : 1;                              // 0x0272(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bTakeRotationFromEffectorSpace : 1;                // 0x0272(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMaintainEffectorRelRot : 1;                       // 0x0272(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAllowTwist : 1;                                   // 0x0272(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_273[0xD];                                      // 0x0273(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_TwoBoneIK) == 0x000010, "Wrong alignment on FAnimNode_TwoBoneIK");
static_assert(sizeof(FAnimNode_TwoBoneIK) == 0x000280, "Wrong size on FAnimNode_TwoBoneIK");
static_assert(offsetof(FAnimNode_TwoBoneIK, IKBone) == 0x0000C8, "Member 'FAnimNode_TwoBoneIK::IKBone' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, StartStretchRatio) == 0x0000D8, "Member 'FAnimNode_TwoBoneIK::StartStretchRatio' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, MaxStretchScale) == 0x0000E0, "Member 'FAnimNode_TwoBoneIK::MaxStretchScale' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorLocation) == 0x0000E8, "Member 'FAnimNode_TwoBoneIK::EffectorLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorTarget) == 0x000110, "Member 'FAnimNode_TwoBoneIK::EffectorTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTargetLocation) == 0x0001A0, "Member 'FAnimNode_TwoBoneIK::JointTargetLocation' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTarget) == 0x0001C0, "Member 'FAnimNode_TwoBoneIK::JointTarget' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, TwistAxis) == 0x000250, "Member 'FAnimNode_TwoBoneIK::TwistAxis' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, EffectorLocationSpace) == 0x000270, "Member 'FAnimNode_TwoBoneIK::EffectorLocationSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_TwoBoneIK, JointTargetLocationSpace) == 0x000271, "Member 'FAnimNode_TwoBoneIK::JointTargetLocationSpace' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.IKFootPelvisPullDownSolver
// 0x0080 (0x0080 - 0x0000)
struct FIKFootPelvisPullDownSolver final
{
public:
	struct FVectorRK4SpringInterpolator           PelvisAdjustmentInterp;                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x58];                                       // 0x0008(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PelvisAdjustmentInterpAlpha;                       // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PelvisAdjustmentMaxDistance;                       // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        PelvisAdjustmentErrorTolerance;                    // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PelvisAdjustmentMaxIter;                           // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIKFootPelvisPullDownSolver) == 0x000008, "Wrong alignment on FIKFootPelvisPullDownSolver");
static_assert(sizeof(FIKFootPelvisPullDownSolver) == 0x000080, "Wrong size on FIKFootPelvisPullDownSolver");
static_assert(offsetof(FIKFootPelvisPullDownSolver, PelvisAdjustmentInterp) == 0x000000, "Member 'FIKFootPelvisPullDownSolver::PelvisAdjustmentInterp' has a wrong offset!");
static_assert(offsetof(FIKFootPelvisPullDownSolver, PelvisAdjustmentInterpAlpha) == 0x000060, "Member 'FIKFootPelvisPullDownSolver::PelvisAdjustmentInterpAlpha' has a wrong offset!");
static_assert(offsetof(FIKFootPelvisPullDownSolver, PelvisAdjustmentMaxDistance) == 0x000068, "Member 'FIKFootPelvisPullDownSolver::PelvisAdjustmentMaxDistance' has a wrong offset!");
static_assert(offsetof(FIKFootPelvisPullDownSolver, PelvisAdjustmentErrorTolerance) == 0x000070, "Member 'FIKFootPelvisPullDownSolver::PelvisAdjustmentErrorTolerance' has a wrong offset!");
static_assert(offsetof(FIKFootPelvisPullDownSolver, PelvisAdjustmentMaxIter) == 0x000078, "Member 'FIKFootPelvisPullDownSolver::PelvisAdjustmentMaxIter' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.WarpingVectorValue
// 0x0020 (0x0020 - 0x0000)
struct FWarpingVectorValue final
{
public:
	EWarpingVectorMode                            Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWarpingVectorValue) == 0x000008, "Wrong alignment on FWarpingVectorValue");
static_assert(sizeof(FWarpingVectorValue) == 0x000020, "Wrong size on FWarpingVectorValue");
static_assert(offsetof(FWarpingVectorValue, Mode) == 0x000000, "Member 'FWarpingVectorValue::Mode' has a wrong offset!");
static_assert(offsetof(FWarpingVectorValue, Value) == 0x000008, "Member 'FWarpingVectorValue::Value' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.LayeredBoneBlendReference
// 0x0000 (0x0010 - 0x0010)
struct FLayeredBoneBlendReference final : public FAnimNodeReference
{
};
static_assert(alignof(FLayeredBoneBlendReference) == 0x000008, "Wrong alignment on FLayeredBoneBlendReference");
static_assert(sizeof(FLayeredBoneBlendReference) == 0x000010, "Wrong size on FLayeredBoneBlendReference");

// ScriptStruct AnimGraphRuntime.LinkedAnimGraphReference
// 0x0000 (0x0010 - 0x0010)
struct FLinkedAnimGraphReference final : public FAnimNodeReference
{
};
static_assert(alignof(FLinkedAnimGraphReference) == 0x000008, "Wrong alignment on FLinkedAnimGraphReference");
static_assert(sizeof(FLinkedAnimGraphReference) == 0x000010, "Wrong size on FLinkedAnimGraphReference");

// ScriptStruct AnimGraphRuntime.MirrorAnimNodeReference
// 0x0000 (0x0010 - 0x0010)
struct FMirrorAnimNodeReference final : public FAnimNodeReference
{
};
static_assert(alignof(FMirrorAnimNodeReference) == 0x000008, "Wrong alignment on FMirrorAnimNodeReference");
static_assert(sizeof(FMirrorAnimNodeReference) == 0x000010, "Wrong size on FMirrorAnimNodeReference");

// ScriptStruct AnimGraphRuntime.ModifyCurveAnimNodeReference
// 0x0000 (0x0010 - 0x0010)
struct FModifyCurveAnimNodeReference final : public FAnimNodeReference
{
};
static_assert(alignof(FModifyCurveAnimNodeReference) == 0x000008, "Wrong alignment on FModifyCurveAnimNodeReference");
static_assert(sizeof(FModifyCurveAnimNodeReference) == 0x000010, "Wrong size on FModifyCurveAnimNodeReference");

// ScriptStruct AnimGraphRuntime.RBFEntry
// 0x0010 (0x0010 - 0x0000)
struct FRBFEntry
{
public:
	TArray<float>                                 Values;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRBFEntry) == 0x000008, "Wrong alignment on FRBFEntry");
static_assert(sizeof(FRBFEntry) == 0x000010, "Wrong size on FRBFEntry");
static_assert(offsetof(FRBFEntry, Values) == 0x000000, "Member 'FRBFEntry::Values' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.RBFTarget
// 0x0090 (0x00A0 - 0x0010)
struct FRBFTarget final : public FRBFEntry
{
public:
	float                                         ScaleFactor;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCustomCurve;                                 // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRichCurve                             CustomCurve;                                       // 0x0018(0x0080)(Edit, NativeAccessSpecifierPublic)
	ERBFDistanceMethod                            DistanceMethod;                                    // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBFFunctionType                              FunctionType;                                      // 0x0099(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRBFTarget) == 0x000008, "Wrong alignment on FRBFTarget");
static_assert(sizeof(FRBFTarget) == 0x0000A0, "Wrong size on FRBFTarget");
static_assert(offsetof(FRBFTarget, ScaleFactor) == 0x000010, "Member 'FRBFTarget::ScaleFactor' has a wrong offset!");
static_assert(offsetof(FRBFTarget, bApplyCustomCurve) == 0x000014, "Member 'FRBFTarget::bApplyCustomCurve' has a wrong offset!");
static_assert(offsetof(FRBFTarget, CustomCurve) == 0x000018, "Member 'FRBFTarget::CustomCurve' has a wrong offset!");
static_assert(offsetof(FRBFTarget, DistanceMethod) == 0x000098, "Member 'FRBFTarget::DistanceMethod' has a wrong offset!");
static_assert(offsetof(FRBFTarget, FunctionType) == 0x000099, "Member 'FRBFTarget::FunctionType' has a wrong offset!");

// ScriptStruct AnimGraphRuntime.SequenceEvaluatorReference
// 0x0000 (0x0010 - 0x0010)
struct FSequenceEvaluatorReference final : public FAnimNodeReference
{
};
static_assert(alignof(FSequenceEvaluatorReference) == 0x000008, "Wrong alignment on FSequenceEvaluatorReference");
static_assert(sizeof(FSequenceEvaluatorReference) == 0x000010, "Wrong size on FSequenceEvaluatorReference");

// ScriptStruct AnimGraphRuntime.SequencePlayerReference
// 0x0000 (0x0010 - 0x0010)
struct FSequencePlayerReference final : public FAnimNodeReference
{
};
static_assert(alignof(FSequencePlayerReference) == 0x000008, "Wrong alignment on FSequencePlayerReference");
static_assert(sizeof(FSequencePlayerReference) == 0x000010, "Wrong size on FSequencePlayerReference");

// ScriptStruct AnimGraphRuntime.SkeletalControlReference
// 0x0000 (0x0010 - 0x0010)
struct FSkeletalControlReference final : public FAnimNodeReference
{
};
static_assert(alignof(FSkeletalControlReference) == 0x000008, "Wrong alignment on FSkeletalControlReference");
static_assert(sizeof(FSkeletalControlReference) == 0x000010, "Wrong size on FSkeletalControlReference");

}

