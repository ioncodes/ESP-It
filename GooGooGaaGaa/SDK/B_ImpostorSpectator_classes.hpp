#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ImpostorSpectator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "B_Spectator_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ImpostorSpectator.B_ImpostorSpectator_C
// 0x0030 (0x04B0 - 0x0480)
class AB_ImpostorSpectator_C final : public AB_Spectator_C
{
public:
	uint8                                         Pad_472[0x6];                                      // 0x0472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_B_ImpostorSpectator_C;              // 0x0478(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UB_BaseSkill_C*                         PrimarySkill;                                      // 0x0480(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UB_BaseSkill_C*                         ActionSkill;                                       // 0x0488(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          FireDown;                                          // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FireCooldown;                                      // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_BaseSkill_C*                         SpecialUtilitySkill;                               // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ClientPossessed(class APlayerController* PlayerController);
	void ExecuteUbergraph_B_ImpostorSpectator(int32 EntryPoint);
	void InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpAxisEvt_MoveUp_K2Node_InputAxisEvent_0(float AxisValue);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveUnpossessed(class AController* OldController);
	void ShowSuitableSelectionScreen();
	void TickHUD();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ImpostorSpectator_C">();
	}
	static class AB_ImpostorSpectator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_ImpostorSpectator_C>();
	}
};
static_assert(alignof(AB_ImpostorSpectator_C) == 0x000010, "Wrong alignment on AB_ImpostorSpectator_C");
static_assert(sizeof(AB_ImpostorSpectator_C) == 0x0004B0, "Wrong size on AB_ImpostorSpectator_C");
static_assert(offsetof(AB_ImpostorSpectator_C, UberGraphFrame_B_ImpostorSpectator_C) == 0x000478, "Member 'AB_ImpostorSpectator_C::UberGraphFrame_B_ImpostorSpectator_C' has a wrong offset!");
static_assert(offsetof(AB_ImpostorSpectator_C, PrimarySkill) == 0x000480, "Member 'AB_ImpostorSpectator_C::PrimarySkill' has a wrong offset!");
static_assert(offsetof(AB_ImpostorSpectator_C, ActionSkill) == 0x000488, "Member 'AB_ImpostorSpectator_C::ActionSkill' has a wrong offset!");
static_assert(offsetof(AB_ImpostorSpectator_C, FireDown) == 0x000490, "Member 'AB_ImpostorSpectator_C::FireDown' has a wrong offset!");
static_assert(offsetof(AB_ImpostorSpectator_C, FireCooldown) == 0x000498, "Member 'AB_ImpostorSpectator_C::FireCooldown' has a wrong offset!");
static_assert(offsetof(AB_ImpostorSpectator_C, SpecialUtilitySkill) == 0x0004A0, "Member 'AB_ImpostorSpectator_C::SpecialUtilitySkill' has a wrong offset!");

}

