#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_Chicken

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_Chicken.AB_Chicken_C
// 0x0D70 (0x10C0 - 0x0350)
class UAB_Chicken_C final : public UAnimInstance
{
public:
	uint8                                         Pad_4B71[0x8];                                     // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0388(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x03B0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03D8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0400(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0428(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0470(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0490(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x04D8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x04F8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0540(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0560(0x00C8)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0628(0x0020)()
	uint8                                         Pad_4B72[0x8];                                     // 0x0648(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_AnimDynamics                 AnimGraphNode_AnimDynamics_1;                      // 0x0650(0x0520)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0B70(0x0020)()
	struct FAnimNode_AnimDynamics                 AnimGraphNode_AnimDynamics;                        // 0x0B90(0x0520)()
	bool                                          Running;                                           // 0x10B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Alarm;                                             // 0x10B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_AB_Chicken(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_Chicken_C">();
	}
	static class UAB_Chicken_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_Chicken_C>();
	}
};
static_assert(alignof(UAB_Chicken_C) == 0x000010, "Wrong alignment on UAB_Chicken_C");
static_assert(sizeof(UAB_Chicken_C) == 0x0010C0, "Wrong size on UAB_Chicken_C");
static_assert(offsetof(UAB_Chicken_C, UberGraphFrame) == 0x000350, "Member 'UAB_Chicken_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UAB_Chicken_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UAB_Chicken_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_Root) == 0x000368, "Member 'UAB_Chicken_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_TransitionResult_3) == 0x000388, "Member 'UAB_Chicken_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_TransitionResult_2) == 0x0003B0, "Member 'UAB_Chicken_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_TransitionResult_1) == 0x0003D8, "Member 'UAB_Chicken_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_TransitionResult) == 0x000400, "Member 'UAB_Chicken_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_SequencePlayer_2) == 0x000428, "Member 'UAB_Chicken_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_StateResult_2) == 0x000470, "Member 'UAB_Chicken_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_SequencePlayer_1) == 0x000490, "Member 'UAB_Chicken_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_StateResult_1) == 0x0004D8, "Member 'UAB_Chicken_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_SequencePlayer) == 0x0004F8, "Member 'UAB_Chicken_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_StateResult) == 0x000540, "Member 'UAB_Chicken_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_StateMachine) == 0x000560, "Member 'UAB_Chicken_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_LocalToComponentSpace) == 0x000628, "Member 'UAB_Chicken_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_AnimDynamics_1) == 0x000650, "Member 'UAB_Chicken_C::AnimGraphNode_AnimDynamics_1' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_ComponentToLocalSpace) == 0x000B70, "Member 'UAB_Chicken_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, AnimGraphNode_AnimDynamics) == 0x000B90, "Member 'UAB_Chicken_C::AnimGraphNode_AnimDynamics' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, Running) == 0x0010B0, "Member 'UAB_Chicken_C::Running' has a wrong offset!");
static_assert(offsetof(UAB_Chicken_C, Alarm) == 0x0010B1, "Member 'UAB_Chicken_C::Alarm' has a wrong offset!");

}

