#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PropPawnPhysics

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PropWitchHuntModule_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_PropPawnPhysics.B_PropPawnPhysics_C
// 0x02A0 (0x05C8 - 0x0328)
class AB_PropPawnPhysics_C : public APropPawnPhysics
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   AimAssistTarget;                                   // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_ManaComponent_C*                     B_ManaComponent;                                   // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_KillRelictDropper_C*                 B_KillRelictDropper;                               // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CommunicationSound;                                // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_TrailEffect_C*                       B_TrailEffect;                                     // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1;                                           // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       PlayerName;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_DamageEffect_C*                      DamageEffect;                                      // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_KillPlayerGameModeHandler_C*         KillWitchGameModeHandler;                          // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_KillRagdoll_C*                       KillRagdoll;                                       // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_ActorEvents_C*                       WhichHuntActorEvents;                              // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_DamageSound_C*                       DamageSound;                                       // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_DamageHandler_C*                     DamageHandler;                                     // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_PhysicalSound_C*                     PhysicalSound;                                     // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        BaseTurnRate;                                      // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseLookUpRate;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PropName;                                          // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 TargetProp;                                        // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ShrinkSound;                                       // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              GrowSound;                                         // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TransformRange;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ControllingProp;                                   // 0x03F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PropTemplate;                                      // 0x0400(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStabilizing;                                     // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchIsOnCooldown;                                // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F5B[0x6];                                     // 0x040A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_BaseWitchSkill_C*                    SpecialUtilitySkill;                               // 0x0410(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UB_BaseWitchSkill_C*                    SpecialMovementSkill;                              // 0x0418(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         DispelDebuff;                                      // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F5C[0x4];                                     // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AB_VisualIntepolator_C*>         CurrentVisualChilds;                               // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                LastTravelLocation;                                // 0x0438(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TauntBudget;                                       // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTaunts;                                         // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              QuestionSound;                                     // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              SpeakSound;                                        // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SlowTime;                                          // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimePropData                       LastRuntimePropDataNew;                            // 0x0470(0x0038)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor)
	class AB_Witch_C*                             SpawnedWitch;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTransformingBack;                                // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F5D[0x7];                                     // 0x04B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransformBackTime;                                 // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FPTargetArmLength;                                 // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FPSocketOffset;                                    // 0x04C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FPTargetOffset;                                    // 0x04E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TPTargetOffset;                                    // 0x04F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ManaDrainDebuff;                                   // 0x0510(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F5E[0x4];                                     // 0x0514(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SettingsSave_C*                      SettingsSave;                                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UB_MenuUIManager_C*                     MenuUIManager;                                     // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableFire;                                       // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F5F[0x7];                                     // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 PossessedProp;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       PossessingPlayer;                                  // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentPropId;                                     // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F60[0x4];                                     // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastControllingProp;                               // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      TransformEffectParticle;                           // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        TPArmLength;                                       // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTPArmLength;                                    // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TPSocketOffset;                                    // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZoomSpeed;                                         // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastCameraProp;                                    // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AB_AchievementTestVolume_C*             LastPhotoTarget;                                   // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleModeActive;                                  // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F61[0x7];                                     // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetArmLength;                                   // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PropMaxHealth;                                     // 0x0598(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MovementAllowed;                                   // 0x05A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HiddenToHunters;                                   // 0x05A1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3F62[0x6];                                     // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OriginalStaticMeshMaterials;                       // 0x05A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInterface*>             OriginalSkeletalMeshMaterials;                     // 0x05B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ClientPossessed();
	void SetCameraSettings();
	void SetSpringArmProperties(bool FirstPerson);
	void SetWitch(const struct FTransform& Transform);
	void TickVisuals();
	void TransformEffect(const struct FSRuntimePropData& LastRuntimePropData, const struct FSRuntimePropData& CurrentRuntimePropData);
	void ExecuteUbergraph_B_PropPawnPhysics(int32 EntryPoint);
	void GetCurrentController(class AController** Param_Controller);
	void GetAttachComponent(class USceneComponent** Component);
	void OnControllingPropSleep(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void UnhideFromOtherPlayers();
	void HideToOtherPlayers();
	void SetMeshVisibility();
	void RulesUpdated();
	void StartZoom(double MouseWheelAxis);
	void UpdateTPArmLength();
	void SetOriginalTPArmLength();
	void GetMenuUIManager(class UB_MenuUIManager_C** Param_MenuUIManager);
	void GetSettingsSave(class UB_SettingsSave_C** Param_SettingsSave);
	void StopStabilize();
	void StartStabilize();
	void TickManaDrainDebuff();
	void SetVisualChildVisibility(bool FirstPerson, bool* DetectedInvalidChildren);
	void SetControllingPropVisibility(bool FirstPerson);
	void ToggleCameraView();
	void PostProcessTeleport();
	void ProcessTeleport();
	void TickTransformBack();
	void RecalculateHP();
	void SwitchPropBack();
	void TransformTest(const struct FTransform& SpawnTransform, TArray<class AActor*>& IgnoreActors, bool* ValidTransform, struct FTransform* Transform);
	void OffsetPosition(const struct FTransform& WantedSpawnTransform, TArray<class AActor*>& IgnoreActors, bool* ValidTransform, struct FTransform* Transform);
	void Slow(double Time);
	void IsAnySkillActive(bool* AnySkillActive);
	void TickSurvivalTime();
	void DecreaseTauntBudget();
	void PlayCommunicationSound(class USoundCue* SoundToPlay);
	void ShowScoreStats();
	void UpdateTravelDistance();
	void UpdateAveragePropSize();
	void UpdateAverageDistanceToHunters();
	void DestroyVisualChild(class AB_VisualIntepolator_C* VisualChild);
	void NoValidTransformUX();
	void LoadSkills(class AController* Param_Controller);
	void InitializePlayername();
	void Fire();
	void SwitchProp(class AActor* Prop);
	void TickStabilize();
	void TickMovement();
	void GetWantedSpawnTransform(struct FTransform* Transform);
	void OnRep_ControllingProp();
	void SpawnProp(class AActor* Template, const struct FTransform& SpawnTransform, class AActor** SpawnedProp, struct FSRuntimePropData* LastRuntimePropData);
	void InpActEvt_Jump_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Four_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Action_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_QuestionSound_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_SpeakSound_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Stabilize_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Stabilize_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_ActivateSkill_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_ActivateSkill_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_ActionUp_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_ActionUp_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_ActionDown_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_ActionDown_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_ActionLeft_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_ActionLeft_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_ActionRight_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_ActionRight_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_ActionUse_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_ActionUse_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_SwitchCamera_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_40(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_47(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38(float AxisValue);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53(float AxisValue);
	void ServerJump();
	void ServerStop(bool Start, const struct FRotator& WantedRotation);
	void ReceivePossessed(class AController* NewController);
	void DebugServerDamage();
	void ServerSwitchProp(class AActor* Prop);
	void ControllingPropDamage(class AActor* DamagedActor, float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void RemoveControllingProp(class AController* Killer);
	void ReceiveTick(float DeltaSeconds);
	void ServerAction();
	void MultiAction();
	void NoValidTransform();
	void ServerSetWantedRotation(const struct FRotator& WantedRotation);
	void MultiStop(bool Start, const struct FRotator& WantedRotation);
	void BndEvt__WhichHuntActorEvents_K2Node_ComponentBoundEvent_0_OnKilled__DelegateSignature(class AController* Killer);
	void ControllingPropPointDamage(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& ShotFromDirection, const class UDamageType* DamageType, class AActor* DamageCauser);
	void OnKilledMulti();
	void BndEvt__WhichHuntActorEvents_K2Node_ComponentBoundEvent_4_OnDispelDebuffStart__DelegateSignature();
	void BndEvt__WhichHuntActorEvents_K2Node_ComponentBoundEvent_5_OnDispelDebuffEnd__DelegateSignature();
	void PlayDispelSoundMulti();
	void PlayDispelSoundServer();
	void MultiJump();
	void ReceiveDestroyed();
	void PlayQuestionSound();
	void PlaySpeakSound();
	void PlayQuestionSoundMulticast();
	void PlaySpeakSoundMulticast();
	void SetControllerRotation(const struct FRotator& Rotation);
	void ActionUpServer(bool Release);
	void ActionDownServer(bool Release);
	void ActionLeftServer(bool Release);
	void ActionRightServer(bool Release);
	void ActionUseServer(bool Release);
	void ServerSwitchBack();
	void MultiSwitchBack();
	void ProcessTeleportEvent();
	void AssignOnKilled();
	void BndEvt__WhichHuntActorEvents_K2Node_ComponentBoundEvent_2_OnManaDrainDebuffStart__DelegateSignature();
	void BndEvt__WhichHuntActorEvents_K2Node_ComponentBoundEvent_3_OnManaDrainDebuffEnd__DelegateSignature();
	void PropPossessed(class AActor* Param_PossessedProp);
	void Test();
	void ServerToggleMovementAllowed(bool Param_MovementAllowed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_PropPawnPhysics_C">();
	}
	static class AB_PropPawnPhysics_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_PropPawnPhysics_C>();
	}
};
static_assert(alignof(AB_PropPawnPhysics_C) == 0x000008, "Wrong alignment on AB_PropPawnPhysics_C");
static_assert(sizeof(AB_PropPawnPhysics_C) == 0x0005C8, "Wrong size on AB_PropPawnPhysics_C");
static_assert(offsetof(AB_PropPawnPhysics_C, UberGraphFrame) == 0x000328, "Member 'AB_PropPawnPhysics_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, AimAssistTarget) == 0x000330, "Member 'AB_PropPawnPhysics_C::AimAssistTarget' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, B_ManaComponent) == 0x000338, "Member 'AB_PropPawnPhysics_C::B_ManaComponent' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, B_KillRelictDropper) == 0x000340, "Member 'AB_PropPawnPhysics_C::B_KillRelictDropper' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, CommunicationSound) == 0x000348, "Member 'AB_PropPawnPhysics_C::CommunicationSound' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, B_TrailEffect) == 0x000350, "Member 'AB_PropPawnPhysics_C::B_TrailEffect' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, Sphere1) == 0x000358, "Member 'AB_PropPawnPhysics_C::Sphere1' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, PlayerName) == 0x000360, "Member 'AB_PropPawnPhysics_C::PlayerName' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, Sphere) == 0x000368, "Member 'AB_PropPawnPhysics_C::Sphere' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, SpringArm) == 0x000370, "Member 'AB_PropPawnPhysics_C::SpringArm' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, DamageEffect) == 0x000378, "Member 'AB_PropPawnPhysics_C::DamageEffect' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, KillWitchGameModeHandler) == 0x000380, "Member 'AB_PropPawnPhysics_C::KillWitchGameModeHandler' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, KillRagdoll) == 0x000388, "Member 'AB_PropPawnPhysics_C::KillRagdoll' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, WhichHuntActorEvents) == 0x000390, "Member 'AB_PropPawnPhysics_C::WhichHuntActorEvents' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, DamageSound) == 0x000398, "Member 'AB_PropPawnPhysics_C::DamageSound' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, DamageHandler) == 0x0003A0, "Member 'AB_PropPawnPhysics_C::DamageHandler' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, PhysicalSound) == 0x0003A8, "Member 'AB_PropPawnPhysics_C::PhysicalSound' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, Camera) == 0x0003B0, "Member 'AB_PropPawnPhysics_C::Camera' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, BaseTurnRate) == 0x0003B8, "Member 'AB_PropPawnPhysics_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, BaseLookUpRate) == 0x0003C0, "Member 'AB_PropPawnPhysics_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, PropName) == 0x0003C8, "Member 'AB_PropPawnPhysics_C::PropName' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TargetProp) == 0x0003D8, "Member 'AB_PropPawnPhysics_C::TargetProp' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, ShrinkSound) == 0x0003E0, "Member 'AB_PropPawnPhysics_C::ShrinkSound' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, GrowSound) == 0x0003E8, "Member 'AB_PropPawnPhysics_C::GrowSound' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TransformRange) == 0x0003F0, "Member 'AB_PropPawnPhysics_C::TransformRange' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, ControllingProp) == 0x0003F8, "Member 'AB_PropPawnPhysics_C::ControllingProp' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, PropTemplate) == 0x000400, "Member 'AB_PropPawnPhysics_C::PropTemplate' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, IsStabilizing) == 0x000408, "Member 'AB_PropPawnPhysics_C::IsStabilizing' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, SwitchIsOnCooldown) == 0x000409, "Member 'AB_PropPawnPhysics_C::SwitchIsOnCooldown' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, SpecialUtilitySkill) == 0x000410, "Member 'AB_PropPawnPhysics_C::SpecialUtilitySkill' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, SpecialMovementSkill) == 0x000418, "Member 'AB_PropPawnPhysics_C::SpecialMovementSkill' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, DispelDebuff) == 0x000420, "Member 'AB_PropPawnPhysics_C::DispelDebuff' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, CurrentVisualChilds) == 0x000428, "Member 'AB_PropPawnPhysics_C::CurrentVisualChilds' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, LastTravelLocation) == 0x000438, "Member 'AB_PropPawnPhysics_C::LastTravelLocation' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TauntBudget) == 0x000450, "Member 'AB_PropPawnPhysics_C::TauntBudget' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, MaxTaunts) == 0x000454, "Member 'AB_PropPawnPhysics_C::MaxTaunts' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, QuestionSound) == 0x000458, "Member 'AB_PropPawnPhysics_C::QuestionSound' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, SpeakSound) == 0x000460, "Member 'AB_PropPawnPhysics_C::SpeakSound' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, SlowTime) == 0x000468, "Member 'AB_PropPawnPhysics_C::SlowTime' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, LastRuntimePropDataNew) == 0x000470, "Member 'AB_PropPawnPhysics_C::LastRuntimePropDataNew' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, SpawnedWitch) == 0x0004A8, "Member 'AB_PropPawnPhysics_C::SpawnedWitch' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, IsTransformingBack) == 0x0004B0, "Member 'AB_PropPawnPhysics_C::IsTransformingBack' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TransformBackTime) == 0x0004B8, "Member 'AB_PropPawnPhysics_C::TransformBackTime' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, FPTargetArmLength) == 0x0004C0, "Member 'AB_PropPawnPhysics_C::FPTargetArmLength' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, FPSocketOffset) == 0x0004C8, "Member 'AB_PropPawnPhysics_C::FPSocketOffset' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, FPTargetOffset) == 0x0004E0, "Member 'AB_PropPawnPhysics_C::FPTargetOffset' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TPTargetOffset) == 0x0004F8, "Member 'AB_PropPawnPhysics_C::TPTargetOffset' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, ManaDrainDebuff) == 0x000510, "Member 'AB_PropPawnPhysics_C::ManaDrainDebuff' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, SettingsSave) == 0x000518, "Member 'AB_PropPawnPhysics_C::SettingsSave' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, MenuUIManager) == 0x000520, "Member 'AB_PropPawnPhysics_C::MenuUIManager' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, DisableFire) == 0x000528, "Member 'AB_PropPawnPhysics_C::DisableFire' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, PossessedProp) == 0x000530, "Member 'AB_PropPawnPhysics_C::PossessedProp' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, PossessingPlayer) == 0x000538, "Member 'AB_PropPawnPhysics_C::PossessingPlayer' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, CurrentPropId) == 0x000540, "Member 'AB_PropPawnPhysics_C::CurrentPropId' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, LastControllingProp) == 0x000548, "Member 'AB_PropPawnPhysics_C::LastControllingProp' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TransformEffectParticle) == 0x000550, "Member 'AB_PropPawnPhysics_C::TransformEffectParticle' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TPArmLength) == 0x000558, "Member 'AB_PropPawnPhysics_C::TPArmLength' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, MaxTPArmLength) == 0x000560, "Member 'AB_PropPawnPhysics_C::MaxTPArmLength' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TPSocketOffset) == 0x000568, "Member 'AB_PropPawnPhysics_C::TPSocketOffset' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, ZoomSpeed) == 0x000570, "Member 'AB_PropPawnPhysics_C::ZoomSpeed' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, LastCameraProp) == 0x000578, "Member 'AB_PropPawnPhysics_C::LastCameraProp' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, LastPhotoTarget) == 0x000580, "Member 'AB_PropPawnPhysics_C::LastPhotoTarget' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, ToggleModeActive) == 0x000588, "Member 'AB_PropPawnPhysics_C::ToggleModeActive' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, TargetArmLength) == 0x000590, "Member 'AB_PropPawnPhysics_C::TargetArmLength' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, PropMaxHealth) == 0x000598, "Member 'AB_PropPawnPhysics_C::PropMaxHealth' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, MovementAllowed) == 0x0005A0, "Member 'AB_PropPawnPhysics_C::MovementAllowed' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, HiddenToHunters) == 0x0005A1, "Member 'AB_PropPawnPhysics_C::HiddenToHunters' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, OriginalStaticMeshMaterials) == 0x0005A8, "Member 'AB_PropPawnPhysics_C::OriginalStaticMeshMaterials' has a wrong offset!");
static_assert(offsetof(AB_PropPawnPhysics_C, OriginalSkeletalMeshMaterials) == 0x0005B8, "Member 'AB_PropPawnPhysics_C::OriginalSkeletalMeshMaterials' has a wrong offset!");

}

