#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_XPBar

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_XPBar.WB_XPBar_C
// 0x00A0 (0x0360 - 0x02C0)
class UWB_XPBar_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UProgressBar*                           Bar;                                               // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           BonusBar;                                          // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             BonusLabel;                                        // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             GainedTotalExpLabel;                               // 0x02E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Glass;                                             // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Glow;                                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LevelNext;                                         // 0x02F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LevelNow;                                          // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             XPGain;                                            // 0x0308(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             XPProgress;                                        // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        Percentage;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BonusPercentage;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XPSum;                                             // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XpStart;                                           // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XPNextLevel;                                       // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Level;                                             // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XPGainedTotal;                                     // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3820[0x4];                                     // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ExpName;                                           // 0x0340(0x0018)(Edit, BlueprintVisible)
	bool                                          StartShowing;                                      // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WB_XPBar(int32 EntryPoint);
	float Get_Bar_Percent_0();
	float Get_BonusBar_Percent_0();
	class FText Get_BonusLabel_Text_0();
	class FText Get_GainedTotalExpLabel_Text_0();
	class FText Get_LevelNext_Text_0();
	class FText Get_LevelNow_Text_0();
	class FText Get_XPGain_Text_0();
	class FText Get_XPProgress_Text_0();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_XPBar_C">();
	}
	static class UWB_XPBar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_XPBar_C>();
	}
};
static_assert(alignof(UWB_XPBar_C) == 0x000008, "Wrong alignment on UWB_XPBar_C");
static_assert(sizeof(UWB_XPBar_C) == 0x000360, "Wrong size on UWB_XPBar_C");
static_assert(offsetof(UWB_XPBar_C, UberGraphFrame) == 0x0002C0, "Member 'UWB_XPBar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, Bar) == 0x0002C8, "Member 'UWB_XPBar_C::Bar' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, BonusBar) == 0x0002D0, "Member 'UWB_XPBar_C::BonusBar' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, BonusLabel) == 0x0002D8, "Member 'UWB_XPBar_C::BonusLabel' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, GainedTotalExpLabel) == 0x0002E0, "Member 'UWB_XPBar_C::GainedTotalExpLabel' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, Glass) == 0x0002E8, "Member 'UWB_XPBar_C::Glass' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, Glow) == 0x0002F0, "Member 'UWB_XPBar_C::Glow' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, LevelNext) == 0x0002F8, "Member 'UWB_XPBar_C::LevelNext' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, LevelNow) == 0x000300, "Member 'UWB_XPBar_C::LevelNow' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, XPGain) == 0x000308, "Member 'UWB_XPBar_C::XPGain' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, XPProgress) == 0x000310, "Member 'UWB_XPBar_C::XPProgress' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, Percentage) == 0x000318, "Member 'UWB_XPBar_C::Percentage' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, BonusPercentage) == 0x000320, "Member 'UWB_XPBar_C::BonusPercentage' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, XPSum) == 0x000328, "Member 'UWB_XPBar_C::XPSum' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, XpStart) == 0x00032C, "Member 'UWB_XPBar_C::XpStart' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, XPNextLevel) == 0x000330, "Member 'UWB_XPBar_C::XPNextLevel' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, Level) == 0x000334, "Member 'UWB_XPBar_C::Level' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, XPGainedTotal) == 0x000338, "Member 'UWB_XPBar_C::XPGainedTotal' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, ExpName) == 0x000340, "Member 'UWB_XPBar_C::ExpName' has a wrong offset!");
static_assert(offsetof(UWB_XPBar_C, StartShowing) == 0x000358, "Member 'UWB_XPBar_C::StartShowing' has a wrong offset!");

}

