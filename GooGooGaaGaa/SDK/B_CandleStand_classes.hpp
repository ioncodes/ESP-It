#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_CandleStand

#include "Basic.hpp"

#include "B_StaticMeshFireProp_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_CandleStand.B_CandleStand_C
// 0x0030 (0x0690 - 0x0660)
#pragma pack(push, 0x1)
class alignas(0x10) AB_CandleStand_C : public AB_StaticMeshFireProp_C
{
public:
	class UPointLightComponent*                   PointLight2;                                       // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Fire2;                                             // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Fire3;                                             // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UB_WindForce_C*                         B_WindForce;                                       // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void InitializeActionProp();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_CandleStand_C">();
	}
	static class AB_CandleStand_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_CandleStand_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AB_CandleStand_C) == 0x000010, "Wrong alignment on AB_CandleStand_C");
static_assert(sizeof(AB_CandleStand_C) == 0x000690, "Wrong size on AB_CandleStand_C");
static_assert(offsetof(AB_CandleStand_C, PointLight2) == 0x000660, "Member 'AB_CandleStand_C::PointLight2' has a wrong offset!");
static_assert(offsetof(AB_CandleStand_C, PointLight1) == 0x000668, "Member 'AB_CandleStand_C::PointLight1' has a wrong offset!");
static_assert(offsetof(AB_CandleStand_C, Fire2) == 0x000670, "Member 'AB_CandleStand_C::Fire2' has a wrong offset!");
static_assert(offsetof(AB_CandleStand_C, Fire3) == 0x000678, "Member 'AB_CandleStand_C::Fire3' has a wrong offset!");
static_assert(offsetof(AB_CandleStand_C, B_WindForce) == 0x000680, "Member 'AB_CandleStand_C::B_WindForce' has a wrong offset!");

}

