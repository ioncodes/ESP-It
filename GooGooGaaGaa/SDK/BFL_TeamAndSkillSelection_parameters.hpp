#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_TeamAndSkillSelection

#include "Basic.hpp"

#include "ETeamID_structs.hpp"
#include "ESkillCategory_structs.hpp"


namespace SDK::Params
{

// Function BFL_TeamAndSkillSelection.BFL_TeamAndSkillSelection_C.VerifySkillSelection
// 0x0008 (0x0008 - 0x0000)
struct BFL_TeamAndSkillSelection_C_VerifySkillSelection final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TeamAndSkillSelection_C_VerifySkillSelection) == 0x000008, "Wrong alignment on BFL_TeamAndSkillSelection_C_VerifySkillSelection");
static_assert(sizeof(BFL_TeamAndSkillSelection_C_VerifySkillSelection) == 0x000008, "Wrong size on BFL_TeamAndSkillSelection_C_VerifySkillSelection");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelection, __WorldContext) == 0x000000, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelection::__WorldContext' has a wrong offset!");

// Function BFL_TeamAndSkillSelection.BFL_TeamAndSkillSelection_C.VerifySkillSelectionForTeam
// 0x0058 (0x0058 - 0x0000)
struct BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam final
{
public:
	ETeamID                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CFC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         GameState;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetFirstLocalPlayerController_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CFD[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam) == 0x000008, "Wrong alignment on BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam");
static_assert(sizeof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam) == 0x000058, "Wrong size on BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, Team) == 0x000000, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::Team' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, __WorldContext) == 0x000008, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, PlayerState) == 0x000010, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::PlayerState' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, GameState) == 0x000018, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::GameState' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, CallFunc_GetGameInstance_ReturnValue) == 0x000020, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, CallFunc_GetFirstLocalPlayerController_ReturnValue) == 0x000030, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::CallFunc_GetFirstLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, K2Node_DynamicCast_AsB_Game_State) == 0x000038, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, K2Node_DynamicCast_AsB_Player_State) == 0x000048, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000051, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForTeam::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BFL_TeamAndSkillSelection.BFL_TeamAndSkillSelection_C.SaveSkillSelection
// 0x0070 (0x0070 - 0x0000)
struct BFL_TeamAndSkillSelection_C_SaveSkillSelection final
{
public:
	class UClass*                                 Skill;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Team;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillCategory                                SkillCategory;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoSkill;                                           // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CFE[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsObjectiveGameMode;                              // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CFF[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_SkinSelection_C*                     SkinSlots;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D00[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D01[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TeamAndSkillSelection_C_SaveSkillSelection) == 0x000008, "Wrong alignment on BFL_TeamAndSkillSelection_C_SaveSkillSelection");
static_assert(sizeof(BFL_TeamAndSkillSelection_C_SaveSkillSelection) == 0x000070, "Wrong size on BFL_TeamAndSkillSelection_C_SaveSkillSelection");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, Skill) == 0x000000, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::Skill' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, Team) == 0x000008, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::Team' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, SkillCategory) == 0x000009, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::SkillCategory' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, NoSkill) == 0x00000A, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::NoSkill' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, __WorldContext) == 0x000010, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, bIsObjectiveGameMode) == 0x000018, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::bIsObjectiveGameMode' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, SkinSlots) == 0x000020, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::SkinSlots' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_GetGameState_ReturnValue) == 0x000030, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_GetGameInstance_ReturnValue) == 0x000038, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_GetObjectClass_ReturnValue) == 0x000040, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, K2Node_DynamicCast_AsB_Game_Instance) == 0x000048, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000051, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, K2Node_SwitchEnum_CmpSuccess) == 0x000052, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_MakeLiteralByte_ReturnValue) == 0x000053, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_IsValid_ReturnValue_1) == 0x000054, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000055, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, CallFunc_GetClassDisplayName_ReturnValue) == 0x000058, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, K2Node_SwitchEnum_CmpSuccess_1) == 0x000068, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SaveSkillSelection, K2Node_SwitchEnum_CmpSuccess_2) == 0x000069, "Member 'BFL_TeamAndSkillSelection_C_SaveSkillSelection::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");

// Function BFL_TeamAndSkillSelection.BFL_TeamAndSkillSelection_C.SelectSkill
// 0x0058 (0x0058 - 0x0000)
struct BFL_TeamAndSkillSelection_C_SelectSkill final
{
public:
	ETeamID                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D02[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Skill;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESkillCategory                                SkillCategory;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D03[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CurrentSkill;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         SkillsToCheck;                                     // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         AllowedSkills;                                     // 0x0040(0x0010)(Edit, BlueprintVisible)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TeamAndSkillSelection_C_SelectSkill) == 0x000008, "Wrong alignment on BFL_TeamAndSkillSelection_C_SelectSkill");
static_assert(sizeof(BFL_TeamAndSkillSelection_C_SelectSkill) == 0x000058, "Wrong size on BFL_TeamAndSkillSelection_C_SelectSkill");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, Team) == 0x000000, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::Team' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, PlayerState) == 0x000008, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::PlayerState' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, Skill) == 0x000010, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::Skill' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, SkillCategory) == 0x000018, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::SkillCategory' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, __WorldContext) == 0x000020, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, CurrentSkill) == 0x000028, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::CurrentSkill' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, SkillsToCheck) == 0x000030, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::SkillsToCheck' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, AllowedSkills) == 0x000040, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::AllowedSkills' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectSkill, K2Node_SwitchEnum_CmpSuccess) == 0x000050, "Member 'BFL_TeamAndSkillSelection_C_SelectSkill::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BFL_TeamAndSkillSelection.BFL_TeamAndSkillSelection_C.SelectRandomSkill
// 0x0050 (0x0050 - 0x0000)
struct BFL_TeamAndSkillSelection_C_SelectRandomSkill final
{
public:
	class AB_GameState_C*                         GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Team;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillCategory                                Category;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D04[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SelectedSkill;                                     // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SkillToSelect;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         CallFunc_GetAllowedSkills_ReturnValue;             // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TeamAndSkillSelection_C_SelectRandomSkill) == 0x000008, "Wrong alignment on BFL_TeamAndSkillSelection_C_SelectRandomSkill");
static_assert(sizeof(BFL_TeamAndSkillSelection_C_SelectRandomSkill) == 0x000050, "Wrong size on BFL_TeamAndSkillSelection_C_SelectRandomSkill");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, GameState) == 0x000000, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::GameState' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, Team) == 0x000008, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::Team' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, Category) == 0x000009, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::Category' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, PlayerState) == 0x000010, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::PlayerState' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, __WorldContext) == 0x000018, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, SelectedSkill) == 0x000020, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::SelectedSkill' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, SkillToSelect) == 0x000028, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::SkillToSelect' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, CallFunc_GetAllowedSkills_ReturnValue) == 0x000030, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::CallFunc_GetAllowedSkills_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, CallFunc_RandomInteger_ReturnValue) == 0x000044, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_SelectRandomSkill, CallFunc_Array_Get_Item) == 0x000048, "Member 'BFL_TeamAndSkillSelection_C_SelectRandomSkill::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BFL_TeamAndSkillSelection.BFL_TeamAndSkillSelection_C.GetAllowedSkills
// 0x00A0 (0x00A0 - 0x0000)
struct BFL_TeamAndSkillSelection_C_GetAllowedSkills final
{
public:
	class AB_GameState_C*                         GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Team;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillCategory                                Category;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D05[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm)
	class UClass*                                 CurrentSkill;                                      // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         SkillsToCheck;                                     // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         AllowedSkills;                                     // 0x0040(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         Temp_class_Variable;                               // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D06[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D07[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Temp_byte_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D08[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         K2Node_Select_Default;                             // 0x0088(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TeamAndSkillSelection_C_GetAllowedSkills) == 0x000008, "Wrong alignment on BFL_TeamAndSkillSelection_C_GetAllowedSkills");
static_assert(sizeof(BFL_TeamAndSkillSelection_C_GetAllowedSkills) == 0x0000A0, "Wrong size on BFL_TeamAndSkillSelection_C_GetAllowedSkills");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, GameState) == 0x000000, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::GameState' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, Team) == 0x000008, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::Team' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, Category) == 0x000009, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::Category' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, __WorldContext) == 0x000010, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, ReturnValue) == 0x000018, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, CurrentSkill) == 0x000028, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::CurrentSkill' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, SkillsToCheck) == 0x000030, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::SkillsToCheck' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, AllowedSkills) == 0x000040, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::AllowedSkills' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, Temp_class_Variable) == 0x000050, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, Temp_int_Array_Index_Variable) == 0x000064, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, Temp_int_Loop_Counter_Variable) == 0x000068, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, CallFunc_Array_Get_Item) == 0x000070, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, Temp_byte_Variable) == 0x000080, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, K2Node_Select_Default) == 0x000088, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_GetAllowedSkills, CallFunc_Array_AddUnique_ReturnValue) == 0x000098, "Member 'BFL_TeamAndSkillSelection_C_GetAllowedSkills::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BFL_TeamAndSkillSelection.BFL_TeamAndSkillSelection_C.VerifySkillSelectionForCategory
// 0x0068 (0x0068 - 0x0000)
struct BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory final
{
public:
	class AB_GameState_C*                         GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Team;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D09[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	ESkillCategory                                SkillCategory;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D0A[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetSelectedSkillForTeam_Skill;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         Temp_class_Variable;                               // 0x0030(0x0010)(ReferenceParm)
	class UClass*                                 CallFunc_SelectRandomSkill_SelectedSkill;          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Temp_byte_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D0B[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         K2Node_Select_Default;                             // 0x0050(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory) == 0x000008, "Wrong alignment on BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory");
static_assert(sizeof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory) == 0x000068, "Wrong size on BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, GameState) == 0x000000, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::GameState' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, Team) == 0x000008, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::Team' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, PlayerState) == 0x000010, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::PlayerState' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, SkillCategory) == 0x000018, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::SkillCategory' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, __WorldContext) == 0x000020, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, CallFunc_GetSelectedSkillForTeam_Skill) == 0x000028, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::CallFunc_GetSelectedSkillForTeam_Skill' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, Temp_class_Variable) == 0x000030, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, CallFunc_SelectRandomSkill_SelectedSkill) == 0x000040, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::CallFunc_SelectRandomSkill_SelectedSkill' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, Temp_byte_Variable) == 0x000048, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, CallFunc_IsValidClass_ReturnValue) == 0x000049, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, K2Node_Select_Default) == 0x000050, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, CallFunc_Array_Contains_ReturnValue) == 0x000060, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory, CallFunc_Not_PreBool_ReturnValue) == 0x000061, "Member 'BFL_TeamAndSkillSelection_C_VerifySkillSelectionForCategory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

}

