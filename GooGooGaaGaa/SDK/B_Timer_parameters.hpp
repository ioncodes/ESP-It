#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Timer

#include "Basic.hpp"


namespace SDK::Params
{

// Function B_Timer.B_Timer_C.ExecuteUbergraph_B_Timer
// 0x0014 (0x0014 - 0x0000)
struct B_Timer_C_ExecuteUbergraph_B_Timer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Timer_C_ExecuteUbergraph_B_Timer) == 0x000004, "Wrong alignment on B_Timer_C_ExecuteUbergraph_B_Timer");
static_assert(sizeof(B_Timer_C_ExecuteUbergraph_B_Timer) == 0x000014, "Wrong size on B_Timer_C_ExecuteUbergraph_B_Timer");
static_assert(offsetof(B_Timer_C_ExecuteUbergraph_B_Timer, EntryPoint) == 0x000000, "Member 'B_Timer_C_ExecuteUbergraph_B_Timer::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Timer_C_ExecuteUbergraph_B_Timer, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'B_Timer_C_ExecuteUbergraph_B_Timer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Timer_C_ExecuteUbergraph_B_Timer, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'B_Timer_C_ExecuteUbergraph_B_Timer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_Timer_C_ExecuteUbergraph_B_Timer, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'B_Timer_C_ExecuteUbergraph_B_Timer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Timer_C_ExecuteUbergraph_B_Timer, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000010, "Member 'B_Timer_C_ExecuteUbergraph_B_Timer::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_Timer.B_Timer_C.OnSecondElapsed__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct B_Timer_C_OnSecondElapsed__DelegateSignature final
{
public:
	int32                                         ElapsedSeconds;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RemainingSeconds_0;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Timer_C_OnSecondElapsed__DelegateSignature) == 0x000004, "Wrong alignment on B_Timer_C_OnSecondElapsed__DelegateSignature");
static_assert(sizeof(B_Timer_C_OnSecondElapsed__DelegateSignature) == 0x000008, "Wrong size on B_Timer_C_OnSecondElapsed__DelegateSignature");
static_assert(offsetof(B_Timer_C_OnSecondElapsed__DelegateSignature, ElapsedSeconds) == 0x000000, "Member 'B_Timer_C_OnSecondElapsed__DelegateSignature::ElapsedSeconds' has a wrong offset!");
static_assert(offsetof(B_Timer_C_OnSecondElapsed__DelegateSignature, RemainingSeconds_0) == 0x000004, "Member 'B_Timer_C_OnSecondElapsed__DelegateSignature::RemainingSeconds_0' has a wrong offset!");

// Function B_Timer.B_Timer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_Timer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Timer_C_ReceiveTick) == 0x000004, "Wrong alignment on B_Timer_C_ReceiveTick");
static_assert(sizeof(B_Timer_C_ReceiveTick) == 0x000004, "Wrong size on B_Timer_C_ReceiveTick");
static_assert(offsetof(B_Timer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_Timer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_Timer.B_Timer_C.Start
// 0x0004 (0x0004 - 0x0000)
struct B_Timer_C_Start final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Timer_C_Start) == 0x000004, "Wrong alignment on B_Timer_C_Start");
static_assert(sizeof(B_Timer_C_Start) == 0x000004, "Wrong size on B_Timer_C_Start");
static_assert(offsetof(B_Timer_C_Start, Time) == 0x000000, "Member 'B_Timer_C_Start::Time' has a wrong offset!");

}

