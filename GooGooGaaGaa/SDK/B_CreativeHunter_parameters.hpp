#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_CreativeHunter

#include "Basic.hpp"


namespace SDK::Params
{

// Function B_CreativeHunter.B_CreativeHunter_C.ExecuteUbergraph_B_CreativeHunter
// 0x0030 (0x0030 - 0x0000)
struct B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_NewController;                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Accessor__GetPlayerController_IsValid;    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_Accessor__GetPlayerController_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_CreativePlayerController_C*          K2Node_DynamicCast_AsB_Creative_Player_Controller; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter) == 0x000008, "Wrong alignment on B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter");
static_assert(sizeof(B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter) == 0x000030, "Wrong size on B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter");
static_assert(offsetof(B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter, EntryPoint) == 0x000000, "Member 'B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter, K2Node_Event_NewController) == 0x000008, "Member 'B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter, CallFunc_Accessor__GetPlayerController_IsValid) == 0x000010, "Member 'B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter::CallFunc_Accessor__GetPlayerController_IsValid' has a wrong offset!");
static_assert(offsetof(B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter, CallFunc_Accessor__GetPlayerController_ReturnValue) == 0x000018, "Member 'B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter::CallFunc_Accessor__GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter, K2Node_DynamicCast_AsB_Creative_Player_Controller) == 0x000020, "Member 'B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter::K2Node_DynamicCast_AsB_Creative_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_CreativeHunter_C_ExecuteUbergraph_B_CreativeHunter::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_CreativeHunter.B_CreativeHunter_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct B_CreativeHunter_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_CreativeHunter_C_ReceivePossessed) == 0x000008, "Wrong alignment on B_CreativeHunter_C_ReceivePossessed");
static_assert(sizeof(B_CreativeHunter_C_ReceivePossessed) == 0x000008, "Wrong size on B_CreativeHunter_C_ReceivePossessed");
static_assert(offsetof(B_CreativeHunter_C_ReceivePossessed, NewController) == 0x000000, "Member 'B_CreativeHunter_C_ReceivePossessed::NewController' has a wrong offset!");

}

