#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_KickVoteBlock

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_KickVoteBlock.WB_KickVoteBlock_C
// 0x0028 (0x02E8 - 0x02C0)
class UWB_KickVoteBlock_C final : public UUserWidget
{
public:
	class UImage*                                 Border;                                            // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x02C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Frame;                                             // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Vote;                                              // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class AB_PlayerState_C*                       PlayerState;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	struct FSlateBrush Get_Vote_Brush_0();
	ESlateVisibility Get_Vote_Visibility_0();
	ESlateVisibility GetVisibility_0();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_KickVoteBlock_C">();
	}
	static class UWB_KickVoteBlock_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_KickVoteBlock_C>();
	}
};
static_assert(alignof(UWB_KickVoteBlock_C) == 0x000008, "Wrong alignment on UWB_KickVoteBlock_C");
static_assert(sizeof(UWB_KickVoteBlock_C) == 0x0002E8, "Wrong size on UWB_KickVoteBlock_C");
static_assert(offsetof(UWB_KickVoteBlock_C, Border) == 0x0002C0, "Member 'UWB_KickVoteBlock_C::Border' has a wrong offset!");
static_assert(offsetof(UWB_KickVoteBlock_C, CanvasPanel_0) == 0x0002C8, "Member 'UWB_KickVoteBlock_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UWB_KickVoteBlock_C, Frame) == 0x0002D0, "Member 'UWB_KickVoteBlock_C::Frame' has a wrong offset!");
static_assert(offsetof(UWB_KickVoteBlock_C, Vote) == 0x0002D8, "Member 'UWB_KickVoteBlock_C::Vote' has a wrong offset!");
static_assert(offsetof(UWB_KickVoteBlock_C, PlayerState) == 0x0002E0, "Member 'UWB_KickVoteBlock_C::PlayerState' has a wrong offset!");

}

