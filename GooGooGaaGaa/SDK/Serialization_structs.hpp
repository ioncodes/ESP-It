#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Serialization

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct Serialization.StructSerializerNumericTestStruct
// 0x0030 (0x0030 - 0x0000)
struct FStructSerializerNumericTestStruct final
{
public:
	int8                                          Int8;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34D3[0x1];                                     // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Int16;                                             // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int32;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int64;                                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Uint8;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34D4[0x1];                                     // 0x0011(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        UInt16;                                            // 0x0012(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UInt32;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        UInt64;                                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34D5[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Double;                                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerNumericTestStruct) == 0x000008, "Wrong alignment on FStructSerializerNumericTestStruct");
static_assert(sizeof(FStructSerializerNumericTestStruct) == 0x000030, "Wrong size on FStructSerializerNumericTestStruct");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int8) == 0x000000, "Member 'FStructSerializerNumericTestStruct::Int8' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int16) == 0x000002, "Member 'FStructSerializerNumericTestStruct::Int16' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int32) == 0x000004, "Member 'FStructSerializerNumericTestStruct::Int32' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int64) == 0x000008, "Member 'FStructSerializerNumericTestStruct::Int64' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Uint8) == 0x000010, "Member 'FStructSerializerNumericTestStruct::Uint8' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt16) == 0x000012, "Member 'FStructSerializerNumericTestStruct::UInt16' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt32) == 0x000014, "Member 'FStructSerializerNumericTestStruct::UInt32' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt64) == 0x000018, "Member 'FStructSerializerNumericTestStruct::UInt64' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Float) == 0x000020, "Member 'FStructSerializerNumericTestStruct::Float' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Double) == 0x000028, "Member 'FStructSerializerNumericTestStruct::Double' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerBooleanTestStruct
// 0x0003 (0x0003 - 0x0000)
struct FStructSerializerBooleanTestStruct final
{
public:
	bool                                          BoolFalse;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolTrue;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Bitfield0 : 1;                                     // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield1 : 1;                                     // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield2Set : 1;                                  // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield3 : 1;                                     // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield4Set : 1;                                  // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield5Set : 1;                                  // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield6 : 1;                                     // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield7Set : 1;                                  // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FStructSerializerBooleanTestStruct) == 0x000001, "Wrong alignment on FStructSerializerBooleanTestStruct");
static_assert(sizeof(FStructSerializerBooleanTestStruct) == 0x000003, "Wrong size on FStructSerializerBooleanTestStruct");
static_assert(offsetof(FStructSerializerBooleanTestStruct, BoolFalse) == 0x000000, "Member 'FStructSerializerBooleanTestStruct::BoolFalse' has a wrong offset!");
static_assert(offsetof(FStructSerializerBooleanTestStruct, BoolTrue) == 0x000001, "Member 'FStructSerializerBooleanTestStruct::BoolTrue' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerObjectTestStruct
// 0x00C0 (0x00C0 - 0x0000)
struct FStructSerializerObjectTestStruct final
{
public:
	TSubclassOf<class UObject>                    RawClass;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    WrappedClass;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMetaData>                  SubClass;                                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SoftClass;                                         // 0x0018(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                RawObject;                                         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WrappedObject;                                     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMetaData>               WeakObject;                                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMetaData>               SoftObject;                                        // 0x0058(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         ClassPath;                                         // 0x0080(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ObjectPath;                                        // 0x00A0(0x0020)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerObjectTestStruct) == 0x000008, "Wrong alignment on FStructSerializerObjectTestStruct");
static_assert(sizeof(FStructSerializerObjectTestStruct) == 0x0000C0, "Wrong size on FStructSerializerObjectTestStruct");
static_assert(offsetof(FStructSerializerObjectTestStruct, RawClass) == 0x000000, "Member 'FStructSerializerObjectTestStruct::RawClass' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, WrappedClass) == 0x000008, "Member 'FStructSerializerObjectTestStruct::WrappedClass' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, SubClass) == 0x000010, "Member 'FStructSerializerObjectTestStruct::SubClass' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, SoftClass) == 0x000018, "Member 'FStructSerializerObjectTestStruct::SoftClass' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, RawObject) == 0x000040, "Member 'FStructSerializerObjectTestStruct::RawObject' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, WrappedObject) == 0x000048, "Member 'FStructSerializerObjectTestStruct::WrappedObject' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, WeakObject) == 0x000050, "Member 'FStructSerializerObjectTestStruct::WeakObject' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, SoftObject) == 0x000058, "Member 'FStructSerializerObjectTestStruct::SoftObject' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, ClassPath) == 0x000080, "Member 'FStructSerializerObjectTestStruct::ClassPath' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, ObjectPath) == 0x0000A0, "Member 'FStructSerializerObjectTestStruct::ObjectPath' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerBuiltinTestStruct
// 0x00D0 (0x00D0 - 0x0000)
struct FStructSerializerBuiltinTestStruct final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0028(0x0018)(NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34D6[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Vector4;                                           // 0x0060(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34D7[0x8];                                     // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Quat;                                              // 0x00A0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34D8[0xC];                                     // 0x00C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStructSerializerBuiltinTestStruct) == 0x000010, "Wrong alignment on FStructSerializerBuiltinTestStruct");
static_assert(sizeof(FStructSerializerBuiltinTestStruct) == 0x0000D0, "Wrong size on FStructSerializerBuiltinTestStruct");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Guid) == 0x000000, "Member 'FStructSerializerBuiltinTestStruct::Guid' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Name) == 0x000010, "Member 'FStructSerializerBuiltinTestStruct::Name' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, String) == 0x000018, "Member 'FStructSerializerBuiltinTestStruct::String' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Text) == 0x000028, "Member 'FStructSerializerBuiltinTestStruct::Text' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Vector) == 0x000040, "Member 'FStructSerializerBuiltinTestStruct::Vector' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Vector4) == 0x000060, "Member 'FStructSerializerBuiltinTestStruct::Vector4' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Rotator) == 0x000080, "Member 'FStructSerializerBuiltinTestStruct::Rotator' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Quat) == 0x0000A0, "Member 'FStructSerializerBuiltinTestStruct::Quat' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Color) == 0x0000C0, "Member 'FStructSerializerBuiltinTestStruct::Color' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerLWCTypesTest
// 0x0360 (0x0360 - 0x0000)
struct FStructSerializerLWCTypesTest final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Vector2D;                                          // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34D9[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Vector4;                                           // 0x0030(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix                                Matrix;                                            // 0x0050(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPlane                                 Plane;                                             // 0x00D0(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Quat;                                              // 0x00F0(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34DA[0x8];                                     // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0130(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Box;                                               // 0x0190(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2D                                 Box2D;                                             // 0x01C8(0x0028)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                       BoxSphereBounds;                                   // 0x01F0(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FOrientedBox                           OrientedBox;                                       // 0x0228(0x0078)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Float;                                             // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34DB[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Double;                                            // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorArray;                                       // 0x02B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FVector>           StrToVec;                                          // 0x02C0(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FVector>                          VectorSet;                                         // 0x0310(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerLWCTypesTest) == 0x000010, "Wrong alignment on FStructSerializerLWCTypesTest");
static_assert(sizeof(FStructSerializerLWCTypesTest) == 0x000360, "Wrong size on FStructSerializerLWCTypesTest");
static_assert(offsetof(FStructSerializerLWCTypesTest, Vector) == 0x000000, "Member 'FStructSerializerLWCTypesTest::Vector' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Vector2D) == 0x000018, "Member 'FStructSerializerLWCTypesTest::Vector2D' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Vector4) == 0x000030, "Member 'FStructSerializerLWCTypesTest::Vector4' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Matrix) == 0x000050, "Member 'FStructSerializerLWCTypesTest::Matrix' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Plane) == 0x0000D0, "Member 'FStructSerializerLWCTypesTest::Plane' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Quat) == 0x0000F0, "Member 'FStructSerializerLWCTypesTest::Quat' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Rotator) == 0x000110, "Member 'FStructSerializerLWCTypesTest::Rotator' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Transform) == 0x000130, "Member 'FStructSerializerLWCTypesTest::Transform' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Box) == 0x000190, "Member 'FStructSerializerLWCTypesTest::Box' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Box2D) == 0x0001C8, "Member 'FStructSerializerLWCTypesTest::Box2D' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, BoxSphereBounds) == 0x0001F0, "Member 'FStructSerializerLWCTypesTest::BoxSphereBounds' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, OrientedBox) == 0x000228, "Member 'FStructSerializerLWCTypesTest::OrientedBox' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Float) == 0x0002A0, "Member 'FStructSerializerLWCTypesTest::Float' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, Double) == 0x0002A8, "Member 'FStructSerializerLWCTypesTest::Double' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, VectorArray) == 0x0002B0, "Member 'FStructSerializerLWCTypesTest::VectorArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, StrToVec) == 0x0002C0, "Member 'FStructSerializerLWCTypesTest::StrToVec' has a wrong offset!");
static_assert(offsetof(FStructSerializerLWCTypesTest, VectorSet) == 0x000310, "Member 'FStructSerializerLWCTypesTest::VectorSet' has a wrong offset!");

// ScriptStruct Serialization.OrientedBoxFloat
// 0x003C (0x003C - 0x0000)
struct FOrientedBoxFloat final
{
public:
	struct FVector3f                              Center;                                            // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              AxisX;                                             // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              AxisY;                                             // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              AxisZ;                                             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentX;                                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentY;                                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtentZ;                                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrientedBoxFloat) == 0x000004, "Wrong alignment on FOrientedBoxFloat");
static_assert(sizeof(FOrientedBoxFloat) == 0x00003C, "Wrong size on FOrientedBoxFloat");
static_assert(offsetof(FOrientedBoxFloat, Center) == 0x000000, "Member 'FOrientedBoxFloat::Center' has a wrong offset!");
static_assert(offsetof(FOrientedBoxFloat, AxisX) == 0x00000C, "Member 'FOrientedBoxFloat::AxisX' has a wrong offset!");
static_assert(offsetof(FOrientedBoxFloat, AxisY) == 0x000018, "Member 'FOrientedBoxFloat::AxisY' has a wrong offset!");
static_assert(offsetof(FOrientedBoxFloat, AxisZ) == 0x000024, "Member 'FOrientedBoxFloat::AxisZ' has a wrong offset!");
static_assert(offsetof(FOrientedBoxFloat, ExtentX) == 0x000030, "Member 'FOrientedBoxFloat::ExtentX' has a wrong offset!");
static_assert(offsetof(FOrientedBoxFloat, ExtentY) == 0x000034, "Member 'FOrientedBoxFloat::ExtentY' has a wrong offset!");
static_assert(offsetof(FOrientedBoxFloat, ExtentZ) == 0x000038, "Member 'FOrientedBoxFloat::ExtentZ' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerNonLWCTypesTest
// 0x0220 (0x0220 - 0x0000)
struct FStructSerializerNonLWCTypesTest final
{
public:
	struct FVector3f                              Vector;                                            // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2f                              Vector2D;                                          // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34DC[0xC];                                     // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4f                              Vector4;                                           // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatrix44f                             Matrix;                                            // 0x0030(0x0040)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPlane4f                               Plane;                                             // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat4f                                Quat;                                              // 0x0080(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator3f                             Rotator;                                           // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34DD[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform3f                           Transform;                                         // 0x00A0(0x0030)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox3f                                 Box;                                               // 0x00D0(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox2f                                 Box2D;                                             // 0x00EC(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds3f                     BoxSphereBounds;                                   // 0x0100(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FOrientedBoxFloat                      OrientedBox;                                       // 0x011C(0x003C)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         Float;                                             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34DE[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Double;                                            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector3f>                      VectorArray;                                       // 0x0168(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FVector3f>         StrToVec;                                          // 0x0178(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FVector3f>                        VectorSet;                                         // 0x01C8(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_34DF[0x8];                                     // 0x0218(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStructSerializerNonLWCTypesTest) == 0x000010, "Wrong alignment on FStructSerializerNonLWCTypesTest");
static_assert(sizeof(FStructSerializerNonLWCTypesTest) == 0x000220, "Wrong size on FStructSerializerNonLWCTypesTest");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Vector) == 0x000000, "Member 'FStructSerializerNonLWCTypesTest::Vector' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Vector2D) == 0x00000C, "Member 'FStructSerializerNonLWCTypesTest::Vector2D' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Vector4) == 0x000020, "Member 'FStructSerializerNonLWCTypesTest::Vector4' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Matrix) == 0x000030, "Member 'FStructSerializerNonLWCTypesTest::Matrix' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Plane) == 0x000070, "Member 'FStructSerializerNonLWCTypesTest::Plane' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Quat) == 0x000080, "Member 'FStructSerializerNonLWCTypesTest::Quat' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Rotator) == 0x000090, "Member 'FStructSerializerNonLWCTypesTest::Rotator' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Transform) == 0x0000A0, "Member 'FStructSerializerNonLWCTypesTest::Transform' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Box) == 0x0000D0, "Member 'FStructSerializerNonLWCTypesTest::Box' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Box2D) == 0x0000EC, "Member 'FStructSerializerNonLWCTypesTest::Box2D' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, BoxSphereBounds) == 0x000100, "Member 'FStructSerializerNonLWCTypesTest::BoxSphereBounds' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, OrientedBox) == 0x00011C, "Member 'FStructSerializerNonLWCTypesTest::OrientedBox' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Float) == 0x000158, "Member 'FStructSerializerNonLWCTypesTest::Float' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, Double) == 0x000160, "Member 'FStructSerializerNonLWCTypesTest::Double' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, VectorArray) == 0x000168, "Member 'FStructSerializerNonLWCTypesTest::VectorArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, StrToVec) == 0x000178, "Member 'FStructSerializerNonLWCTypesTest::StrToVec' has a wrong offset!");
static_assert(offsetof(FStructSerializerNonLWCTypesTest, VectorSet) == 0x0001C8, "Member 'FStructSerializerNonLWCTypesTest::VectorSet' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerByteArray
// 0x0038 (0x0038 - 0x0000)
struct FStructSerializerByteArray final
{
public:
	int32                                         Dummy1;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34E0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ByteArray;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Dummy2;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34E1[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int8>                                  Int8Array;                                         // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Dummy3;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34E2[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStructSerializerByteArray) == 0x000008, "Wrong alignment on FStructSerializerByteArray");
static_assert(sizeof(FStructSerializerByteArray) == 0x000038, "Wrong size on FStructSerializerByteArray");
static_assert(offsetof(FStructSerializerByteArray, Dummy1) == 0x000000, "Member 'FStructSerializerByteArray::Dummy1' has a wrong offset!");
static_assert(offsetof(FStructSerializerByteArray, ByteArray) == 0x000008, "Member 'FStructSerializerByteArray::ByteArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerByteArray, Dummy2) == 0x000018, "Member 'FStructSerializerByteArray::Dummy2' has a wrong offset!");
static_assert(offsetof(FStructSerializerByteArray, Int8Array) == 0x000020, "Member 'FStructSerializerByteArray::Int8Array' has a wrong offset!");
static_assert(offsetof(FStructSerializerByteArray, Dummy3) == 0x000030, "Member 'FStructSerializerByteArray::Dummy3' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerArrayTestStruct
// 0x0060 (0x0060 - 0x0000)
struct FStructSerializerArrayTestStruct final
{
public:
	TArray<int32>                                 Int32Array;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StaticSingleElement;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StaticInt32Array[0x3];                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticFloatArray[0x3];                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34E3[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        VectorArray;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStructSerializerBuiltinTestStruct> StructArray;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerArrayTestStruct) == 0x000008, "Wrong alignment on FStructSerializerArrayTestStruct");
static_assert(sizeof(FStructSerializerArrayTestStruct) == 0x000060, "Wrong size on FStructSerializerArrayTestStruct");
static_assert(offsetof(FStructSerializerArrayTestStruct, Int32Array) == 0x000000, "Member 'FStructSerializerArrayTestStruct::Int32Array' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, ByteArray) == 0x000010, "Member 'FStructSerializerArrayTestStruct::ByteArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticSingleElement) == 0x000020, "Member 'FStructSerializerArrayTestStruct::StaticSingleElement' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticInt32Array) == 0x000024, "Member 'FStructSerializerArrayTestStruct::StaticInt32Array' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticFloatArray) == 0x000030, "Member 'FStructSerializerArrayTestStruct::StaticFloatArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, VectorArray) == 0x000040, "Member 'FStructSerializerArrayTestStruct::VectorArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StructArray) == 0x000050, "Member 'FStructSerializerArrayTestStruct::StructArray' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerMapTestStruct
// 0x0140 (0x0140 - 0x0000)
struct FStructSerializerMapTestStruct final
{
public:
	TMap<int32, class FString>                    IntToStr;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            StrToStr;                                          // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FVector>           StrToVec;                                          // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FStructSerializerBuiltinTestStruct> StrToStruct;                                       // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerMapTestStruct) == 0x000008, "Wrong alignment on FStructSerializerMapTestStruct");
static_assert(sizeof(FStructSerializerMapTestStruct) == 0x000140, "Wrong size on FStructSerializerMapTestStruct");
static_assert(offsetof(FStructSerializerMapTestStruct, IntToStr) == 0x000000, "Member 'FStructSerializerMapTestStruct::IntToStr' has a wrong offset!");
static_assert(offsetof(FStructSerializerMapTestStruct, StrToStr) == 0x000050, "Member 'FStructSerializerMapTestStruct::StrToStr' has a wrong offset!");
static_assert(offsetof(FStructSerializerMapTestStruct, StrToVec) == 0x0000A0, "Member 'FStructSerializerMapTestStruct::StrToVec' has a wrong offset!");
static_assert(offsetof(FStructSerializerMapTestStruct, StrToStruct) == 0x0000F0, "Member 'FStructSerializerMapTestStruct::StrToStruct' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerSetTestStruct
// 0x0140 (0x0140 - 0x0000)
struct FStructSerializerSetTestStruct final
{
public:
	TSet<class FString>                           StrSet;                                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TSet<int32>                                   IntSet;                                            // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TSet<class FName>                             NameSet;                                           // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FStructSerializerBuiltinTestStruct> StructSet;                                         // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerSetTestStruct) == 0x000008, "Wrong alignment on FStructSerializerSetTestStruct");
static_assert(sizeof(FStructSerializerSetTestStruct) == 0x000140, "Wrong size on FStructSerializerSetTestStruct");
static_assert(offsetof(FStructSerializerSetTestStruct, StrSet) == 0x000000, "Member 'FStructSerializerSetTestStruct::StrSet' has a wrong offset!");
static_assert(offsetof(FStructSerializerSetTestStruct, IntSet) == 0x000050, "Member 'FStructSerializerSetTestStruct::IntSet' has a wrong offset!");
static_assert(offsetof(FStructSerializerSetTestStruct, NameSet) == 0x0000A0, "Member 'FStructSerializerSetTestStruct::NameSet' has a wrong offset!");
static_assert(offsetof(FStructSerializerSetTestStruct, StructSet) == 0x0000F0, "Member 'FStructSerializerSetTestStruct::StructSet' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerTestStruct
// 0x0810 (0x0810 - 0x0000)
struct FStructSerializerTestStruct final
{
public:
	struct FStructSerializerNumericTestStruct     Numerics;                                          // 0x0000(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FStructSerializerBooleanTestStruct     Booleans;                                          // 0x0030(0x0003)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34E4[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStructSerializerObjectTestStruct      Objects;                                           // 0x0038(0x00C0)(NativeAccessSpecifierPublic)
	uint8                                         Pad_34E5[0x8];                                     // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStructSerializerBuiltinTestStruct     Builtins;                                          // 0x0100(0x00D0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStructSerializerArrayTestStruct       Arrays;                                            // 0x01D0(0x0060)(NativeAccessSpecifierPublic)
	struct FStructSerializerMapTestStruct         Maps;                                              // 0x0230(0x0140)(NativeAccessSpecifierPublic)
	struct FStructSerializerSetTestStruct         Sets;                                              // 0x0370(0x0140)(NativeAccessSpecifierPublic)
	struct FStructSerializerLWCTypesTest          LWCTypes;                                          // 0x04B0(0x0360)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerTestStruct) == 0x000010, "Wrong alignment on FStructSerializerTestStruct");
static_assert(sizeof(FStructSerializerTestStruct) == 0x000810, "Wrong size on FStructSerializerTestStruct");
static_assert(offsetof(FStructSerializerTestStruct, Numerics) == 0x000000, "Member 'FStructSerializerTestStruct::Numerics' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Booleans) == 0x000030, "Member 'FStructSerializerTestStruct::Booleans' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Objects) == 0x000038, "Member 'FStructSerializerTestStruct::Objects' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Builtins) == 0x000100, "Member 'FStructSerializerTestStruct::Builtins' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Arrays) == 0x0001D0, "Member 'FStructSerializerTestStruct::Arrays' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Maps) == 0x000230, "Member 'FStructSerializerTestStruct::Maps' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Sets) == 0x000370, "Member 'FStructSerializerTestStruct::Sets' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, LWCTypes) == 0x0004B0, "Member 'FStructSerializerTestStruct::LWCTypes' has a wrong offset!");

}

