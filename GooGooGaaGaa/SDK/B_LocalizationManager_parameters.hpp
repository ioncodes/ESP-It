#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_LocalizationManager

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "SLanguage_structs.hpp"
#include "Engine_structs.hpp"
#include "SButtonLocalization_structs.hpp"


namespace SDK::Params
{

// Function B_LocalizationManager.B_LocalizationManager_C.ExecuteUbergraph_B_LocalizationManager
// 0x0018 (0x0018 - 0x0000)
struct B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCurrentCulture_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B8D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          K2Node_Event_InGameInstance;                       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLanguageSupported_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager) == 0x000008, "Wrong alignment on B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager");
static_assert(sizeof(B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager) == 0x000018, "Wrong size on B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager");
static_assert(offsetof(B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager, EntryPoint) == 0x000000, "Member 'B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager, CallFunc_SetCurrentCulture_ReturnValue) == 0x000004, "Member 'B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager::CallFunc_SetCurrentCulture_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager, K2Node_Event_InGameInstance) == 0x000008, "Member 'B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager::K2Node_Event_InGameInstance' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager, CallFunc_IsLanguageSupported_ReturnValue) == 0x000010, "Member 'B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager::CallFunc_IsLanguageSupported_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'B_LocalizationManager_C_ExecuteUbergraph_B_LocalizationManager::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_LocalizationManager.B_LocalizationManager_C.GetButtonLocalization
// 0x0130 (0x0130 - 0x0000)
struct B_LocalizationManager_C_GetButtonLocalization final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	struct FSButtonLocalization                   ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
	bool                                          bKeyFound;                                         // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Ps4Platform_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_XboxOnePlatform_ReturnValue;              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B8E[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSButtonLocalization                   CallFunc_Map_Find_Value;                           // 0x0040(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SwitchPlatform_ReturnValue;               // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B8F[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSButtonLocalization                   CallFunc_Map_Find_Value_1;                         // 0x0068(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B90[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSButtonLocalization                   CallFunc_Map_Find_Value_2;                         // 0x0090(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DesktopPlatform_ReturnValue;              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B91[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSButtonLocalization                   CallFunc_Map_Find_Value_3;                         // 0x00B8(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_3;                   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B92[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSButtonLocalization                   CallFunc_Map_Find_Value_4;                         // 0x00E0(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_4;                   // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B93[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSButtonLocalization                   CallFunc_Map_Find_Value_5;                         // 0x0108(0x0020)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_5;                   // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_LocalizationManager_C_GetButtonLocalization) == 0x000008, "Wrong alignment on B_LocalizationManager_C_GetButtonLocalization");
static_assert(sizeof(B_LocalizationManager_C_GetButtonLocalization) == 0x000130, "Wrong size on B_LocalizationManager_C_GetButtonLocalization");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, Key) == 0x000000, "Member 'B_LocalizationManager_C_GetButtonLocalization::Key' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, ReturnValue) == 0x000018, "Member 'B_LocalizationManager_C_GetButtonLocalization::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, bKeyFound) == 0x000038, "Member 'B_LocalizationManager_C_GetButtonLocalization::bKeyFound' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Ps4Platform_ReturnValue) == 0x000039, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Ps4Platform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_XboxOnePlatform_ReturnValue) == 0x00003A, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_XboxOnePlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_Value) == 0x000040, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_ReturnValue) == 0x000060, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_SwitchPlatform_ReturnValue) == 0x000061, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_SwitchPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_Value_1) == 0x000068, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_ReturnValue_1) == 0x000088, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_Value_2) == 0x000090, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_ReturnValue_2) == 0x0000B0, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_DesktopPlatform_ReturnValue) == 0x0000B1, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_DesktopPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_Value_3) == 0x0000B8, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_Value_3' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_ReturnValue_3) == 0x0000D8, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_Value_4) == 0x0000E0, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_Value_4' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_ReturnValue_4) == 0x000100, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_Value_5) == 0x000108, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_Value_5' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetButtonLocalization, CallFunc_Map_Find_ReturnValue_5) == 0x000128, "Member 'B_LocalizationManager_C_GetButtonLocalization::CallFunc_Map_Find_ReturnValue_5' has a wrong offset!");

// Function B_LocalizationManager.B_LocalizationManager_C.GetKeyForAction
// 0x00B0 (0x00B0 - 0x0000)
struct B_LocalizationManager_C_GetKeyForAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
	bool                                          bKeyFound;                                         // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B94[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CurrentKey;                                        // 0x0028(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FInputActionKeyMapping>         CallFunc_GetKeyBindingsForAction_Bindings;         // 0x0040(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInputActionKeyMapping                 CallFunc_Array_Get_Item;                           // 0x0058(0x0028)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B95[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SwitchPlatform_ReturnValue;               // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B96[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_NintendoSwitchSwapAcceptBackButton_FixedKey; // 0x0090(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadMode_ReturnValue;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsGamepadKey_ReturnValue;             // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_LocalizationManager_C_GetKeyForAction) == 0x000008, "Wrong alignment on B_LocalizationManager_C_GetKeyForAction");
static_assert(sizeof(B_LocalizationManager_C_GetKeyForAction) == 0x0000B0, "Wrong size on B_LocalizationManager_C_GetKeyForAction");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, ActionName) == 0x000000, "Member 'B_LocalizationManager_C_GetKeyForAction::ActionName' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, ReturnValue) == 0x000008, "Member 'B_LocalizationManager_C_GetKeyForAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, bKeyFound) == 0x000020, "Member 'B_LocalizationManager_C_GetKeyForAction::bKeyFound' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CurrentKey) == 0x000028, "Member 'B_LocalizationManager_C_GetKeyForAction::CurrentKey' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_GetKeyBindingsForAction_Bindings) == 0x000040, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_GetKeyBindingsForAction_Bindings' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, Temp_int_Array_Index_Variable) == 0x000050, "Member 'B_LocalizationManager_C_GetKeyForAction::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_Array_Get_Item) == 0x000058, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, Temp_int_Loop_Counter_Variable) == 0x000080, "Member 'B_LocalizationManager_C_GetKeyForAction::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_SwitchPlatform_ReturnValue) == 0x00008C, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_SwitchPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_NintendoSwitchSwapAcceptBackButton_FixedKey) == 0x000090, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_NintendoSwitchSwapAcceptBackButton_FixedKey' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_IsGamepadMode_ReturnValue) == 0x0000A8, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_IsGamepadMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_Key_IsGamepadKey_ReturnValue) == 0x0000A9, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_Key_IsGamepadKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAction, CallFunc_Not_PreBool_ReturnValue) == 0x0000AA, "Member 'B_LocalizationManager_C_GetKeyForAction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_LocalizationManager.B_LocalizationManager_C.GetKeyForAxis
// 0x00A0 (0x00A0 - 0x0000)
struct B_LocalizationManager_C_GetKeyForAxis final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash)
	bool                                          bKeyFound;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B97[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CurrentKey;                                        // 0x0030(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FInputAxisKeyMapping>           CallFunc_GetKeyBindingsForAxis_Bindings;           // 0x0048(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInputAxisKeyMapping                   CallFunc_Array_Get_Item;                           // 0x0060(0x0028)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B98[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadMode_ReturnValue;                // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsGamepadKey_ReturnValue;             // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B99[0x1];                                     // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetKeyBindingsForAxis_Scale_ImplicitCast; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_LocalizationManager_C_GetKeyForAxis) == 0x000008, "Wrong alignment on B_LocalizationManager_C_GetKeyForAxis");
static_assert(sizeof(B_LocalizationManager_C_GetKeyForAxis) == 0x0000A0, "Wrong size on B_LocalizationManager_C_GetKeyForAxis");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, AxisName) == 0x000000, "Member 'B_LocalizationManager_C_GetKeyForAxis::AxisName' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, Scale) == 0x000008, "Member 'B_LocalizationManager_C_GetKeyForAxis::Scale' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, ReturnValue) == 0x000010, "Member 'B_LocalizationManager_C_GetKeyForAxis::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, bKeyFound) == 0x000028, "Member 'B_LocalizationManager_C_GetKeyForAxis::bKeyFound' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CurrentKey) == 0x000030, "Member 'B_LocalizationManager_C_GetKeyForAxis::CurrentKey' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_GetKeyBindingsForAxis_Bindings) == 0x000048, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_GetKeyBindingsForAxis_Bindings' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, Temp_int_Array_Index_Variable) == 0x000058, "Member 'B_LocalizationManager_C_GetKeyForAxis::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_Array_Get_Item) == 0x000060, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, Temp_int_Loop_Counter_Variable) == 0x000088, "Member 'B_LocalizationManager_C_GetKeyForAxis::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_Add_IntInt_ReturnValue) == 0x000090, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_IsGamepadMode_ReturnValue) == 0x000094, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_IsGamepadMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_Key_IsGamepadKey_ReturnValue) == 0x000095, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_Key_IsGamepadKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_Not_PreBool_ReturnValue) == 0x000096, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetKeyForAxis, CallFunc_GetKeyBindingsForAxis_Scale_ImplicitCast) == 0x000098, "Member 'B_LocalizationManager_C_GetKeyForAxis::CallFunc_GetKeyBindingsForAxis_Scale_ImplicitCast' has a wrong offset!");

// Function B_LocalizationManager.B_LocalizationManager_C.GetMenuUIManager
// 0x0020 (0x0020 - 0x0000)
struct B_LocalizationManager_C_GetMenuUIManager final
{
public:
	class UB_MenuUIManager_C*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B9A[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_LocalizationManager_C_GetMenuUIManager) == 0x000008, "Wrong alignment on B_LocalizationManager_C_GetMenuUIManager");
static_assert(sizeof(B_LocalizationManager_C_GetMenuUIManager) == 0x000020, "Wrong size on B_LocalizationManager_C_GetMenuUIManager");
static_assert(offsetof(B_LocalizationManager_C_GetMenuUIManager, ReturnValue) == 0x000000, "Member 'B_LocalizationManager_C_GetMenuUIManager::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetMenuUIManager, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_LocalizationManager_C_GetMenuUIManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetMenuUIManager, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_LocalizationManager_C_GetMenuUIManager::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_GetMenuUIManager, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_LocalizationManager_C_GetMenuUIManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_LocalizationManager.B_LocalizationManager_C.Initialize
// 0x0008 (0x0008 - 0x0000)
struct B_LocalizationManager_C_Initialize final
{
public:
	class UGameInstance*                          InGameInstance;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_LocalizationManager_C_Initialize) == 0x000008, "Wrong alignment on B_LocalizationManager_C_Initialize");
static_assert(sizeof(B_LocalizationManager_C_Initialize) == 0x000008, "Wrong size on B_LocalizationManager_C_Initialize");
static_assert(offsetof(B_LocalizationManager_C_Initialize, InGameInstance) == 0x000000, "Member 'B_LocalizationManager_C_Initialize::InGameInstance' has a wrong offset!");

// Function B_LocalizationManager.B_LocalizationManager_C.IsLanguageSupported
// 0x0048 (0x0048 - 0x0000)
struct B_LocalizationManager_C_IsLanguageSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLanguageSupported;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B9B[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetCurrentLanguage_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSLanguage                             CallFunc_Array_Get_Item;                           // 0x0020(0x0020)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_LocalizationManager_C_IsLanguageSupported) == 0x000008, "Wrong alignment on B_LocalizationManager_C_IsLanguageSupported");
static_assert(sizeof(B_LocalizationManager_C_IsLanguageSupported) == 0x000048, "Wrong size on B_LocalizationManager_C_IsLanguageSupported");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, ReturnValue) == 0x000000, "Member 'B_LocalizationManager_C_IsLanguageSupported::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, bLanguageSupported) == 0x000001, "Member 'B_LocalizationManager_C_IsLanguageSupported::bLanguageSupported' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, Temp_int_Array_Index_Variable) == 0x000004, "Member 'B_LocalizationManager_C_IsLanguageSupported::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'B_LocalizationManager_C_IsLanguageSupported::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'B_LocalizationManager_C_IsLanguageSupported::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, CallFunc_GetCurrentLanguage_ReturnValue) == 0x000010, "Member 'B_LocalizationManager_C_IsLanguageSupported::CallFunc_GetCurrentLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_LocalizationManager_C_IsLanguageSupported::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'B_LocalizationManager_C_IsLanguageSupported::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'B_LocalizationManager_C_IsLanguageSupported::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_IsLanguageSupported, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000045, "Member 'B_LocalizationManager_C_IsLanguageSupported::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function B_LocalizationManager.B_LocalizationManager_C.NintendoSwitchSwapAcceptBackButton
// 0x0038 (0x0038 - 0x0000)
struct B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton final
{
public:
	struct FKey                                   ActionKey;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FKey                                   FixedKey;                                          // 0x0018(0x0018)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton) == 0x000008, "Wrong alignment on B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton");
static_assert(sizeof(B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton) == 0x000038, "Wrong size on B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton");
static_assert(offsetof(B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton, ActionKey) == 0x000000, "Member 'B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton::ActionKey' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton, FixedKey) == 0x000018, "Member 'B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton::FixedKey' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000030, "Member 'B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000031, "Member 'B_LocalizationManager_C_NintendoSwitchSwapAcceptBackButton::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");

}

