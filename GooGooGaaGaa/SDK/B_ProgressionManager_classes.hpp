#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ProgressionManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ProgressionManager.B_ProgressionManager_C
// 0x0078 (0x00A8 - 0x0030)
class UB_ProgressionManager_C final : public UBaseManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsUpdating;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadingSuccessful;                               // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AccountLevelName;                                  // 0x003C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ExperienceName;                                    // 0x0044(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   RoundsPlayedName;                                  // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StatServerLevel;                                   // 0x0054(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   StatServerExperience;                              // 0x005C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LevelingCurve;                                     // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalLevel;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LocalExp;                                          // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StatIsStored;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxLevel;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrestigeLevel;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrestigeExp;                                       // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            PrestigeTextColor;                                 // 0x0088(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_NewStatsAndAchievementsManager_C*    CachedStatsAndAchievements;                        // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void DidLoadOnlineStats(bool Success);
	void DidStoreStats(bool Success);
	void ExecuteUbergraph_B_ProgressionManager(int32 EntryPoint);
	void GetCurrentPendingLevelUpsLocal(int32* PendingLevelUps);
	void GetExp(int32* Exp);
	void GetExpPercentalLocal(double Exp, double* PercentalExp);
	void GetExpPercentalPrestige(double Exp, double* PercentalExp);
	void GetLevel(int32* Level);
	void GetMaxExp(int32* MaxExp);
	void GetMaxExpLocal(int32* MaxExp);
	void GetMaxExpPrestige(int32* MaxExp);
	void GetPrestigeExp(int32* PrestigeExp_0);
	void GetPrestigeLevel(int32* PrestigeLevel_0);
	void GetRoundsPlayed(int32* RoundsPlayed);
	void GrantExp(int32 Exp, int32* LevelUps);
	void GrantPendingLevelUp();
	void GrantPendingLevelUpLocal();
	void GrantPrestigeExpLocal(int32 Exp);
	void GrantPrestigeLevelUpLocal();
	void IncrementRoundsPlayed();
	void Initialize(class UGameInstance* InGameInstance);
	void IsPendingLevelUp(bool* PendingLevelUp);
	void IsPendingLevelUpLocal(bool* PendingLevelUp);
	void IsPrestigeLevelUpLocal(bool* IsPrestigeLevelUp);
	void RefreshLocalProgress();
	void ResetAllExpAndLevel();
	void StoreOnlineStats();
	void UpdateOnlineStats();

	void GetStatsAndAchievementsManager(class UB_NewStatsAndAchievementsManager_C** Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ProgressionManager_C">();
	}
	static class UB_ProgressionManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_ProgressionManager_C>();
	}
};
static_assert(alignof(UB_ProgressionManager_C) == 0x000008, "Wrong alignment on UB_ProgressionManager_C");
static_assert(sizeof(UB_ProgressionManager_C) == 0x0000A8, "Wrong size on UB_ProgressionManager_C");
static_assert(offsetof(UB_ProgressionManager_C, UberGraphFrame) == 0x000030, "Member 'UB_ProgressionManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, IsUpdating) == 0x000038, "Member 'UB_ProgressionManager_C::IsUpdating' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, IsLoadingSuccessful) == 0x000039, "Member 'UB_ProgressionManager_C::IsLoadingSuccessful' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, AccountLevelName) == 0x00003C, "Member 'UB_ProgressionManager_C::AccountLevelName' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, ExperienceName) == 0x000044, "Member 'UB_ProgressionManager_C::ExperienceName' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, RoundsPlayedName) == 0x00004C, "Member 'UB_ProgressionManager_C::RoundsPlayedName' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, StatServerLevel) == 0x000054, "Member 'UB_ProgressionManager_C::StatServerLevel' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, StatServerExperience) == 0x00005C, "Member 'UB_ProgressionManager_C::StatServerExperience' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, LevelingCurve) == 0x000068, "Member 'UB_ProgressionManager_C::LevelingCurve' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, LocalLevel) == 0x000070, "Member 'UB_ProgressionManager_C::LocalLevel' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, LocalExp) == 0x000074, "Member 'UB_ProgressionManager_C::LocalExp' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, StatIsStored) == 0x000078, "Member 'UB_ProgressionManager_C::StatIsStored' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, MaxLevel) == 0x00007C, "Member 'UB_ProgressionManager_C::MaxLevel' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, PrestigeLevel) == 0x000080, "Member 'UB_ProgressionManager_C::PrestigeLevel' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, PrestigeExp) == 0x000084, "Member 'UB_ProgressionManager_C::PrestigeExp' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, PrestigeTextColor) == 0x000088, "Member 'UB_ProgressionManager_C::PrestigeTextColor' has a wrong offset!");
static_assert(offsetof(UB_ProgressionManager_C, CachedStatsAndAchievements) == 0x0000A0, "Member 'UB_ProgressionManager_C::CachedStatsAndAchievements' has a wrong offset!");

}

