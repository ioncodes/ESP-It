#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Chicken

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_Chicken.B_Chicken_C.AddWitch
// 0x0020 (0x0020 - 0x0000)
struct B_Chicken_C_AddWitch final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_AddWitch) == 0x000008, "Wrong alignment on B_Chicken_C_AddWitch");
static_assert(sizeof(B_Chicken_C_AddWitch) == 0x000020, "Wrong size on B_Chicken_C_AddWitch");
static_assert(offsetof(B_Chicken_C_AddWitch, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_Chicken_C_AddWitch::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_AddWitch, K2Node_DynamicCast_AsB_Game_State) == 0x000008, "Member 'B_Chicken_C_AddWitch::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_AddWitch, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Chicken_C_AddWitch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_AddWitch, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000011, "Member 'B_Chicken_C_AddWitch::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_AddWitch, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x000012, "Member 'B_Chicken_C_AddWitch::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_AddWitch, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'B_Chicken_C_AddWitch::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_AddWitch, CallFunc_IsPlaying_ReturnValue) == 0x000014, "Member 'B_Chicken_C_AddWitch::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_AddWitch, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'B_Chicken_C_AddWitch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_AddWitch, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'B_Chicken_C_AddWitch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// 0x0128 (0x0128 - 0x0000)
struct B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0030(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x000128, "Wrong size on B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, Hit) == 0x000030, "Member 'B_Chicken_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_Chicken_C_BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.CanTeleport
// 0x0002 (0x0002 - 0x0000)
struct B_Chicken_C_CanTeleport final
{
public:
	bool                                          CanTeleport_0;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_CanTeleport) == 0x000001, "Wrong alignment on B_Chicken_C_CanTeleport");
static_assert(sizeof(B_Chicken_C_CanTeleport) == 0x000002, "Wrong size on B_Chicken_C_CanTeleport");
static_assert(offsetof(B_Chicken_C_CanTeleport, CanTeleport_0) == 0x000000, "Member 'B_Chicken_C_CanTeleport::CanTeleport_0' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_CanTeleport, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'B_Chicken_C_CanTeleport::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.ExecuteUbergraph_B_Chicken
// 0x04D0 (0x04D0 - 0x0000)
struct B_Chicken_C_ExecuteUbergraph_B_Chicken final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetScale_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0060(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0158(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetWitchPlayerController_PlayerController; // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetInstigatorController_ReturnValue;      // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CA[0x2];                                      // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0200(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_Event_SpawnTransform;                       // 0x0300(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Owner;                                // 0x0360(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Instigator;                           // 0x0368(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_CustomEvent_SpawnTransform;                 // 0x0370(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Owner;                          // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_Instigator;                     // 0x03D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x03E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x03E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRelativeScale3D_ReturnValue;      // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0448(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0450(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0468(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0488(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x04A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A2[0x6];                                      // 0x04A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x04A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimer_Time_ImplicitCast;            // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast; // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_ExecuteUbergraph_B_Chicken) == 0x000010, "Wrong alignment on B_Chicken_C_ExecuteUbergraph_B_Chicken");
static_assert(sizeof(B_Chicken_C_ExecuteUbergraph_B_Chicken) == 0x0004D0, "Wrong size on B_Chicken_C_ExecuteUbergraph_B_Chicken");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, EntryPoint) == 0x000000, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetScale_ReturnValue) == 0x000008, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000010, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_DynamicCast_AsB_Game_State) == 0x000030, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000039, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x00003A, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_IsDedicatedServer_ReturnValue) == 0x00003B, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_BooleanOR_ReturnValue) == 0x00003C, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000040, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000048, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000050, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000058, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_bFromSweep) == 0x00005C, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_SweepResult) == 0x000060, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000158, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000160, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000168, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000170, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetWitchPlayerController_PlayerController) == 0x000178, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetWitchPlayerController_PlayerController' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetMaterial_ReturnValue) == 0x000180, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000188, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0001A0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x0001A8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetInstigatorController_ReturnValue) == 0x0001B0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetInstigatorController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Array_Contains_ReturnValue) == 0x0001B8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_DynamicCast_AsB_Player_State) == 0x0001C0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_DynamicCast_bSuccess_1) == 0x0001C8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Not_PreBool_ReturnValue) == 0x0001C9, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Array_Add_ReturnValue) == 0x0001CC, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_HitComponent) == 0x0001D0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OtherActor) == 0x0001D8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_OtherComp) == 0x0001E0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_NormalImpulse) == 0x0001E8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_ComponentBoundEvent_Hit) == 0x000200, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_Event_SpawnTransform) == 0x000300, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_Event_SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_Event_Owner) == 0x000360, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_Event_Owner' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_Event_Instigator) == 0x000368, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_Event_Instigator' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_CustomEvent_SpawnTransform) == 0x000370, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_CustomEvent_SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_CustomEvent_Owner) == 0x0003D0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_CustomEvent_Owner' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, K2Node_CustomEvent_Instigator) == 0x0003D8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::K2Node_CustomEvent_Instigator' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_K2_SetTimer_ReturnValue) == 0x0003E0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetActorScale3D_ReturnValue) == 0x0003E8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetActorRelativeScale3D_ReturnValue) == 0x000400, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetActorRelativeScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_BreakVector_X) == 0x000418, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_BreakVector_Y) == 0x000420, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_BreakVector_Z) == 0x000428, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_BreakVector_X_1) == 0x000430, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_BreakVector_Y_1) == 0x000438, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_BreakVector_Z_1) == 0x000440, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000448, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_GetVelocity_ReturnValue) == 0x000450, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Normal_ReturnValue) == 0x000468, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_VSize_ReturnValue) == 0x000480, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000488, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0004A0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_HasAuthority_ReturnValue) == 0x0004A1, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x0004A8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_K2_SetTimer_Time_ImplicitCast) == 0x0004C0, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_K2_SetTimer_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_ExecuteUbergraph_B_Chicken, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast) == 0x0004C8, "Member 'B_Chicken_C_ExecuteUbergraph_B_Chicken::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.GetCheckRadius
// 0x0010 (0x0010 - 0x0000)
struct B_Chicken_C_GetCheckRadius final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_GetCheckRadius) == 0x000008, "Wrong alignment on B_Chicken_C_GetCheckRadius");
static_assert(sizeof(B_Chicken_C_GetCheckRadius) == 0x000010, "Wrong size on B_Chicken_C_GetCheckRadius");
static_assert(offsetof(B_Chicken_C_GetCheckRadius, ReturnValue) == 0x000000, "Member 'B_Chicken_C_GetCheckRadius::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_GetCheckRadius, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'B_Chicken_C_GetCheckRadius::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.GetPitch
// 0x0010 (0x0010 - 0x0000)
struct B_Chicken_C_GetPitch final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_GetPitch) == 0x000008, "Wrong alignment on B_Chicken_C_GetPitch");
static_assert(sizeof(B_Chicken_C_GetPitch) == 0x000010, "Wrong size on B_Chicken_C_GetPitch");
static_assert(offsetof(B_Chicken_C_GetPitch, ReturnValue) == 0x000000, "Member 'B_Chicken_C_GetPitch::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_GetPitch, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'B_Chicken_C_GetPitch::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.GetRippleEffect
// 0x0008 (0x0008 - 0x0000)
struct B_Chicken_C_GetRippleEffect final
{
public:
	class UNiagaraSystem*                         RippleEffectNiagara;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_GetRippleEffect) == 0x000008, "Wrong alignment on B_Chicken_C_GetRippleEffect");
static_assert(sizeof(B_Chicken_C_GetRippleEffect) == 0x000008, "Wrong size on B_Chicken_C_GetRippleEffect");
static_assert(offsetof(B_Chicken_C_GetRippleEffect, RippleEffectNiagara) == 0x000000, "Member 'B_Chicken_C_GetRippleEffect::RippleEffectNiagara' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.GetRippleScale
// 0x0018 (0x0018 - 0x0000)
struct B_Chicken_C_GetRippleScale final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_GetRippleScale) == 0x000008, "Wrong alignment on B_Chicken_C_GetRippleScale");
static_assert(sizeof(B_Chicken_C_GetRippleScale) == 0x000018, "Wrong size on B_Chicken_C_GetRippleScale");
static_assert(offsetof(B_Chicken_C_GetRippleScale, Scale) == 0x000000, "Member 'B_Chicken_C_GetRippleScale::Scale' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.GetScale
// 0x0010 (0x0010 - 0x0000)
struct B_Chicken_C_GetScale final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_GetScale) == 0x000008, "Wrong alignment on B_Chicken_C_GetScale");
static_assert(sizeof(B_Chicken_C_GetScale) == 0x000010, "Wrong size on B_Chicken_C_GetScale");
static_assert(offsetof(B_Chicken_C_GetScale, ReturnValue) == 0x000000, "Member 'B_Chicken_C_GetScale::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_GetScale, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'B_Chicken_C_GetScale::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.GetSplashEffect
// 0x0008 (0x0008 - 0x0000)
struct B_Chicken_C_GetSplashEffect final
{
public:
	class UNiagaraSystem*                         SplashEffectNiagara;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_GetSplashEffect) == 0x000008, "Wrong alignment on B_Chicken_C_GetSplashEffect");
static_assert(sizeof(B_Chicken_C_GetSplashEffect) == 0x000008, "Wrong size on B_Chicken_C_GetSplashEffect");
static_assert(offsetof(B_Chicken_C_GetSplashEffect, SplashEffectNiagara) == 0x000000, "Member 'B_Chicken_C_GetSplashEffect::SplashEffectNiagara' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.GetSplashScale
// 0x0018 (0x0018 - 0x0000)
struct B_Chicken_C_GetSplashScale final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_GetSplashScale) == 0x000008, "Wrong alignment on B_Chicken_C_GetSplashScale");
static_assert(sizeof(B_Chicken_C_GetSplashScale) == 0x000018, "Wrong size on B_Chicken_C_GetSplashScale");
static_assert(offsetof(B_Chicken_C_GetSplashScale, Scale) == 0x000000, "Member 'B_Chicken_C_GetSplashScale::Scale' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.GetSplashSound
// 0x0008 (0x0008 - 0x0000)
struct B_Chicken_C_GetSplashSound final
{
public:
	class USoundCue*                              Sound;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_GetSplashSound) == 0x000008, "Wrong alignment on B_Chicken_C_GetSplashSound");
static_assert(sizeof(B_Chicken_C_GetSplashSound) == 0x000008, "Wrong size on B_Chicken_C_GetSplashSound");
static_assert(offsetof(B_Chicken_C_GetSplashSound, Sound) == 0x000000, "Member 'B_Chicken_C_GetSplashSound::Sound' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.IncrementLifeTime
// 0x0020 (0x0020 - 0x0000)
struct B_Chicken_C_IncrementLifeTime final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_IncrementLifeTime) == 0x000008, "Wrong alignment on B_Chicken_C_IncrementLifeTime");
static_assert(sizeof(B_Chicken_C_IncrementLifeTime) == 0x000020, "Wrong size on B_Chicken_C_IncrementLifeTime");
static_assert(offsetof(B_Chicken_C_IncrementLifeTime, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'B_Chicken_C_IncrementLifeTime::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IncrementLifeTime, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000001, "Member 'B_Chicken_C_IncrementLifeTime::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IncrementLifeTime, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_Chicken_C_IncrementLifeTime::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IncrementLifeTime, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000010, "Member 'B_Chicken_C_IncrementLifeTime::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IncrementLifeTime, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'B_Chicken_C_IncrementLifeTime::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.IsActorEvil
// 0x0058 (0x0058 - 0x0000)
struct B_Chicken_C_IsActorEvil final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEvil;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_2;             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_3;             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_IsActorEvil) == 0x000008, "Wrong alignment on B_Chicken_C_IsActorEvil");
static_assert(sizeof(B_Chicken_C_IsActorEvil) == 0x000058, "Wrong size on B_Chicken_C_IsActorEvil");
static_assert(offsetof(B_Chicken_C_IsActorEvil, Actor) == 0x000000, "Member 'B_Chicken_C_IsActorEvil::Actor' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, IsEvil) == 0x000008, "Member 'B_Chicken_C_IsActorEvil::IsEvil' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'B_Chicken_C_IsActorEvil::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_GetInstigator_ReturnValue) == 0x000018, "Member 'B_Chicken_C_IsActorEvil::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_ClassIsChildOf_ReturnValue) == 0x000020, "Member 'B_Chicken_C_IsActorEvil::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_GetObjectClass_ReturnValue_1) == 0x000028, "Member 'B_Chicken_C_IsActorEvil::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'B_Chicken_C_IsActorEvil::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000031, "Member 'B_Chicken_C_IsActorEvil::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_GetObjectClass_ReturnValue_2) == 0x000038, "Member 'B_Chicken_C_IsActorEvil::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'B_Chicken_C_IsActorEvil::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_ClassIsChildOf_ReturnValue_2) == 0x000041, "Member 'B_Chicken_C_IsActorEvil::CallFunc_ClassIsChildOf_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_GetObjectClass_ReturnValue_3) == 0x000048, "Member 'B_Chicken_C_IsActorEvil::CallFunc_GetObjectClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_BooleanOR_ReturnValue) == 0x000050, "Member 'B_Chicken_C_IsActorEvil::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000051, "Member 'B_Chicken_C_IsActorEvil::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_BooleanOR_ReturnValue_1) == 0x000052, "Member 'B_Chicken_C_IsActorEvil::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_IsActorEvil, CallFunc_BooleanOR_ReturnValue_2) == 0x000053, "Member 'B_Chicken_C_IsActorEvil::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.RemoveWitch
// 0x0020 (0x0020 - 0x0000)
struct B_Chicken_C_RemoveWitch final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_RemoveWitch) == 0x000008, "Wrong alignment on B_Chicken_C_RemoveWitch");
static_assert(sizeof(B_Chicken_C_RemoveWitch) == 0x000020, "Wrong size on B_Chicken_C_RemoveWitch");
static_assert(offsetof(B_Chicken_C_RemoveWitch, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_Chicken_C_RemoveWitch::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_RemoveWitch, K2Node_DynamicCast_AsB_Game_State) == 0x000008, "Member 'B_Chicken_C_RemoveWitch::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_RemoveWitch, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Chicken_C_RemoveWitch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_RemoveWitch, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000011, "Member 'B_Chicken_C_RemoveWitch::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_RemoveWitch, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x000012, "Member 'B_Chicken_C_RemoveWitch::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_RemoveWitch, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'B_Chicken_C_RemoveWitch::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_RemoveWitch, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000014, "Member 'B_Chicken_C_RemoveWitch::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_RemoveWitch, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'B_Chicken_C_RemoveWitch::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.SetSizeRadiusAndPitch
// 0x0090 (0x0090 - 0x0000)
struct B_Chicken_C_SetSizeRadiusAndPitch final
{
public:
	double                                        SizeIncrease;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetScale_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetScale_ReturnValue_1;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetCheckRadius_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPitch_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast; // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_SetSizeRadiusAndPitch) == 0x000008, "Wrong alignment on B_Chicken_C_SetSizeRadiusAndPitch");
static_assert(sizeof(B_Chicken_C_SetSizeRadiusAndPitch) == 0x000090, "Wrong size on B_Chicken_C_SetSizeRadiusAndPitch");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, SizeIncrease) == 0x000000, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::SizeIncrease' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_GetScale_ReturnValue) == 0x000008, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_GetScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_GetScale_ReturnValue_1) == 0x000010, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_GetScale_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000018, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_GetCheckRadius_ReturnValue) == 0x000030, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_GetCheckRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_GetPitch_ReturnValue) == 0x000050, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_GetPitch_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000058, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000060, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000068, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast) == 0x000080, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_SetSizeRadiusAndPitch, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000088, "Member 'B_Chicken_C_SetSizeRadiusAndPitch::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.TearDown
// 0x0010 (0x0010 - 0x0000)
struct B_Chicken_C_TearDown final
{
public:
	float                                         CallFunc_NegateFloat_ReturnValue;                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NegateFloat_A_ImplicitCast;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_CurrentLifeTime_ImplicitCast;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_TearDown) == 0x000008, "Wrong alignment on B_Chicken_C_TearDown");
static_assert(sizeof(B_Chicken_C_TearDown) == 0x000010, "Wrong size on B_Chicken_C_TearDown");
static_assert(offsetof(B_Chicken_C_TearDown, CallFunc_NegateFloat_ReturnValue) == 0x000000, "Member 'B_Chicken_C_TearDown::CallFunc_NegateFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearDown, CallFunc_NegateFloat_A_ImplicitCast) == 0x000004, "Member 'B_Chicken_C_TearDown::CallFunc_NegateFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearDown, K2Node_VariableSet_CurrentLifeTime_ImplicitCast) == 0x000008, "Member 'B_Chicken_C_TearDown::K2Node_VariableSet_CurrentLifeTime_ImplicitCast' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.TearUp
// 0x00D0 (0x00D0 - 0x0000)
struct B_Chicken_C_TearUp final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Owner_0;                                           // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Instigator_0;                                      // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPitch_ReturnValue;                     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlaySoundAtLocation_PitchMultiplier_ImplicitCast; // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_TearUp) == 0x000010, "Wrong alignment on B_Chicken_C_TearUp");
static_assert(sizeof(B_Chicken_C_TearUp) == 0x0000D0, "Wrong size on B_Chicken_C_TearUp");
static_assert(offsetof(B_Chicken_C_TearUp, SpawnTransform) == 0x000000, "Member 'B_Chicken_C_TearUp::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUp, Owner_0) == 0x000060, "Member 'B_Chicken_C_TearUp::Owner_0' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUp, Instigator_0) == 0x000068, "Member 'B_Chicken_C_TearUp::Instigator_0' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUp, CallFunc_GetPitch_ReturnValue) == 0x000070, "Member 'B_Chicken_C_TearUp::CallFunc_GetPitch_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUp, CallFunc_BreakTransform_Location) == 0x000078, "Member 'B_Chicken_C_TearUp::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUp, CallFunc_BreakTransform_Rotation) == 0x000090, "Member 'B_Chicken_C_TearUp::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUp, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'B_Chicken_C_TearUp::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUp, CallFunc_PlaySoundAtLocation_PitchMultiplier_ImplicitCast) == 0x0000C0, "Member 'B_Chicken_C_TearUp::CallFunc_PlaySoundAtLocation_PitchMultiplier_ImplicitCast' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.TearUpMulti
// 0x0070 (0x0070 - 0x0000)
struct B_Chicken_C_TearUpMulti final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Owner_0;                                           // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Instigator_0;                                      // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_TearUpMulti) == 0x000010, "Wrong alignment on B_Chicken_C_TearUpMulti");
static_assert(sizeof(B_Chicken_C_TearUpMulti) == 0x000070, "Wrong size on B_Chicken_C_TearUpMulti");
static_assert(offsetof(B_Chicken_C_TearUpMulti, SpawnTransform) == 0x000000, "Member 'B_Chicken_C_TearUpMulti::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUpMulti, Owner_0) == 0x000060, "Member 'B_Chicken_C_TearUpMulti::Owner_0' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUpMulti, Instigator_0) == 0x000068, "Member 'B_Chicken_C_TearUpMulti::Instigator_0' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.TearUpPoolObject
// 0x0070 (0x0070 - 0x0000)
struct B_Chicken_C_TearUpPoolObject final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Owner_0;                                           // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Instigator_0;                                      // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_TearUpPoolObject) == 0x000010, "Wrong alignment on B_Chicken_C_TearUpPoolObject");
static_assert(sizeof(B_Chicken_C_TearUpPoolObject) == 0x000070, "Wrong size on B_Chicken_C_TearUpPoolObject");
static_assert(offsetof(B_Chicken_C_TearUpPoolObject, SpawnTransform) == 0x000000, "Member 'B_Chicken_C_TearUpPoolObject::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUpPoolObject, Owner_0) == 0x000060, "Member 'B_Chicken_C_TearUpPoolObject::Owner_0' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_TearUpPoolObject, Instigator_0) == 0x000068, "Member 'B_Chicken_C_TearUpPoolObject::Instigator_0' has a wrong offset!");

// Function B_Chicken.B_Chicken_C.UpdateVelocity
// 0x0040 (0x0040 - 0x0000)
struct B_Chicken_C_UpdateVelocity final
{
public:
	class UB_SkillParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SetVectorLength_ReturnValue;              // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVectorLength_size_ImplicitCast;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Chicken_C_UpdateVelocity) == 0x000008, "Wrong alignment on B_Chicken_C_UpdateVelocity");
static_assert(sizeof(B_Chicken_C_UpdateVelocity) == 0x000040, "Wrong size on B_Chicken_C_UpdateVelocity");
static_assert(offsetof(B_Chicken_C_UpdateVelocity, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000000, "Member 'B_Chicken_C_UpdateVelocity::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_UpdateVelocity, CallFunc_GetActorForwardVector_ReturnValue) == 0x000008, "Member 'B_Chicken_C_UpdateVelocity::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_UpdateVelocity, CallFunc_SetVectorLength_ReturnValue) == 0x000020, "Member 'B_Chicken_C_UpdateVelocity::CallFunc_SetVectorLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Chicken_C_UpdateVelocity, CallFunc_SetVectorLength_size_ImplicitCast) == 0x000038, "Member 'B_Chicken_C_UpdateVelocity::CallFunc_SetVectorLength_size_ImplicitCast' has a wrong offset!");

}

