#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Clock

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function B_Clock.B_Clock_C.GetVisualInterpolators
// 0x0048 (0x0048 - 0x0000)
struct B_Clock_C_GetVisualInterpolators final
{
public:
	TArray<class AB_VisualIntepolator_C*>         VisualInterpolators;                               // 0x0000(0x0010)(Parm, OutParm)
	TArray<class AB_VisualIntepolator_C*>         Interpolators;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class AB_VisualIntepolator_C*                 CallFunc_CreateVisualInterpolatorForMesh_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_VisualIntepolator_C*                 CallFunc_CreateVisualInterpolatorForMesh_ReturnValue_1; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_VisualIntepolator_C*>         CallFunc_GetVisualInterpolators_VisualInterpolators; // 0x0038(0x0010)(ReferenceParm)
};
static_assert(alignof(B_Clock_C_GetVisualInterpolators) == 0x000008, "Wrong alignment on B_Clock_C_GetVisualInterpolators");
static_assert(sizeof(B_Clock_C_GetVisualInterpolators) == 0x000048, "Wrong size on B_Clock_C_GetVisualInterpolators");
static_assert(offsetof(B_Clock_C_GetVisualInterpolators, VisualInterpolators) == 0x000000, "Member 'B_Clock_C_GetVisualInterpolators::VisualInterpolators' has a wrong offset!");
static_assert(offsetof(B_Clock_C_GetVisualInterpolators, Interpolators) == 0x000010, "Member 'B_Clock_C_GetVisualInterpolators::Interpolators' has a wrong offset!");
static_assert(offsetof(B_Clock_C_GetVisualInterpolators, CallFunc_CreateVisualInterpolatorForMesh_ReturnValue) == 0x000020, "Member 'B_Clock_C_GetVisualInterpolators::CallFunc_CreateVisualInterpolatorForMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_GetVisualInterpolators, CallFunc_CreateVisualInterpolatorForMesh_ReturnValue_1) == 0x000028, "Member 'B_Clock_C_GetVisualInterpolators::CallFunc_CreateVisualInterpolatorForMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_GetVisualInterpolators, CallFunc_Array_Add_ReturnValue) == 0x000030, "Member 'B_Clock_C_GetVisualInterpolators::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_GetVisualInterpolators, CallFunc_Array_Add_ReturnValue_1) == 0x000034, "Member 'B_Clock_C_GetVisualInterpolators::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_GetVisualInterpolators, CallFunc_GetVisualInterpolators_VisualInterpolators) == 0x000038, "Member 'B_Clock_C_GetVisualInterpolators::CallFunc_GetVisualInterpolators_VisualInterpolators' has a wrong offset!");

// Function B_Clock.B_Clock_C.UpdateClockTime
// 0x0068 (0x0068 - 0x0000)
struct B_Clock_C_UpdateClockTime final
{
public:
	int32                                         RemainingSeconds;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SeekGameState_C*                     K2Node_DynamicCast_AsB_Seek_Game_State;            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SeekGameState_C*                     K2Node_DynamicCast_AsB_Seek_Game_State_1;          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Clock_C_UpdateClockTime) == 0x000008, "Wrong alignment on B_Clock_C_UpdateClockTime");
static_assert(sizeof(B_Clock_C_UpdateClockTime) == 0x000068, "Wrong size on B_Clock_C_UpdateClockTime");
static_assert(offsetof(B_Clock_C_UpdateClockTime, RemainingSeconds) == 0x000000, "Member 'B_Clock_C_UpdateClockTime::RemainingSeconds' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_Clock_C_UpdateClockTime::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_IsDedicatedServer_ReturnValue) == 0x000010, "Member 'B_Clock_C_UpdateClockTime::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, K2Node_DynamicCast_AsB_Seek_Game_State) == 0x000018, "Member 'B_Clock_C_UpdateClockTime::K2Node_DynamicCast_AsB_Seek_Game_State' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_Clock_C_UpdateClockTime::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'B_Clock_C_UpdateClockTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000028, "Member 'B_Clock_C_UpdateClockTime::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_GetGameState_ReturnValue_1) == 0x000030, "Member 'B_Clock_C_UpdateClockTime::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_Greater_IntInt_ReturnValue) == 0x000038, "Member 'B_Clock_C_UpdateClockTime::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, K2Node_DynamicCast_AsB_Seek_Game_State_1) == 0x000040, "Member 'B_Clock_C_UpdateClockTime::K2Node_DynamicCast_AsB_Seek_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'B_Clock_C_UpdateClockTime::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, K2Node_SwitchEnum_CmpSuccess) == 0x000049, "Member 'B_Clock_C_UpdateClockTime::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000050, "Member 'B_Clock_C_UpdateClockTime::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'B_Clock_C_UpdateClockTime::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_UpdateClockTime, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'B_Clock_C_UpdateClockTime::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_Clock.B_Clock_C.RotateHands
// 0x0238 (0x0238 - 0x0000)
struct B_Clock_C_RotateHands final
{
public:
	double                                        NewRotation;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0040(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x0138(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast_1;          // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Clock_C_RotateHands) == 0x000008, "Wrong alignment on B_Clock_C_RotateHands");
static_assert(sizeof(B_Clock_C_RotateHands) == 0x000238, "Wrong size on B_Clock_C_RotateHands");
static_assert(offsetof(B_Clock_C_RotateHands, NewRotation) == 0x000000, "Member 'B_Clock_C_RotateHands::NewRotation' has a wrong offset!");
static_assert(offsetof(B_Clock_C_RotateHands, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'B_Clock_C_RotateHands::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_RotateHands, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_Clock_C_RotateHands::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_RotateHands, CallFunc_MakeRotator_ReturnValue_1) == 0x000028, "Member 'B_Clock_C_RotateHands::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_RotateHands, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000040, "Member 'B_Clock_C_RotateHands::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_Clock_C_RotateHands, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x000138, "Member 'B_Clock_C_RotateHands::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_RotateHands, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000230, "Member 'B_Clock_C_RotateHands::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Clock_C_RotateHands, CallFunc_MakeRotator_Roll_ImplicitCast_1) == 0x000234, "Member 'B_Clock_C_RotateHands::CallFunc_MakeRotator_Roll_ImplicitCast_1' has a wrong offset!");

// Function B_Clock.B_Clock_C.SetTotalSecondsAndStart
// 0x0018 (0x0018 - 0x0000)
struct B_Clock_C_SetTotalSecondsAndStart final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_SeekGameState_C*                     K2Node_DynamicCast_AsB_Seek_Game_State;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Clock_C_SetTotalSecondsAndStart) == 0x000008, "Wrong alignment on B_Clock_C_SetTotalSecondsAndStart");
static_assert(sizeof(B_Clock_C_SetTotalSecondsAndStart) == 0x000018, "Wrong size on B_Clock_C_SetTotalSecondsAndStart");
static_assert(offsetof(B_Clock_C_SetTotalSecondsAndStart, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_Clock_C_SetTotalSecondsAndStart::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_SetTotalSecondsAndStart, K2Node_DynamicCast_AsB_Seek_Game_State) == 0x000008, "Member 'B_Clock_C_SetTotalSecondsAndStart::K2Node_DynamicCast_AsB_Seek_Game_State' has a wrong offset!");
static_assert(offsetof(B_Clock_C_SetTotalSecondsAndStart, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Clock_C_SetTotalSecondsAndStart::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_Clock.B_Clock_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_Clock_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Clock_C_ReceiveTick) == 0x000004, "Wrong alignment on B_Clock_C_ReceiveTick");
static_assert(sizeof(B_Clock_C_ReceiveTick) == 0x000004, "Wrong size on B_Clock_C_ReceiveTick");
static_assert(offsetof(B_Clock_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_Clock_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_Clock.B_Clock_C.ExecuteUbergraph_B_Clock
// 0x0058 (0x0058 - 0x0000)
struct B_Clock_C_ExecuteUbergraph_B_Clock final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SeekGameState_C*                     K2Node_DynamicCast_AsB_Seek_Game_State;            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Clock_C_ExecuteUbergraph_B_Clock) == 0x000008, "Wrong alignment on B_Clock_C_ExecuteUbergraph_B_Clock");
static_assert(sizeof(B_Clock_C_ExecuteUbergraph_B_Clock) == 0x000058, "Wrong size on B_Clock_C_ExecuteUbergraph_B_Clock");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, EntryPoint) == 0x000000, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, CallFunc_GetGameState_ReturnValue_1) == 0x000010, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_DynamicCast_AsB_Game_State) == 0x000018, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_DynamicCast_AsB_Game_State_1) == 0x000028, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_DynamicCast_AsB_Seek_Game_State) == 0x000038, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_DynamicCast_AsB_Seek_Game_State' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_SwitchEnum_CmpSuccess) == 0x000041, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_Event_DeltaSeconds) == 0x000044, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_Clock_C_ExecuteUbergraph_B_Clock, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'B_Clock_C_ExecuteUbergraph_B_Clock::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

}

