#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PoolManager

#include "Basic.hpp"

#include "B_PoolManager_classes.hpp"
#include "B_PoolManager_parameters.hpp"


namespace SDK
{

// Function B_PoolManager.B_PoolManager_C.AddActorToPool
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_Pool_C*                        Pool                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorToAdd                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_PoolManager_C::AddActorToPool(class UB_Pool_C* Pool, class AActor* ActorToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "AddActorToPool");

	Params::B_PoolManager_C_AddActorToPool Parms{};

	Parms.Pool = Pool;
	Parms.ActorToAdd = ActorToAdd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoolManager.B_PoolManager_C.AddPoolIfNewClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Pool_Class_To_Add                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UB_PoolManager_C::AddPoolIfNewClass(const class UClass*& Pool_Class_To_Add)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "AddPoolIfNewClass");

	Params::B_PoolManager_C_AddPoolIfNewClass Parms{};

	Parms.Pool_Class_To_Add = Pool_Class_To_Add;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoolManager.B_PoolManager_C.EmptyPools
// (Public, BlueprintCallable, BlueprintEvent)

void UB_PoolManager_C::EmptyPools()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "EmptyPools");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PoolManager.B_PoolManager_C.GetPoolByClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UB_Pool_C*                        Pool                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_PoolManager_C::GetPoolByClass(class UClass* Param_Class, class UB_Pool_C** Pool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "GetPoolByClass");

	Params::B_PoolManager_C_GetPoolByClass Parms{};

	Parms.Param_Class = Param_Class;

	UObject::ProcessEvent(Func, &Parms);

	if (Pool != nullptr)
		*Pool = Parms.Pool;
}


// Function B_PoolManager.B_PoolManager_C.MoveActorToPoolAndTearDown
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_PoolManager_C::MoveActorToPoolAndTearDown(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "MoveActorToPoolAndTearDown");

	Params::B_PoolManager_C_MoveActorToPoolAndTearDown Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoolManager.B_PoolManager_C.PoolHasActorReady
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    PoolFilled                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_PoolManager_C::PoolHasActorReady(class UClass* Param_Class, bool* PoolFilled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "PoolHasActorReady");

	Params::B_PoolManager_C_PoolHasActorReady Parms{};

	Parms.Param_Class = Param_Class;

	UObject::ProcessEvent(Func, &Parms);

	if (PoolFilled != nullptr)
		*PoolFilled = Parms.PoolFilled;
}


// Function B_PoolManager.B_PoolManager_C.PoolOfClassExists
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           ClassToFind                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_PoolManager_C::PoolOfClassExists(const class UClass*& ClassToFind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "PoolOfClassExists");

	Params::B_PoolManager_C_PoolOfClassExists Parms{};

	Parms.ClassToFind = ClassToFind;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PoolManager.B_PoolManager_C.RemoveActorFromPool
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_Pool_C*                        Pool                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorToRemove                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_PoolManager_C::RemoveActorFromPool(class UB_Pool_C* Pool, class AActor* ActorToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "RemoveActorFromPool");

	Params::B_PoolManager_C_RemoveActorFromPool Parms{};

	Parms.Pool = Pool;
	Parms.ActorToRemove = ActorToRemove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PoolManager.B_PoolManager_C.SpawnActorAndTearUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class AActor* UB_PoolManager_C::SpawnActorAndTearUp(class UClass* Param_Class, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, class APawn* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "SpawnActorAndTearUp");

	Params::B_PoolManager_C_SpawnActorAndTearUp Parms{};

	Parms.Param_Class = Param_Class;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;
	Parms.Owner = Owner;
	Parms.Instigator = Instigator;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_PoolManager.B_PoolManager_C.TakeActorFromPoolAndTearUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class AActor* UB_PoolManager_C::TakeActorFromPoolAndTearUp(class UClass* Param_Class, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, class APawn* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PoolManager_C", "TakeActorFromPoolAndTearUp");

	Params::B_PoolManager_C_TakeActorFromPoolAndTearUp Parms{};

	Parms.Param_Class = Param_Class;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;
	Parms.Owner = Owner;
	Parms.Instigator = Instigator;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

