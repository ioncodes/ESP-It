#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IProp

#include "Basic.hpp"

#include "IProp_classes.hpp"
#include "IProp_parameters.hpp"


namespace SDK
{

// Function IProp.IProp_C.Action
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForcedBoolean                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::Action(bool* ForcedBoolean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "Action");

	Params::IProp_C_Action Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedBoolean != nullptr)
		*ForcedBoolean = Parms.ForcedBoolean;
}


// Function IProp.IProp_C.ApplyTemplateData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Template                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedBoolean                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::ApplyTemplateData(class AActor* Template, bool* ForcedBoolean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "ApplyTemplateData");

	Params::IProp_C_ApplyTemplateData Parms{};

	Parms.Template = Template;

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedBoolean != nullptr)
		*ForcedBoolean = Parms.ForcedBoolean;
}


// Function IProp.IProp_C.Fly
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetBoost                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedBoolean                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::Fly(double TargetBoost, double DeltaTime, bool* ForcedBoolean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "Fly");

	Params::IProp_C_Fly Parms{};

	Parms.TargetBoost = TargetBoost;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedBoolean != nullptr)
		*ForcedBoolean = Parms.ForcedBoolean;
}


// Function IProp.IProp_C.GetCameraDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CameraDistance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::GetCameraDistance(double* CameraDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "GetCameraDistance");

	Params::IProp_C_GetCameraDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraDistance != nullptr)
		*CameraDistance = Parms.CameraDistance;
}


// Function IProp.IProp_C.GetCenter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Center                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::GetCenter(struct FVector* Center)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "GetCenter");

	Params::IProp_C_GetCenter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Center != nullptr)
		*Center = std::move(Parms.Center);
}


// Function IProp.IProp_C.GetMaxHealth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MaxHealth                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::GetMaxHealth(double* MaxHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "GetMaxHealth");

	Params::IProp_C_GetMaxHealth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxHealth != nullptr)
		*MaxHealth = Parms.MaxHealth;
}


// Function IProp.IProp_C.GetName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void IIProp_C::GetName(class FString* Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "GetName");

	Params::IProp_C_GetName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Name != nullptr)
		*Param_Name = std::move(Parms.Param_Name);
}


// Function IProp.IProp_C.GetRuntimePropData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSRuntimePropData                RuntimePropData                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::GetRuntimePropData(struct FSRuntimePropData* RuntimePropData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "GetRuntimePropData");

	Params::IProp_C_GetRuntimePropData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RuntimePropData != nullptr)
		*RuntimePropData = std::move(Parms.RuntimePropData);
}


// Function IProp.IProp_C.GetSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::GetSize(double* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "GetSize");

	Params::IProp_C_GetSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Size != nullptr)
		*Size = Parms.Size;
}


// Function IProp.IProp_C.GetVisualInterpolators
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AB_VisualIntepolator_C*>   VisualInterpolators                                    (Parm, OutParm)

void IIProp_C::GetVisualInterpolators(TArray<class AB_VisualIntepolator_C*>* VisualInterpolators)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "GetVisualInterpolators");

	Params::IProp_C_GetVisualInterpolators Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (VisualInterpolators != nullptr)
		*VisualInterpolators = std::move(Parms.VisualInterpolators);
}


// Function IProp.IProp_C.Jump
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    JumpSuccess                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::Jump(bool* JumpSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "Jump");

	Params::IProp_C_Jump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (JumpSuccess != nullptr)
		*JumpSuccess = Parms.JumpSuccess;
}


// Function IProp.IProp_C.Move
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedOutput                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::Move(const struct FVector& Vector, bool* ForcedOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "Move");

	Params::IProp_C_Move Parms{};

	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedOutput != nullptr)
		*ForcedOutput = Parms.ForcedOutput;
}


// Function IProp.IProp_C.OffsetPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Prop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       WantedSpawnTransform                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   IgnoreActors                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ValidTransform                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::OffsetPosition(class AActor* Prop, const struct FTransform& WantedSpawnTransform, TArray<class AActor*>& IgnoreActors, bool* ValidTransform, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "OffsetPosition");

	Params::IProp_C_OffsetPosition Parms{};

	Parms.Prop = Prop;
	Parms.WantedSpawnTransform = std::move(WantedSpawnTransform);
	Parms.IgnoreActors = std::move(IgnoreActors);

	UObject::ProcessEvent(Func, &Parms);

	IgnoreActors = std::move(Parms.IgnoreActors);

	if (ValidTransform != nullptr)
		*ValidTransform = Parms.ValidTransform;

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function IProp.IProp_C.SetControlledByWitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AB_PropPawnPhysics_C*             Witch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSRuntimePropData                LastRuntimePropData                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedOutput                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::SetControlledByWitch(class AB_PropPawnPhysics_C* Witch, const struct FSRuntimePropData& LastRuntimePropData, bool* ForcedOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "SetControlledByWitch");

	Params::IProp_C_SetControlledByWitch Parms{};

	Parms.Witch = Witch;
	Parms.LastRuntimePropData = std::move(LastRuntimePropData);

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedOutput != nullptr)
		*ForcedOutput = Parms.ForcedOutput;
}


// Function IProp.IProp_C.SetRuntimeSpeedMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RuntimeSpeedMultiplier                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedBoolean                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::SetRuntimeSpeedMultiplier(double RuntimeSpeedMultiplier, bool* ForcedBoolean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "SetRuntimeSpeedMultiplier");

	Params::IProp_C_SetRuntimeSpeedMultiplier Parms{};

	Parms.RuntimeSpeedMultiplier = RuntimeSpeedMultiplier;

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedBoolean != nullptr)
		*ForcedBoolean = Parms.ForcedBoolean;
}


// Function IProp.IProp_C.SetWantedRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         WantedRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForcedBoolean                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::SetWantedRotation(const struct FRotator& WantedRotation, bool* ForcedBoolean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "SetWantedRotation");

	Params::IProp_C_SetWantedRotation Parms{};

	Parms.WantedRotation = std::move(WantedRotation);

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedBoolean != nullptr)
		*ForcedBoolean = Parms.ForcedBoolean;
}


// Function IProp.IProp_C.Stop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         WantedRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ForcedOutput                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IIProp_C::Stop(bool Start, const struct FRotator& WantedRotation, bool* ForcedOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IProp_C", "Stop");

	Params::IProp_C_Stop Parms{};

	Parms.Start = Start;
	Parms.WantedRotation = std::move(WantedRotation);

	UObject::ProcessEvent(Func, &Parms);

	if (ForcedOutput != nullptr)
		*ForcedOutput = Parms.ForcedOutput;
}

}

