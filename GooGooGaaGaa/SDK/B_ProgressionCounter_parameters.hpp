#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ProgressionCounter

#include "Basic.hpp"


namespace SDK::Params
{

// Function B_ProgressionCounter.B_ProgressionCounter_C.IsValueExceedingProgressionTarget
// 0x0001 (0x0001 - 0x0000)
struct B_ProgressionCounter_C_IsValueExceedingProgressionTarget final
{
public:
	bool                                          ValueEceedsProgressionTarget;                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ProgressionCounter_C_IsValueExceedingProgressionTarget) == 0x000001, "Wrong alignment on B_ProgressionCounter_C_IsValueExceedingProgressionTarget");
static_assert(sizeof(B_ProgressionCounter_C_IsValueExceedingProgressionTarget) == 0x000001, "Wrong size on B_ProgressionCounter_C_IsValueExceedingProgressionTarget");
static_assert(offsetof(B_ProgressionCounter_C_IsValueExceedingProgressionTarget, ValueEceedsProgressionTarget) == 0x000000, "Member 'B_ProgressionCounter_C_IsValueExceedingProgressionTarget::ValueEceedsProgressionTarget' has a wrong offset!");

// Function B_ProgressionCounter.B_ProgressionCounter_C.UpdateCurrentToRemainingValue
// 0x0030 (0x0030 - 0x0000)
struct B_ProgressionCounter_C_UpdateCurrentToRemainingValue final
{
public:
	double                                        TimeDelta;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ValueThisTick;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ProgressionCounter_C_UpdateCurrentToRemainingValue) == 0x000008, "Wrong alignment on B_ProgressionCounter_C_UpdateCurrentToRemainingValue");
static_assert(sizeof(B_ProgressionCounter_C_UpdateCurrentToRemainingValue) == 0x000030, "Wrong size on B_ProgressionCounter_C_UpdateCurrentToRemainingValue");
static_assert(offsetof(B_ProgressionCounter_C_UpdateCurrentToRemainingValue, TimeDelta) == 0x000000, "Member 'B_ProgressionCounter_C_UpdateCurrentToRemainingValue::TimeDelta' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_UpdateCurrentToRemainingValue, ValueThisTick) == 0x000008, "Member 'B_ProgressionCounter_C_UpdateCurrentToRemainingValue::ValueThisTick' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_UpdateCurrentToRemainingValue, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'B_ProgressionCounter_C_UpdateCurrentToRemainingValue::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_UpdateCurrentToRemainingValue, CallFunc_FMax_ReturnValue) == 0x000018, "Member 'B_ProgressionCounter_C_UpdateCurrentToRemainingValue::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_UpdateCurrentToRemainingValue, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_ProgressionCounter_C_UpdateCurrentToRemainingValue::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_UpdateCurrentToRemainingValue, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'B_ProgressionCounter_C_UpdateCurrentToRemainingValue::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_ProgressionCounter.B_ProgressionCounter_C.Update Value
// 0x0010 (0x0010 - 0x0000)
struct B_ProgressionCounter_C_Update_Value final
{
public:
	double                                        TimeDelta;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValueExceedingProgressionTarget_ValueEceedsProgressionTarget; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ProgressionCounter_C_Update_Value) == 0x000008, "Wrong alignment on B_ProgressionCounter_C_Update_Value");
static_assert(sizeof(B_ProgressionCounter_C_Update_Value) == 0x000010, "Wrong size on B_ProgressionCounter_C_Update_Value");
static_assert(offsetof(B_ProgressionCounter_C_Update_Value, TimeDelta) == 0x000000, "Member 'B_ProgressionCounter_C_Update_Value::TimeDelta' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_Update_Value, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_ProgressionCounter_C_Update_Value::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_Update_Value, CallFunc_IsValueExceedingProgressionTarget_ValueEceedsProgressionTarget) == 0x000009, "Member 'B_ProgressionCounter_C_Update_Value::CallFunc_IsValueExceedingProgressionTarget_ValueEceedsProgressionTarget' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_Update_Value, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00000A, "Member 'B_ProgressionCounter_C_Update_Value::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_ProgressionCounter.B_ProgressionCounter_C.GrantValue
// 0x0038 (0x0038 - 0x0000)
struct B_ProgressionCounter_C_GrantValue final
{
public:
	double                                        Amount;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   ValueName;                                         // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	double                                        Time;                                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A7F[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ProgressionCounter_C_GrantValue) == 0x000008, "Wrong alignment on B_ProgressionCounter_C_GrantValue");
static_assert(sizeof(B_ProgressionCounter_C_GrantValue) == 0x000038, "Wrong size on B_ProgressionCounter_C_GrantValue");
static_assert(offsetof(B_ProgressionCounter_C_GrantValue, Amount) == 0x000000, "Member 'B_ProgressionCounter_C_GrantValue::Amount' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_GrantValue, ValueName) == 0x000008, "Member 'B_ProgressionCounter_C_GrantValue::ValueName' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_GrantValue, Time) == 0x000020, "Member 'B_ProgressionCounter_C_GrantValue::Time' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_GrantValue, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'B_ProgressionCounter_C_GrantValue::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_GrantValue, CallFunc_FTrunc_ReturnValue) == 0x00002C, "Member 'B_ProgressionCounter_C_GrantValue::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_GrantValue, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'B_ProgressionCounter_C_GrantValue::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_ProgressionCounter.B_ProgressionCounter_C.StartGranting__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct B_ProgressionCounter_C_StartGranting__DelegateSignature final
{
public:
	class FText                                   ValueName;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         TotalAmount;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ProgressionCounter_C_StartGranting__DelegateSignature) == 0x000008, "Wrong alignment on B_ProgressionCounter_C_StartGranting__DelegateSignature");
static_assert(sizeof(B_ProgressionCounter_C_StartGranting__DelegateSignature) == 0x000020, "Wrong size on B_ProgressionCounter_C_StartGranting__DelegateSignature");
static_assert(offsetof(B_ProgressionCounter_C_StartGranting__DelegateSignature, ValueName) == 0x000000, "Member 'B_ProgressionCounter_C_StartGranting__DelegateSignature::ValueName' has a wrong offset!");
static_assert(offsetof(B_ProgressionCounter_C_StartGranting__DelegateSignature, TotalAmount) == 0x000018, "Member 'B_ProgressionCounter_C_StartGranting__DelegateSignature::TotalAmount' has a wrong offset!");

// Function B_ProgressionCounter.B_ProgressionCounter_C.GrantFinished__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct B_ProgressionCounter_C_GrantFinished__DelegateSignature final
{
public:
	bool                                          NoValueGranted;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ProgressionCounter_C_GrantFinished__DelegateSignature) == 0x000001, "Wrong alignment on B_ProgressionCounter_C_GrantFinished__DelegateSignature");
static_assert(sizeof(B_ProgressionCounter_C_GrantFinished__DelegateSignature) == 0x000001, "Wrong size on B_ProgressionCounter_C_GrantFinished__DelegateSignature");
static_assert(offsetof(B_ProgressionCounter_C_GrantFinished__DelegateSignature, NoValueGranted) == 0x000000, "Member 'B_ProgressionCounter_C_GrantFinished__DelegateSignature::NoValueGranted' has a wrong offset!");

}

