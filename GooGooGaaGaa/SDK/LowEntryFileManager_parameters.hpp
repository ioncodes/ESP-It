#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LowEntryFileManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "LowEntryFileManager_structs.hpp"


namespace SDK::Params
{

// Function LowEntryFileManager.LowEntryFileManagerDirectory.CopyTo
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerDirectory_CopyTo final
{
public:
	class ULowEntryFileManagerDirectory*          NewDirectory;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideExistingFiles;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2281[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerDirectory_CopyTo) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_CopyTo");
static_assert(sizeof(LowEntryFileManagerDirectory_CopyTo) == 0x000010, "Wrong size on LowEntryFileManagerDirectory_CopyTo");
static_assert(offsetof(LowEntryFileManagerDirectory_CopyTo, NewDirectory) == 0x000000, "Member 'LowEntryFileManagerDirectory_CopyTo::NewDirectory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerDirectory_CopyTo, OverrideExistingFiles) == 0x000008, "Member 'LowEntryFileManagerDirectory_CopyTo::OverrideExistingFiles' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.Exists
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerDirectory_Exists final
{
public:
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_Exists) == 0x000001, "Wrong alignment on LowEntryFileManagerDirectory_Exists");
static_assert(sizeof(LowEntryFileManagerDirectory_Exists) == 0x000001, "Wrong size on LowEntryFileManagerDirectory_Exists");
static_assert(offsetof(LowEntryFileManagerDirectory_Exists, Branch) == 0x000000, "Member 'LowEntryFileManagerDirectory_Exists::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.ExistsBool
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerDirectory_ExistsBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_ExistsBool) == 0x000001, "Wrong alignment on LowEntryFileManagerDirectory_ExistsBool");
static_assert(sizeof(LowEntryFileManagerDirectory_ExistsBool) == 0x000001, "Wrong size on LowEntryFileManagerDirectory_ExistsBool");
static_assert(offsetof(LowEntryFileManagerDirectory_ExistsBool, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_ExistsBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetDirectories
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerDirectory_GetDirectories final
{
public:
	TArray<class ULowEntryFileManagerDirectory*>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_GetDirectories) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_GetDirectories");
static_assert(sizeof(LowEntryFileManagerDirectory_GetDirectories) == 0x000010, "Wrong size on LowEntryFileManagerDirectory_GetDirectories");
static_assert(offsetof(LowEntryFileManagerDirectory_GetDirectories, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_GetDirectories::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetDirectory
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerDirectory_GetDirectory final
{
public:
	class FString                                 Directory_;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryFileManagerDirectory*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_GetDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_GetDirectory");
static_assert(sizeof(LowEntryFileManagerDirectory_GetDirectory) == 0x000018, "Wrong size on LowEntryFileManagerDirectory_GetDirectory");
static_assert(offsetof(LowEntryFileManagerDirectory_GetDirectory, Directory_) == 0x000000, "Member 'LowEntryFileManagerDirectory_GetDirectory::Directory_' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerDirectory_GetDirectory, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerDirectory_GetDirectory::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetFile
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerDirectory_GetFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryFileManagerFile*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_GetFile) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_GetFile");
static_assert(sizeof(LowEntryFileManagerDirectory_GetFile) == 0x000018, "Wrong size on LowEntryFileManagerDirectory_GetFile");
static_assert(offsetof(LowEntryFileManagerDirectory_GetFile, File) == 0x000000, "Member 'LowEntryFileManagerDirectory_GetFile::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerDirectory_GetFile, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerDirectory_GetFile::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetFiles
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerDirectory_GetFiles final
{
public:
	TArray<class ULowEntryFileManagerFile*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_GetFiles) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_GetFiles");
static_assert(sizeof(LowEntryFileManagerDirectory_GetFiles) == 0x000010, "Wrong size on LowEntryFileManagerDirectory_GetFiles");
static_assert(offsetof(LowEntryFileManagerDirectory_GetFiles, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_GetFiles::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetParentDirectory
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerDirectory_GetParentDirectory final
{
public:
	class ULowEntryFileManagerDirectory*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_GetParentDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_GetParentDirectory");
static_assert(sizeof(LowEntryFileManagerDirectory_GetParentDirectory) == 0x000008, "Wrong size on LowEntryFileManagerDirectory_GetParentDirectory");
static_assert(offsetof(LowEntryFileManagerDirectory_GetParentDirectory, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_GetParentDirectory::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerDirectory_IsEmpty final
{
public:
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_IsEmpty) == 0x000001, "Wrong alignment on LowEntryFileManagerDirectory_IsEmpty");
static_assert(sizeof(LowEntryFileManagerDirectory_IsEmpty) == 0x000001, "Wrong size on LowEntryFileManagerDirectory_IsEmpty");
static_assert(offsetof(LowEntryFileManagerDirectory_IsEmpty, Branch) == 0x000000, "Member 'LowEntryFileManagerDirectory_IsEmpty::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.IsEmptyBool
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerDirectory_IsEmptyBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_IsEmptyBool) == 0x000001, "Wrong alignment on LowEntryFileManagerDirectory_IsEmptyBool");
static_assert(sizeof(LowEntryFileManagerDirectory_IsEmptyBool) == 0x000001, "Wrong size on LowEntryFileManagerDirectory_IsEmptyBool");
static_assert(offsetof(LowEntryFileManagerDirectory_IsEmptyBool, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_IsEmptyBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.IsRoot
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerDirectory_IsRoot final
{
public:
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_IsRoot) == 0x000001, "Wrong alignment on LowEntryFileManagerDirectory_IsRoot");
static_assert(sizeof(LowEntryFileManagerDirectory_IsRoot) == 0x000001, "Wrong size on LowEntryFileManagerDirectory_IsRoot");
static_assert(offsetof(LowEntryFileManagerDirectory_IsRoot, Branch) == 0x000000, "Member 'LowEntryFileManagerDirectory_IsRoot::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.IsRootBool
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerDirectory_IsRootBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_IsRootBool) == 0x000001, "Wrong alignment on LowEntryFileManagerDirectory_IsRootBool");
static_assert(sizeof(LowEntryFileManagerDirectory_IsRootBool) == 0x000001, "Wrong size on LowEntryFileManagerDirectory_IsRootBool");
static_assert(offsetof(LowEntryFileManagerDirectory_IsRootBool, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_IsRootBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.MoveTo
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerDirectory_MoveTo final
{
public:
	class ULowEntryFileManagerDirectory*          NewDirectory;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideExistingFiles;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2282[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerDirectory_MoveTo) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_MoveTo");
static_assert(sizeof(LowEntryFileManagerDirectory_MoveTo) == 0x000010, "Wrong size on LowEntryFileManagerDirectory_MoveTo");
static_assert(offsetof(LowEntryFileManagerDirectory_MoveTo, NewDirectory) == 0x000000, "Member 'LowEntryFileManagerDirectory_MoveTo::NewDirectory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerDirectory_MoveTo, OverrideExistingFiles) == 0x000008, "Member 'LowEntryFileManagerDirectory_MoveTo::OverrideExistingFiles' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetAbsolutePath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerDirectory_GetAbsolutePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_GetAbsolutePath) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_GetAbsolutePath");
static_assert(sizeof(LowEntryFileManagerDirectory_GetAbsolutePath) == 0x000010, "Wrong size on LowEntryFileManagerDirectory_GetAbsolutePath");
static_assert(offsetof(LowEntryFileManagerDirectory_GetAbsolutePath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_GetAbsolutePath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetDirName
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerDirectory_GetDirName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_GetDirName) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_GetDirName");
static_assert(sizeof(LowEntryFileManagerDirectory_GetDirName) == 0x000010, "Wrong size on LowEntryFileManagerDirectory_GetDirName");
static_assert(offsetof(LowEntryFileManagerDirectory_GetDirName, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_GetDirName::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerDirectory.GetPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerDirectory_GetPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerDirectory_GetPath) == 0x000008, "Wrong alignment on LowEntryFileManagerDirectory_GetPath");
static_assert(sizeof(LowEntryFileManagerDirectory_GetPath) == 0x000010, "Wrong size on LowEntryFileManagerDirectory_GetPath");
static_assert(offsetof(LowEntryFileManagerDirectory_GetPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerDirectory_GetPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.AppendData
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_AppendData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_AppendData) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_AppendData");
static_assert(sizeof(LowEntryFileManagerFile_AppendData) == 0x000010, "Wrong size on LowEntryFileManagerFile_AppendData");
static_assert(offsetof(LowEntryFileManagerFile_AppendData, Data) == 0x000000, "Member 'LowEntryFileManagerFile_AppendData::Data' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.CopyTo
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerFile_CopyTo final
{
public:
	class ULowEntryFileManagerFile*               NewFile;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_CopyTo) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_CopyTo");
static_assert(sizeof(LowEntryFileManagerFile_CopyTo) == 0x000008, "Wrong size on LowEntryFileManagerFile_CopyTo");
static_assert(offsetof(LowEntryFileManagerFile_CopyTo, NewFile) == 0x000000, "Member 'LowEntryFileManagerFile_CopyTo::NewFile' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.Execute
// 0x0038 (0x0038 - 0x0000)
struct LowEntryFileManagerFile_Execute final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2283[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnCode;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StdOut;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StdErr;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_Execute) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_Execute");
static_assert(sizeof(LowEntryFileManagerFile_Execute) == 0x000038, "Wrong size on LowEntryFileManagerFile_Execute");
static_assert(offsetof(LowEntryFileManagerFile_Execute, Parameters) == 0x000000, "Member 'LowEntryFileManagerFile_Execute::Parameters' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_Execute, Success) == 0x000010, "Member 'LowEntryFileManagerFile_Execute::Success' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_Execute, ReturnCode) == 0x000014, "Member 'LowEntryFileManagerFile_Execute::ReturnCode' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_Execute, StdOut) == 0x000018, "Member 'LowEntryFileManagerFile_Execute::StdOut' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_Execute, StdErr) == 0x000028, "Member 'LowEntryFileManagerFile_Execute::StdErr' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.ExecuteAsync
// 0x0028 (0x0028 - 0x0000)
struct LowEntryFileManagerFile_ExecuteAsync final
{
public:
	class FString                                 Parameters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2284[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProcessId;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2285[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryFileManagerDirectory*          OptionalWorkingDirectory;                          // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_ExecuteAsync) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_ExecuteAsync");
static_assert(sizeof(LowEntryFileManagerFile_ExecuteAsync) == 0x000028, "Wrong size on LowEntryFileManagerFile_ExecuteAsync");
static_assert(offsetof(LowEntryFileManagerFile_ExecuteAsync, Parameters) == 0x000000, "Member 'LowEntryFileManagerFile_ExecuteAsync::Parameters' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_ExecuteAsync, Success) == 0x000010, "Member 'LowEntryFileManagerFile_ExecuteAsync::Success' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_ExecuteAsync, ProcessId) == 0x000014, "Member 'LowEntryFileManagerFile_ExecuteAsync::ProcessId' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_ExecuteAsync, Hidden) == 0x000018, "Member 'LowEntryFileManagerFile_ExecuteAsync::Hidden' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_ExecuteAsync, Priority) == 0x00001C, "Member 'LowEntryFileManagerFile_ExecuteAsync::Priority' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerFile_ExecuteAsync, OptionalWorkingDirectory) == 0x000020, "Member 'LowEntryFileManagerFile_ExecuteAsync::OptionalWorkingDirectory' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.Exists
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerFile_Exists final
{
public:
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_Exists) == 0x000001, "Wrong alignment on LowEntryFileManagerFile_Exists");
static_assert(sizeof(LowEntryFileManagerFile_Exists) == 0x000001, "Wrong size on LowEntryFileManagerFile_Exists");
static_assert(offsetof(LowEntryFileManagerFile_Exists, Branch) == 0x000000, "Member 'LowEntryFileManagerFile_Exists::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.ExistsBool
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerFile_ExistsBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_ExistsBool) == 0x000001, "Wrong alignment on LowEntryFileManagerFile_ExistsBool");
static_assert(sizeof(LowEntryFileManagerFile_ExistsBool) == 0x000001, "Wrong size on LowEntryFileManagerFile_ExistsBool");
static_assert(offsetof(LowEntryFileManagerFile_ExistsBool, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_ExistsBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetAccessTimestamp
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerFile_GetAccessTimestamp final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetAccessTimestamp) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetAccessTimestamp");
static_assert(sizeof(LowEntryFileManagerFile_GetAccessTimestamp) == 0x000008, "Wrong size on LowEntryFileManagerFile_GetAccessTimestamp");
static_assert(offsetof(LowEntryFileManagerFile_GetAccessTimestamp, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetAccessTimestamp::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetData
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_GetData final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetData) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetData");
static_assert(sizeof(LowEntryFileManagerFile_GetData) == 0x000010, "Wrong size on LowEntryFileManagerFile_GetData");
static_assert(offsetof(LowEntryFileManagerFile_GetData, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetData::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetDataUnsafe
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_GetDataUnsafe final
{
public:
	TArray<uint8>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetDataUnsafe) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetDataUnsafe");
static_assert(sizeof(LowEntryFileManagerFile_GetDataUnsafe) == 0x000010, "Wrong size on LowEntryFileManagerFile_GetDataUnsafe");
static_assert(offsetof(LowEntryFileManagerFile_GetDataUnsafe, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetDataUnsafe::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetParentDirectory
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerFile_GetParentDirectory final
{
public:
	class ULowEntryFileManagerDirectory*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetParentDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetParentDirectory");
static_assert(sizeof(LowEntryFileManagerFile_GetParentDirectory) == 0x000008, "Wrong size on LowEntryFileManagerFile_GetParentDirectory");
static_assert(offsetof(LowEntryFileManagerFile_GetParentDirectory, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetParentDirectory::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerFile_GetTimeStamp final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetTimeStamp) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetTimeStamp");
static_assert(sizeof(LowEntryFileManagerFile_GetTimeStamp) == 0x000008, "Wrong size on LowEntryFileManagerFile_GetTimeStamp");
static_assert(offsetof(LowEntryFileManagerFile_GetTimeStamp, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetTimeStamp::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerFile_IsEmpty final
{
public:
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_IsEmpty) == 0x000001, "Wrong alignment on LowEntryFileManagerFile_IsEmpty");
static_assert(sizeof(LowEntryFileManagerFile_IsEmpty) == 0x000001, "Wrong size on LowEntryFileManagerFile_IsEmpty");
static_assert(offsetof(LowEntryFileManagerFile_IsEmpty, Branch) == 0x000000, "Member 'LowEntryFileManagerFile_IsEmpty::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.IsEmptyBool
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerFile_IsEmptyBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_IsEmptyBool) == 0x000001, "Wrong alignment on LowEntryFileManagerFile_IsEmptyBool");
static_assert(sizeof(LowEntryFileManagerFile_IsEmptyBool) == 0x000001, "Wrong size on LowEntryFileManagerFile_IsEmptyBool");
static_assert(offsetof(LowEntryFileManagerFile_IsEmptyBool, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_IsEmptyBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.IsReadOnly
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerFile_IsReadOnly final
{
public:
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_IsReadOnly) == 0x000001, "Wrong alignment on LowEntryFileManagerFile_IsReadOnly");
static_assert(sizeof(LowEntryFileManagerFile_IsReadOnly) == 0x000001, "Wrong size on LowEntryFileManagerFile_IsReadOnly");
static_assert(offsetof(LowEntryFileManagerFile_IsReadOnly, Branch) == 0x000000, "Member 'LowEntryFileManagerFile_IsReadOnly::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.IsReadOnlyBool
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerFile_IsReadOnlyBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_IsReadOnlyBool) == 0x000001, "Wrong alignment on LowEntryFileManagerFile_IsReadOnlyBool");
static_assert(sizeof(LowEntryFileManagerFile_IsReadOnlyBool) == 0x000001, "Wrong size on LowEntryFileManagerFile_IsReadOnlyBool");
static_assert(offsetof(LowEntryFileManagerFile_IsReadOnlyBool, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_IsReadOnlyBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.MoveTo
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerFile_MoveTo final
{
public:
	class ULowEntryFileManagerFile*               NewFile;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_MoveTo) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_MoveTo");
static_assert(sizeof(LowEntryFileManagerFile_MoveTo) == 0x000008, "Wrong size on LowEntryFileManagerFile_MoveTo");
static_assert(offsetof(LowEntryFileManagerFile_MoveTo, NewFile) == 0x000000, "Member 'LowEntryFileManagerFile_MoveTo::NewFile' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.SetData
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_SetData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_SetData) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_SetData");
static_assert(sizeof(LowEntryFileManagerFile_SetData) == 0x000010, "Wrong size on LowEntryFileManagerFile_SetData");
static_assert(offsetof(LowEntryFileManagerFile_SetData, Data) == 0x000000, "Member 'LowEntryFileManagerFile_SetData::Data' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.SetReadOnly
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerFile_SetReadOnly final
{
public:
	bool                                          ReadOnly;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_SetReadOnly) == 0x000001, "Wrong alignment on LowEntryFileManagerFile_SetReadOnly");
static_assert(sizeof(LowEntryFileManagerFile_SetReadOnly) == 0x000001, "Wrong size on LowEntryFileManagerFile_SetReadOnly");
static_assert(offsetof(LowEntryFileManagerFile_SetReadOnly, ReadOnly) == 0x000000, "Member 'LowEntryFileManagerFile_SetReadOnly::ReadOnly' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.SetTimestamp
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerFile_SetTimestamp final
{
public:
	struct FDateTime                              Timestamp;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_SetTimestamp) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_SetTimestamp");
static_assert(sizeof(LowEntryFileManagerFile_SetTimestamp) == 0x000008, "Wrong size on LowEntryFileManagerFile_SetTimestamp");
static_assert(offsetof(LowEntryFileManagerFile_SetTimestamp, Timestamp) == 0x000000, "Member 'LowEntryFileManagerFile_SetTimestamp::Timestamp' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.Size
// 0x0004 (0x0004 - 0x0000)
struct LowEntryFileManagerFile_Size final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_Size) == 0x000004, "Wrong alignment on LowEntryFileManagerFile_Size");
static_assert(sizeof(LowEntryFileManagerFile_Size) == 0x000004, "Wrong size on LowEntryFileManagerFile_Size");
static_assert(offsetof(LowEntryFileManagerFile_Size, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_Size::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.SizeUnsafe
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerFile_SizeUnsafe final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_SizeUnsafe) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_SizeUnsafe");
static_assert(sizeof(LowEntryFileManagerFile_SizeUnsafe) == 0x000008, "Wrong size on LowEntryFileManagerFile_SizeUnsafe");
static_assert(offsetof(LowEntryFileManagerFile_SizeUnsafe, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_SizeUnsafe::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetAbsolutePath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_GetAbsolutePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetAbsolutePath) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetAbsolutePath");
static_assert(sizeof(LowEntryFileManagerFile_GetAbsolutePath) == 0x000010, "Wrong size on LowEntryFileManagerFile_GetAbsolutePath");
static_assert(offsetof(LowEntryFileManagerFile_GetAbsolutePath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetAbsolutePath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetExtension
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_GetExtension final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetExtension) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetExtension");
static_assert(sizeof(LowEntryFileManagerFile_GetExtension) == 0x000010, "Wrong size on LowEntryFileManagerFile_GetExtension");
static_assert(offsetof(LowEntryFileManagerFile_GetExtension, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetExtension::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetFileName
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_GetFileName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetFileName) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetFileName");
static_assert(sizeof(LowEntryFileManagerFile_GetFileName) == 0x000010, "Wrong size on LowEntryFileManagerFile_GetFileName");
static_assert(offsetof(LowEntryFileManagerFile_GetFileName, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetFileName::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetFileNameWithoutExtension
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_GetFileNameWithoutExtension final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetFileNameWithoutExtension) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetFileNameWithoutExtension");
static_assert(sizeof(LowEntryFileManagerFile_GetFileNameWithoutExtension) == 0x000010, "Wrong size on LowEntryFileManagerFile_GetFileNameWithoutExtension");
static_assert(offsetof(LowEntryFileManagerFile_GetFileNameWithoutExtension, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetFileNameWithoutExtension::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerFile.GetPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerFile_GetPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerFile_GetPath) == 0x000008, "Wrong alignment on LowEntryFileManagerFile_GetPath");
static_assert(sizeof(LowEntryFileManagerFile_GetPath) == 0x000010, "Wrong size on LowEntryFileManagerFile_GetPath");
static_assert(offsetof(LowEntryFileManagerFile_GetPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerFile_GetPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.AppendFileData
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_AppendFileData final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_AppendFileData) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_AppendFileData");
static_assert(sizeof(LowEntryFileManagerLibrary_AppendFileData) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_AppendFileData");
static_assert(offsetof(LowEntryFileManagerLibrary_AppendFileData, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_AppendFileData::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_AppendFileData, Data) == 0x000010, "Member 'LowEntryFileManagerLibrary_AppendFileData::Data' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.ClearDirectory
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_ClearDirectory final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_ClearDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_ClearDirectory");
static_assert(sizeof(LowEntryFileManagerLibrary_ClearDirectory) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_ClearDirectory");
static_assert(offsetof(LowEntryFileManagerLibrary_ClearDirectory, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_ClearDirectory::Directory' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.ClearFile
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_ClearFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_ClearFile) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_ClearFile");
static_assert(sizeof(LowEntryFileManagerLibrary_ClearFile) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_ClearFile");
static_assert(offsetof(LowEntryFileManagerLibrary_ClearFile, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_ClearFile::File' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.CopyDirectory
// 0x0028 (0x0028 - 0x0000)
struct LowEntryFileManagerLibrary_CopyDirectory final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideExistingFiles;                             // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2286[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_CopyDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_CopyDirectory");
static_assert(sizeof(LowEntryFileManagerLibrary_CopyDirectory) == 0x000028, "Wrong size on LowEntryFileManagerLibrary_CopyDirectory");
static_assert(offsetof(LowEntryFileManagerLibrary_CopyDirectory, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_CopyDirectory::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_CopyDirectory, To) == 0x000010, "Member 'LowEntryFileManagerLibrary_CopyDirectory::To' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_CopyDirectory, OverrideExistingFiles) == 0x000020, "Member 'LowEntryFileManagerLibrary_CopyDirectory::OverrideExistingFiles' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.CopyFile
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_CopyFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_CopyFile) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_CopyFile");
static_assert(sizeof(LowEntryFileManagerLibrary_CopyFile) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_CopyFile");
static_assert(offsetof(LowEntryFileManagerLibrary_CopyFile, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_CopyFile::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_CopyFile, To) == 0x000010, "Member 'LowEntryFileManagerLibrary_CopyFile::To' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.CreateNewDirectory
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_CreateNewDirectory final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_CreateNewDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_CreateNewDirectory");
static_assert(sizeof(LowEntryFileManagerLibrary_CreateNewDirectory) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_CreateNewDirectory");
static_assert(offsetof(LowEntryFileManagerLibrary_CreateNewDirectory, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_CreateNewDirectory::Directory' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.CreateNewFile
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_CreateNewFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_CreateNewFile) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_CreateNewFile");
static_assert(sizeof(LowEntryFileManagerLibrary_CreateNewFile) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_CreateNewFile");
static_assert(offsetof(LowEntryFileManagerLibrary_CreateNewFile, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_CreateNewFile::File' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.CreateParentDirectory
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_CreateParentDirectory final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_CreateParentDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_CreateParentDirectory");
static_assert(sizeof(LowEntryFileManagerLibrary_CreateParentDirectory) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_CreateParentDirectory");
static_assert(offsetof(LowEntryFileManagerLibrary_CreateParentDirectory, Path) == 0x000000, "Member 'LowEntryFileManagerLibrary_CreateParentDirectory::Path' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.DeleteDirectory
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_DeleteDirectory final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_DeleteDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_DeleteDirectory");
static_assert(sizeof(LowEntryFileManagerLibrary_DeleteDirectory) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_DeleteDirectory");
static_assert(offsetof(LowEntryFileManagerLibrary_DeleteDirectory, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_DeleteDirectory::Directory' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.DeleteFile
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_DeleteFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_DeleteFile) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_DeleteFile");
static_assert(sizeof(LowEntryFileManagerLibrary_DeleteFile) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_DeleteFile");
static_assert(offsetof(LowEntryFileManagerLibrary_DeleteFile, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_DeleteFile::File' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.DirectoryExists
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_DirectoryExists final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2287[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_DirectoryExists) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_DirectoryExists");
static_assert(sizeof(LowEntryFileManagerLibrary_DirectoryExists) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_DirectoryExists");
static_assert(offsetof(LowEntryFileManagerLibrary_DirectoryExists, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_DirectoryExists::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_DirectoryExists, Branch) == 0x000010, "Member 'LowEntryFileManagerLibrary_DirectoryExists::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.DirectoryExistsBool
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_DirectoryExistsBool final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2288[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_DirectoryExistsBool) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_DirectoryExistsBool");
static_assert(sizeof(LowEntryFileManagerLibrary_DirectoryExistsBool) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_DirectoryExistsBool");
static_assert(offsetof(LowEntryFileManagerLibrary_DirectoryExistsBool, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_DirectoryExistsBool::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_DirectoryExistsBool, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_DirectoryExistsBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.ExecuteFile
// 0x0048 (0x0048 - 0x0000)
struct LowEntryFileManagerLibrary_ExecuteFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameters;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2289[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnCode;                                        // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StdOut;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StdErr;                                            // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_ExecuteFile) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_ExecuteFile");
static_assert(sizeof(LowEntryFileManagerLibrary_ExecuteFile) == 0x000048, "Wrong size on LowEntryFileManagerLibrary_ExecuteFile");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFile, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_ExecuteFile::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFile, Parameters) == 0x000010, "Member 'LowEntryFileManagerLibrary_ExecuteFile::Parameters' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFile, Success) == 0x000020, "Member 'LowEntryFileManagerLibrary_ExecuteFile::Success' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFile, ReturnCode) == 0x000024, "Member 'LowEntryFileManagerLibrary_ExecuteFile::ReturnCode' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFile, StdOut) == 0x000028, "Member 'LowEntryFileManagerLibrary_ExecuteFile::StdOut' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFile, StdErr) == 0x000038, "Member 'LowEntryFileManagerLibrary_ExecuteFile::StdErr' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.ExecuteFileAsync
// 0x0040 (0x0040 - 0x0000)
struct LowEntryFileManagerLibrary_ExecuteFileAsync final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameters;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProcessId;                                         // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hidden;                                            // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228B[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OptionalWorkingDirectory;                          // 0x0030(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_ExecuteFileAsync) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_ExecuteFileAsync");
static_assert(sizeof(LowEntryFileManagerLibrary_ExecuteFileAsync) == 0x000040, "Wrong size on LowEntryFileManagerLibrary_ExecuteFileAsync");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFileAsync, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_ExecuteFileAsync::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFileAsync, Parameters) == 0x000010, "Member 'LowEntryFileManagerLibrary_ExecuteFileAsync::Parameters' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFileAsync, Success) == 0x000020, "Member 'LowEntryFileManagerLibrary_ExecuteFileAsync::Success' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFileAsync, ProcessId) == 0x000024, "Member 'LowEntryFileManagerLibrary_ExecuteFileAsync::ProcessId' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFileAsync, Hidden) == 0x000028, "Member 'LowEntryFileManagerLibrary_ExecuteFileAsync::Hidden' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFileAsync, Priority) == 0x00002C, "Member 'LowEntryFileManagerLibrary_ExecuteFileAsync::Priority' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ExecuteFileAsync, OptionalWorkingDirectory) == 0x000030, "Member 'LowEntryFileManagerLibrary_ExecuteFileAsync::OptionalWorkingDirectory' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.FileExists
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_FileExists final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_FileExists) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_FileExists");
static_assert(sizeof(LowEntryFileManagerLibrary_FileExists) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_FileExists");
static_assert(offsetof(LowEntryFileManagerLibrary_FileExists, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_FileExists::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_FileExists, Branch) == 0x000010, "Member 'LowEntryFileManagerLibrary_FileExists::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.FileExistsBool
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_FileExistsBool final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_FileExistsBool) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_FileExistsBool");
static_assert(sizeof(LowEntryFileManagerLibrary_FileExistsBool) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_FileExistsBool");
static_assert(offsetof(LowEntryFileManagerLibrary_FileExistsBool, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_FileExistsBool::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_FileExistsBool, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_FileExistsBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetAbsoluteRoot
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerLibrary_GetAbsoluteRoot final
{
public:
	class ULowEntryFileManagerDirectory*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetAbsoluteRoot) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetAbsoluteRoot");
static_assert(sizeof(LowEntryFileManagerLibrary_GetAbsoluteRoot) == 0x000008, "Wrong size on LowEntryFileManagerLibrary_GetAbsoluteRoot");
static_assert(offsetof(LowEntryFileManagerLibrary_GetAbsoluteRoot, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetAbsoluteRoot::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetCloudDirPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetCloudDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetCloudDirPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetCloudDirPath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetCloudDirPath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetCloudDirPath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetCloudDirPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetCloudDirPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDirectories
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_GetDirectories final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetDirectories) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetDirectories");
static_assert(sizeof(LowEntryFileManagerLibrary_GetDirectories) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_GetDirectories");
static_assert(offsetof(LowEntryFileManagerLibrary_GetDirectories, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetDirectories::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetDirectories, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetDirectories::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDirectory
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_GetDirectory final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULowEntryFileManagerDirectory*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetDirectory");
static_assert(sizeof(LowEntryFileManagerLibrary_GetDirectory) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_GetDirectory");
static_assert(offsetof(LowEntryFileManagerLibrary_GetDirectory, Path) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetDirectory::Path' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetDirectory, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetDirectory::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDirectoryNames
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_GetDirectoryNames final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetDirectoryNames) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetDirectoryNames");
static_assert(sizeof(LowEntryFileManagerLibrary_GetDirectoryNames) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_GetDirectoryNames");
static_assert(offsetof(LowEntryFileManagerLibrary_GetDirectoryNames, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetDirectoryNames::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetDirectoryNames, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetDirectoryNames::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDiskPaths
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetDiskPaths final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetDiskPaths) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetDiskPaths");
static_assert(sizeof(LowEntryFileManagerLibrary_GetDiskPaths) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetDiskPaths");
static_assert(offsetof(LowEntryFileManagerLibrary_GetDiskPaths, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetDiskPaths::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetDisks
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetDisks final
{
public:
	TArray<class ULowEntryFileManagerDirectory*>  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetDisks) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetDisks");
static_assert(sizeof(LowEntryFileManagerLibrary_GetDisks) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetDisks");
static_assert(offsetof(LowEntryFileManagerLibrary_GetDisks, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetDisks::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetEngineDirPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetEngineDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetEngineDirPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetEngineDirPath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetEngineDirPath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetEngineDirPath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetEngineDirPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetEngineDirPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetEngineSavedDirPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetEngineSavedDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetEngineSavedDirPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetEngineSavedDirPath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetEngineSavedDirPath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetEngineSavedDirPath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetEngineSavedDirPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetEngineSavedDirPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileAccessTimestamp
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_GetFileAccessTimestamp final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetFileAccessTimestamp) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetFileAccessTimestamp");
static_assert(sizeof(LowEntryFileManagerLibrary_GetFileAccessTimestamp) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_GetFileAccessTimestamp");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileAccessTimestamp, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetFileAccessTimestamp::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileAccessTimestamp, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetFileAccessTimestamp::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileData
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_GetFileData final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetFileData) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetFileData");
static_assert(sizeof(LowEntryFileManagerLibrary_GetFileData) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_GetFileData");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileData, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetFileData::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileData, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetFileData::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileDataUnsafe
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_GetFileDataUnsafe final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetFileDataUnsafe) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetFileDataUnsafe");
static_assert(sizeof(LowEntryFileManagerLibrary_GetFileDataUnsafe) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_GetFileDataUnsafe");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileDataUnsafe, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetFileDataUnsafe::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileDataUnsafe, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetFileDataUnsafe::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileNames
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_GetFileNames final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetFileNames) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetFileNames");
static_assert(sizeof(LowEntryFileManagerLibrary_GetFileNames) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_GetFileNames");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileNames, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetFileNames::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileNames, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetFileNames::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFiles
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_GetFiles final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetFiles) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetFiles");
static_assert(sizeof(LowEntryFileManagerLibrary_GetFiles) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_GetFiles");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFiles, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetFiles::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFiles, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetFiles::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileSize
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_GetFileSize final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228E[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_GetFileSize) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetFileSize");
static_assert(sizeof(LowEntryFileManagerLibrary_GetFileSize) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_GetFileSize");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileSize, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetFileSize::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileSize, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetFileSize::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileSizeUnsafe
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_GetFileSizeUnsafe final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetFileSizeUnsafe) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetFileSizeUnsafe");
static_assert(sizeof(LowEntryFileManagerLibrary_GetFileSizeUnsafe) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_GetFileSizeUnsafe");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileSizeUnsafe, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetFileSizeUnsafe::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileSizeUnsafe, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetFileSizeUnsafe::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetFileTimestamp
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_GetFileTimestamp final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetFileTimestamp) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetFileTimestamp");
static_assert(sizeof(LowEntryFileManagerLibrary_GetFileTimestamp) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_GetFileTimestamp");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileTimestamp, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetFileTimestamp::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_GetFileTimestamp, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_GetFileTimestamp::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetGameDirPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetGameDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetGameDirPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetGameDirPath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetGameDirPath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetGameDirPath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetGameDirPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetGameDirPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetGamePersistentDownloadDirPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetGamePersistentDownloadDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetGamePersistentDownloadDirPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetGamePersistentDownloadDirPath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetGamePersistentDownloadDirPath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetGamePersistentDownloadDirPath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetGamePersistentDownloadDirPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetGamePersistentDownloadDirPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetGameSavedDirPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetGameSavedDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetGameSavedDirPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetGameSavedDirPath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetGameSavedDirPath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetGameSavedDirPath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetGameSavedDirPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetGameSavedDirPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetGameUserDirPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetGameUserDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetGameUserDirPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetGameUserDirPath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetGameUserDirPath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetGameUserDirPath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetGameUserDirPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetGameUserDirPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetProjectFilePath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetProjectFilePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetProjectFilePath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetProjectFilePath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetProjectFilePath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetProjectFilePath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetProjectFilePath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetProjectFilePath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetRoot
// 0x0008 (0x0008 - 0x0000)
struct LowEntryFileManagerLibrary_GetRoot final
{
public:
	class ULowEntryFileManagerDirectory*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetRoot) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetRoot");
static_assert(sizeof(LowEntryFileManagerLibrary_GetRoot) == 0x000008, "Wrong size on LowEntryFileManagerLibrary_GetRoot");
static_assert(offsetof(LowEntryFileManagerLibrary_GetRoot, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetRoot::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.GetRootDirPath
// 0x0010 (0x0010 - 0x0000)
struct LowEntryFileManagerLibrary_GetRootDirPath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_GetRootDirPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_GetRootDirPath");
static_assert(sizeof(LowEntryFileManagerLibrary_GetRootDirPath) == 0x000010, "Wrong size on LowEntryFileManagerLibrary_GetRootDirPath");
static_assert(offsetof(LowEntryFileManagerLibrary_GetRootDirPath, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_GetRootDirPath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.HasDiskPaths
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerLibrary_HasDiskPaths final
{
public:
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_HasDiskPaths) == 0x000001, "Wrong alignment on LowEntryFileManagerLibrary_HasDiskPaths");
static_assert(sizeof(LowEntryFileManagerLibrary_HasDiskPaths) == 0x000001, "Wrong size on LowEntryFileManagerLibrary_HasDiskPaths");
static_assert(offsetof(LowEntryFileManagerLibrary_HasDiskPaths, Branch) == 0x000000, "Member 'LowEntryFileManagerLibrary_HasDiskPaths::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.HasDiskPathsBool
// 0x0001 (0x0001 - 0x0000)
struct LowEntryFileManagerLibrary_HasDiskPathsBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_HasDiskPathsBool) == 0x000001, "Wrong alignment on LowEntryFileManagerLibrary_HasDiskPathsBool");
static_assert(sizeof(LowEntryFileManagerLibrary_HasDiskPathsBool) == 0x000001, "Wrong size on LowEntryFileManagerLibrary_HasDiskPathsBool");
static_assert(offsetof(LowEntryFileManagerLibrary_HasDiskPathsBool, ReturnValue) == 0x000000, "Member 'LowEntryFileManagerLibrary_HasDiskPathsBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsDirectoryEmpty
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_IsDirectoryEmpty final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_IsDirectoryEmpty) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_IsDirectoryEmpty");
static_assert(sizeof(LowEntryFileManagerLibrary_IsDirectoryEmpty) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_IsDirectoryEmpty");
static_assert(offsetof(LowEntryFileManagerLibrary_IsDirectoryEmpty, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_IsDirectoryEmpty::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_IsDirectoryEmpty, Branch) == 0x000010, "Member 'LowEntryFileManagerLibrary_IsDirectoryEmpty::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsDirectoryEmptyBool
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_IsDirectoryEmptyBool final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2290[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_IsDirectoryEmptyBool) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_IsDirectoryEmptyBool");
static_assert(sizeof(LowEntryFileManagerLibrary_IsDirectoryEmptyBool) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_IsDirectoryEmptyBool");
static_assert(offsetof(LowEntryFileManagerLibrary_IsDirectoryEmptyBool, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_IsDirectoryEmptyBool::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_IsDirectoryEmptyBool, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_IsDirectoryEmptyBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsFileEmpty
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_IsFileEmpty final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2291[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_IsFileEmpty) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_IsFileEmpty");
static_assert(sizeof(LowEntryFileManagerLibrary_IsFileEmpty) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_IsFileEmpty");
static_assert(offsetof(LowEntryFileManagerLibrary_IsFileEmpty, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_IsFileEmpty::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_IsFileEmpty, Branch) == 0x000010, "Member 'LowEntryFileManagerLibrary_IsFileEmpty::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsFileEmptyBool
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_IsFileEmptyBool final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2292[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_IsFileEmptyBool) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_IsFileEmptyBool");
static_assert(sizeof(LowEntryFileManagerLibrary_IsFileEmptyBool) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_IsFileEmptyBool");
static_assert(offsetof(LowEntryFileManagerLibrary_IsFileEmptyBool, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_IsFileEmptyBool::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_IsFileEmptyBool, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_IsFileEmptyBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsFileReadOnly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_IsFileReadOnly final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELowEntryFileManagerYesNo                     Branch;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2293[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_IsFileReadOnly) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_IsFileReadOnly");
static_assert(sizeof(LowEntryFileManagerLibrary_IsFileReadOnly) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_IsFileReadOnly");
static_assert(offsetof(LowEntryFileManagerLibrary_IsFileReadOnly, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_IsFileReadOnly::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_IsFileReadOnly, Branch) == 0x000010, "Member 'LowEntryFileManagerLibrary_IsFileReadOnly::Branch' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.IsFileReadOnlyBool
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_IsFileReadOnlyBool final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2294[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_IsFileReadOnlyBool) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_IsFileReadOnlyBool");
static_assert(sizeof(LowEntryFileManagerLibrary_IsFileReadOnlyBool) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_IsFileReadOnlyBool");
static_assert(offsetof(LowEntryFileManagerLibrary_IsFileReadOnlyBool, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_IsFileReadOnlyBool::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_IsFileReadOnlyBool, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_IsFileReadOnlyBool::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.MoveDirectory
// 0x0028 (0x0028 - 0x0000)
struct LowEntryFileManagerLibrary_MoveDirectory final
{
public:
	class FString                                 Directory;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideExistingFiles;                             // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2295[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_MoveDirectory) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_MoveDirectory");
static_assert(sizeof(LowEntryFileManagerLibrary_MoveDirectory) == 0x000028, "Wrong size on LowEntryFileManagerLibrary_MoveDirectory");
static_assert(offsetof(LowEntryFileManagerLibrary_MoveDirectory, Directory) == 0x000000, "Member 'LowEntryFileManagerLibrary_MoveDirectory::Directory' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_MoveDirectory, To) == 0x000010, "Member 'LowEntryFileManagerLibrary_MoveDirectory::To' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_MoveDirectory, OverrideExistingFiles) == 0x000020, "Member 'LowEntryFileManagerLibrary_MoveDirectory::OverrideExistingFiles' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.MoveFile
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_MoveFile final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_MoveFile) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_MoveFile");
static_assert(sizeof(LowEntryFileManagerLibrary_MoveFile) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_MoveFile");
static_assert(offsetof(LowEntryFileManagerLibrary_MoveFile, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_MoveFile::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_MoveFile, To) == 0x000010, "Member 'LowEntryFileManagerLibrary_MoveFile::To' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.RelativeToAbsolutePath
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_RelativeToAbsolutePath final
{
public:
	class FString                                 RelativePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_RelativeToAbsolutePath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_RelativeToAbsolutePath");
static_assert(sizeof(LowEntryFileManagerLibrary_RelativeToAbsolutePath) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_RelativeToAbsolutePath");
static_assert(offsetof(LowEntryFileManagerLibrary_RelativeToAbsolutePath, RelativePath) == 0x000000, "Member 'LowEntryFileManagerLibrary_RelativeToAbsolutePath::RelativePath' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_RelativeToAbsolutePath, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_RelativeToAbsolutePath::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.RemoveInvalidFilenameCharacters
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters");
static_assert(sizeof(LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters");
static_assert(offsetof(LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters, String) == 0x000000, "Member 'LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters::String' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_RemoveInvalidFilenameCharacters::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.RemoveInvalidPathCharacters
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_RemoveInvalidPathCharacters final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_RemoveInvalidPathCharacters) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_RemoveInvalidPathCharacters");
static_assert(sizeof(LowEntryFileManagerLibrary_RemoveInvalidPathCharacters) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_RemoveInvalidPathCharacters");
static_assert(offsetof(LowEntryFileManagerLibrary_RemoveInvalidPathCharacters, String) == 0x000000, "Member 'LowEntryFileManagerLibrary_RemoveInvalidPathCharacters::String' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_RemoveInvalidPathCharacters, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_RemoveInvalidPathCharacters::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.ReplaceBackslashesBySlashes
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes");
static_assert(sizeof(LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes");
static_assert(offsetof(LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes, String) == 0x000000, "Member 'LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes::String' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes, ReturnValue) == 0x000010, "Member 'LowEntryFileManagerLibrary_ReplaceBackslashesBySlashes::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.ReplaceInvalidFilenameCharacters
// 0x0030 (0x0030 - 0x0000)
struct LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplacementCharacter;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters");
static_assert(sizeof(LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters) == 0x000030, "Wrong size on LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters");
static_assert(offsetof(LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters, String) == 0x000000, "Member 'LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters::String' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters, ReplacementCharacter) == 0x000010, "Member 'LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters::ReplacementCharacter' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters, ReturnValue) == 0x000020, "Member 'LowEntryFileManagerLibrary_ReplaceInvalidFilenameCharacters::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.ReplaceInvalidPathCharacters
// 0x0030 (0x0030 - 0x0000)
struct LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplacementCharacter;                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters");
static_assert(sizeof(LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters) == 0x000030, "Wrong size on LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters");
static_assert(offsetof(LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters, String) == 0x000000, "Member 'LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters::String' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters, ReplacementCharacter) == 0x000010, "Member 'LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters::ReplacementCharacter' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters, ReturnValue) == 0x000020, "Member 'LowEntryFileManagerLibrary_ReplaceInvalidPathCharacters::ReturnValue' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.SetFileData
// 0x0020 (0x0020 - 0x0000)
struct LowEntryFileManagerLibrary_SetFileData final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_SetFileData) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_SetFileData");
static_assert(sizeof(LowEntryFileManagerLibrary_SetFileData) == 0x000020, "Wrong size on LowEntryFileManagerLibrary_SetFileData");
static_assert(offsetof(LowEntryFileManagerLibrary_SetFileData, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_SetFileData::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_SetFileData, Data) == 0x000010, "Member 'LowEntryFileManagerLibrary_SetFileData::Data' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.SetFileReadOnly
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_SetFileReadOnly final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReadOnly;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2296[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LowEntryFileManagerLibrary_SetFileReadOnly) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_SetFileReadOnly");
static_assert(sizeof(LowEntryFileManagerLibrary_SetFileReadOnly) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_SetFileReadOnly");
static_assert(offsetof(LowEntryFileManagerLibrary_SetFileReadOnly, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_SetFileReadOnly::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_SetFileReadOnly, ReadOnly) == 0x000010, "Member 'LowEntryFileManagerLibrary_SetFileReadOnly::ReadOnly' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.SetFileTimestamp
// 0x0018 (0x0018 - 0x0000)
struct LowEntryFileManagerLibrary_SetFileTimestamp final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_SetFileTimestamp) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_SetFileTimestamp");
static_assert(sizeof(LowEntryFileManagerLibrary_SetFileTimestamp) == 0x000018, "Wrong size on LowEntryFileManagerLibrary_SetFileTimestamp");
static_assert(offsetof(LowEntryFileManagerLibrary_SetFileTimestamp, File) == 0x000000, "Member 'LowEntryFileManagerLibrary_SetFileTimestamp::File' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_SetFileTimestamp, Timestamp) == 0x000010, "Member 'LowEntryFileManagerLibrary_SetFileTimestamp::Timestamp' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.SplitName
// 0x0030 (0x0030 - 0x0000)
struct LowEntryFileManagerLibrary_SplitName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NamePart;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtensionPart;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_SplitName) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_SplitName");
static_assert(sizeof(LowEntryFileManagerLibrary_SplitName) == 0x000030, "Wrong size on LowEntryFileManagerLibrary_SplitName");
static_assert(offsetof(LowEntryFileManagerLibrary_SplitName, Param_Name) == 0x000000, "Member 'LowEntryFileManagerLibrary_SplitName::Param_Name' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_SplitName, NamePart) == 0x000010, "Member 'LowEntryFileManagerLibrary_SplitName::NamePart' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_SplitName, ExtensionPart) == 0x000020, "Member 'LowEntryFileManagerLibrary_SplitName::ExtensionPart' has a wrong offset!");

// Function LowEntryFileManager.LowEntryFileManagerLibrary.SplitPath
// 0x0030 (0x0030 - 0x0000)
struct LowEntryFileManagerLibrary_SplitPath final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PathPart;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NamePart;                                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowEntryFileManagerLibrary_SplitPath) == 0x000008, "Wrong alignment on LowEntryFileManagerLibrary_SplitPath");
static_assert(sizeof(LowEntryFileManagerLibrary_SplitPath) == 0x000030, "Wrong size on LowEntryFileManagerLibrary_SplitPath");
static_assert(offsetof(LowEntryFileManagerLibrary_SplitPath, Path) == 0x000000, "Member 'LowEntryFileManagerLibrary_SplitPath::Path' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_SplitPath, PathPart) == 0x000010, "Member 'LowEntryFileManagerLibrary_SplitPath::PathPart' has a wrong offset!");
static_assert(offsetof(LowEntryFileManagerLibrary_SplitPath, NamePart) == 0x000020, "Member 'LowEntryFileManagerLibrary_SplitPath::NamePart' has a wrong offset!");

}

