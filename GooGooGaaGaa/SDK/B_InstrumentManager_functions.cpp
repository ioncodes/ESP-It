#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_InstrumentManager

#include "Basic.hpp"

#include "B_InstrumentManager_classes.hpp"
#include "B_InstrumentManager_parameters.hpp"


namespace SDK
{

// Function B_InstrumentManager.B_InstrumentManager_C.AddToMusic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InstrumentName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UB_InstrumentManager_C::AddToMusic(const class FString& InstrumentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InstrumentManager_C", "AddToMusic");

	Params::B_InstrumentManager_C_AddToMusic Parms{};

	Parms.InstrumentName = std::move(InstrumentName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InstrumentManager.B_InstrumentManager_C.ExecuteUbergraph_B_InstrumentManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_InstrumentManager_C::ExecuteUbergraph_B_InstrumentManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InstrumentManager_C", "ExecuteUbergraph_B_InstrumentManager");

	Params::B_InstrumentManager_C_ExecuteUbergraph_B_InstrumentManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_InstrumentManager.B_InstrumentManager_C.MusicToggled__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UB_InstrumentManager_C::MusicToggled__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InstrumentManager_C", "MusicToggled__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InstrumentManager.B_InstrumentManager_C.OnRep_IsMusicPlaying
// (BlueprintCallable, BlueprintEvent)

void UB_InstrumentManager_C::OnRep_IsMusicPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InstrumentManager_C", "OnRep_IsMusicPlaying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InstrumentManager.B_InstrumentManager_C.RemoveAndCheckIfMusicStillPlaying
// (Protected, BlueprintCallable, BlueprintEvent)

void UB_InstrumentManager_C::RemoveAndCheckIfMusicStillPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InstrumentManager_C", "RemoveAndCheckIfMusicStillPlaying");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_InstrumentManager.B_InstrumentManager_C.RemoveFromMusic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           InstrumentName                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UB_InstrumentManager_C::RemoveFromMusic(const class FString& InstrumentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_InstrumentManager_C", "RemoveFromMusic");

	Params::B_InstrumentManager_C_RemoveFromMusic Parms{};

	Parms.InstrumentName = std::move(InstrumentName);

	UObject::ProcessEvent(Func, &Parms);
}

}

