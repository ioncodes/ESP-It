#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MapManager

#include "Basic.hpp"

#include "B_MapManager_classes.hpp"
#include "B_MapManager_parameters.hpp"


namespace SDK
{

// Function B_MapManager.B_MapManager_C.AddMapToMapLists
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSMapData                        MapToAdd                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UB_MapManager_C::AddMapToMapLists(const struct FSMapData& MapToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "AddMapToMapLists");

	Params::B_MapManager_C_AddMapToMapLists Parms{};

	Parms.MapToAdd = std::move(MapToAdd);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MapManager.B_MapManager_C.DetermineNextMapFromCustomMapCycle
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MapDataFound                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LayoutDataFound                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSMapData                        MapData                                                (Parm, OutParm, HasGetValueTypeHash)
// struct FS_PropLayoutData                LayoutData                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UB_MapManager_C::DetermineNextMapFromCustomMapCycle(bool* MapDataFound, bool* LayoutDataFound, struct FSMapData* MapData, struct FS_PropLayoutData* LayoutData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "DetermineNextMapFromCustomMapCycle");

	Params::B_MapManager_C_DetermineNextMapFromCustomMapCycle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MapDataFound != nullptr)
		*MapDataFound = Parms.MapDataFound;

	if (LayoutDataFound != nullptr)
		*LayoutDataFound = Parms.LayoutDataFound;

	if (MapData != nullptr)
		*MapData = std::move(Parms.MapData);

	if (LayoutData != nullptr)
		*LayoutData = std::move(Parms.LayoutData);
}


// Function B_MapManager.B_MapManager_C.ExecuteUbergraph_B_MapManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MapManager_C::ExecuteUbergraph_B_MapManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "ExecuteUbergraph_B_MapManager");

	Params::B_MapManager_C_ExecuteUbergraph_B_MapManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MapManager.B_MapManager_C.FilterMapsBySize
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FSMapData>                MapsToFilter                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSMapData>                SmallMaps                                              (Parm, OutParm)
// TArray<struct FSMapData>                BigMaps                                                (Parm, OutParm)

void UB_MapManager_C::FilterMapsBySize(TArray<struct FSMapData>& MapsToFilter, TArray<struct FSMapData>* SmallMaps, TArray<struct FSMapData>* BigMaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "FilterMapsBySize");

	Params::B_MapManager_C_FilterMapsBySize Parms{};

	Parms.MapsToFilter = std::move(MapsToFilter);

	UObject::ProcessEvent(Func, &Parms);

	MapsToFilter = std::move(Parms.MapsToFilter);

	if (SmallMaps != nullptr)
		*SmallMaps = std::move(Parms.SmallMaps);

	if (BigMaps != nullptr)
		*BigMaps = std::move(Parms.BigMaps);
}


// Function B_MapManager.B_MapManager_C.GetAllCustomMapsOrByLevelNameFromSave
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           OptionalLevelName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FS_PropLayoutData>        Layouts                                                (Parm, OutParm)

void UB_MapManager_C::GetAllCustomMapsOrByLevelNameFromSave(const class FString& OptionalLevelName, TArray<struct FS_PropLayoutData>* Layouts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetAllCustomMapsOrByLevelNameFromSave");

	Params::B_MapManager_C_GetAllCustomMapsOrByLevelNameFromSave Parms{};

	Parms.OptionalLevelName = std::move(OptionalLevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (Layouts != nullptr)
		*Layouts = std::move(Parms.Layouts);
}


// Function B_MapManager.B_MapManager_C.GetAllQuickmatchMaps
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ExcludeRandomMapCycle                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSMapData>                QuickmatchMaps                                         (Parm, OutParm)

void UB_MapManager_C::GetAllQuickmatchMaps(bool ExcludeRandomMapCycle, TArray<struct FSMapData>* QuickmatchMaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetAllQuickmatchMaps");

	Params::B_MapManager_C_GetAllQuickmatchMaps Parms{};

	Parms.ExcludeRandomMapCycle = ExcludeRandomMapCycle;

	UObject::ProcessEvent(Func, &Parms);

	if (QuickmatchMaps != nullptr)
		*QuickmatchMaps = std::move(Parms.QuickmatchMaps);
}


// Function B_MapManager.B_MapManager_C.GetFilteredCustomLayoutsForMap
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_PropLayoutData>        Layouts                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FString>                   LayoutsToFilter                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FS_PropLayoutData>        FilteredLayouts                                        (Parm, OutParm)

void UB_MapManager_C::GetFilteredCustomLayoutsForMap(TArray<struct FS_PropLayoutData>& Layouts, TArray<class FString>& LayoutsToFilter, TArray<struct FS_PropLayoutData>* FilteredLayouts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetFilteredCustomLayoutsForMap");

	Params::B_MapManager_C_GetFilteredCustomLayoutsForMap Parms{};

	Parms.Layouts = std::move(Layouts);
	Parms.LayoutsToFilter = std::move(LayoutsToFilter);

	UObject::ProcessEvent(Func, &Parms);

	Layouts = std::move(Parms.Layouts);
	LayoutsToFilter = std::move(Parms.LayoutsToFilter);

	if (FilteredLayouts != nullptr)
		*FilteredLayouts = std::move(Parms.FilteredLayouts);
}


// Function B_MapManager.B_MapManager_C.GetLevelNameFromFileName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Filename                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           MapName                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UB_MapManager_C::GetLevelNameFromFileName(class FName Filename, class FString* MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetLevelNameFromFileName");

	Params::B_MapManager_C_GetLevelNameFromFileName Parms{};

	Parms.Filename = Filename;

	UObject::ProcessEvent(Func, &Parms);

	if (MapName != nullptr)
		*MapName = std::move(Parms.MapName);
}


// Function B_MapManager.B_MapManager_C.GetMapVoteMapsBySize
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_MapSize                               TargetSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSMapData>                TargetMaps                                             (Parm, OutParm)

void UB_MapManager_C::GetMapVoteMapsBySize(E_MapSize TargetSize, TArray<struct FSMapData>* TargetMaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetMapVoteMapsBySize");

	Params::B_MapManager_C_GetMapVoteMapsBySize Parms{};

	Parms.TargetSize = TargetSize;

	UObject::ProcessEvent(Func, &Parms);

	if (TargetMaps != nullptr)
		*TargetMaps = std::move(Parms.TargetMaps);
}


// Function B_MapManager.B_MapManager_C.GetSpecificMapFromLevelName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FSMapData                        MapData                                                (Parm, OutParm, HasGetValueTypeHash)

void UB_MapManager_C::GetSpecificMapFromLevelName(const class FString& LevelName, struct FSMapData* MapData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetSpecificMapFromLevelName");

	Params::B_MapManager_C_GetSpecificMapFromLevelName Parms{};

	Parms.LevelName = std::move(LevelName);

	UObject::ProcessEvent(Func, &Parms);

	if (MapData != nullptr)
		*MapData = std::move(Parms.MapData);
}


// Function B_MapManager.B_MapManager_C.GetTextureForCustomMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_PropLayoutData                LayoutData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_MapManager_C::GetTextureForCustomMap(const struct FS_PropLayoutData& LayoutData, class UTexture2D** Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetTextureForCustomMap");

	Params::B_MapManager_C_GetTextureForCustomMap Parms{};

	Parms.LayoutData = std::move(LayoutData);

	UObject::ProcessEvent(Func, &Parms);

	if (Texture != nullptr)
		*Texture = Parms.Texture;
}


// Function B_MapManager.B_MapManager_C.Initialize
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UGameInstance*                    InGameInstance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_MapManager_C::Initialize(class UGameInstance* InGameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "Initialize");

	Params::B_MapManager_C_Initialize Parms{};

	Parms.InGameInstance = InGameInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MapManager.B_MapManager_C.SetLayoutDataByFileName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UB_MapManager_C::SetLayoutDataByFileName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "SetLayoutDataByFileName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_MapManager.B_MapManager_C.SetMapListsBySize
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSMapData>                OfficialMaps                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSMapData>                BuiltInMaps                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_MapManager_C::SetMapListsBySize(TArray<struct FSMapData>& OfficialMaps, TArray<struct FSMapData>& BuiltInMaps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "SetMapListsBySize");

	Params::B_MapManager_C_SetMapListsBySize Parms{};

	Parms.OfficialMaps = std::move(OfficialMaps);
	Parms.BuiltInMaps = std::move(BuiltInMaps);

	UObject::ProcessEvent(Func, &Parms);

	OfficialMaps = std::move(Parms.OfficialMaps);
	BuiltInMaps = std::move(Parms.BuiltInMaps);
}


// Function B_MapManager.B_MapManager_C.SetOrResetCustomMapCycle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_MapCycleObject_C*              NewCustomMapCycle__optional_                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_MapManager_C::SetOrResetCustomMapCycle(class UB_MapCycleObject_C* NewCustomMapCycle__optional_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "SetOrResetCustomMapCycle");

	Params::B_MapManager_C_SetOrResetCustomMapCycle Parms{};

	Parms.NewCustomMapCycle__optional_ = NewCustomMapCycle__optional_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MapManager.B_MapManager_C.SetupAndSortMapLists
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSMapData>                UnsortedOfficialMaps                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSMapData>                MapsToExcludeFromLiveBuild                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSMapData>                EmptyMapsForCreativeMode                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FSMapData>                BuiltInCustomMapList                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_MapManager_C::SetupAndSortMapLists(TArray<struct FSMapData>& UnsortedOfficialMaps, TArray<struct FSMapData>& MapsToExcludeFromLiveBuild, TArray<struct FSMapData>& EmptyMapsForCreativeMode, TArray<struct FSMapData>& BuiltInCustomMapList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "SetupAndSortMapLists");

	Params::B_MapManager_C_SetupAndSortMapLists Parms{};

	Parms.UnsortedOfficialMaps = std::move(UnsortedOfficialMaps);
	Parms.MapsToExcludeFromLiveBuild = std::move(MapsToExcludeFromLiveBuild);
	Parms.EmptyMapsForCreativeMode = std::move(EmptyMapsForCreativeMode);
	Parms.BuiltInCustomMapList = std::move(BuiltInCustomMapList);

	UObject::ProcessEvent(Func, &Parms);

	UnsortedOfficialMaps = std::move(Parms.UnsortedOfficialMaps);
	MapsToExcludeFromLiveBuild = std::move(Parms.MapsToExcludeFromLiveBuild);
	EmptyMapsForCreativeMode = std::move(Parms.EmptyMapsForCreativeMode);
	BuiltInCustomMapList = std::move(Parms.BuiltInCustomMapList);
}


// Function B_MapManager.B_MapManager_C.UpdateNextMapFromCustomMapCycle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UB_MatchOptions_C*                NextMatchOptions                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UB_MapManager_C::UpdateNextMapFromCustomMapCycle(class UB_MatchOptions_C* NextMatchOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "UpdateNextMapFromCustomMapCycle");

	Params::B_MapManager_C_UpdateNextMapFromCustomMapCycle Parms{};

	Parms.NextMatchOptions = NextMatchOptions;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_MapManager.B_MapManager_C.GetBuiltInMaps
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FSMapData>                BuiltInCustomMaps                                      (Parm, OutParm)

void UB_MapManager_C::GetBuiltInMaps(TArray<struct FSMapData>* BuiltInCustomMaps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetBuiltInMaps");

	Params::B_MapManager_C_GetBuiltInMaps Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BuiltInCustomMaps != nullptr)
		*BuiltInCustomMaps = std::move(Parms.BuiltInCustomMaps);
}


// Function B_MapManager.B_MapManager_C.GetCustomMaps
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    WithAutosaves                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_PropLayoutData>        CustomMaps                                             (Parm, OutParm)

void UB_MapManager_C::GetCustomMaps(bool WithAutosaves, TArray<struct FS_PropLayoutData>* CustomMaps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetCustomMaps");

	Params::B_MapManager_C_GetCustomMaps Parms{};

	Parms.WithAutosaves = WithAutosaves;

	UObject::ProcessEvent(Func, &Parms);

	if (CustomMaps != nullptr)
		*CustomMaps = std::move(Parms.CustomMaps);
}


// Function B_MapManager.B_MapManager_C.GetMapsByFilterCriterion
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    UsedInObjective                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsedInImpostor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsedAsCreativeTemplate                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSMapData>                FoundMaps                                              (Parm, OutParm)

void UB_MapManager_C::GetMapsByFilterCriterion(bool UsedInObjective, bool UsedInImpostor, bool UsedAsCreativeTemplate, TArray<struct FSMapData>* FoundMaps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetMapsByFilterCriterion");

	Params::B_MapManager_C_GetMapsByFilterCriterion Parms{};

	Parms.UsedInObjective = UsedInObjective;
	Parms.UsedInImpostor = UsedInImpostor;
	Parms.UsedAsCreativeTemplate = UsedAsCreativeTemplate;

	UObject::ProcessEvent(Func, &Parms);

	if (FoundMaps != nullptr)
		*FoundMaps = std::move(Parms.FoundMaps);
}


// Function B_MapManager.B_MapManager_C.GetOfficialMaps
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ExcludeRandomMapCycle                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSMapData>                OfficialMaps                                           (Parm, OutParm)

void UB_MapManager_C::GetOfficialMaps(bool ExcludeRandomMapCycle, TArray<struct FSMapData>* OfficialMaps) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetOfficialMaps");

	Params::B_MapManager_C_GetOfficialMaps Parms{};

	Parms.ExcludeRandomMapCycle = ExcludeRandomMapCycle;

	UObject::ProcessEvent(Func, &Parms);

	if (OfficialMaps != nullptr)
		*OfficialMaps = std::move(Parms.OfficialMaps);
}


// Function B_MapManager.B_MapManager_C.GetSpecificMapOrCustomMapFromFileName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString                           Filename                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// bool                                    MapDataFound                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LayoutDataFound                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSMapData                        MapData                                                (Parm, OutParm, HasGetValueTypeHash)
// struct FS_PropLayoutData                LayoutData                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UB_MapManager_C::GetSpecificMapOrCustomMapFromFileName(const class FString& Filename, bool* MapDataFound, bool* LayoutDataFound, struct FSMapData* MapData, struct FS_PropLayoutData* LayoutData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetSpecificMapOrCustomMapFromFileName");

	Params::B_MapManager_C_GetSpecificMapOrCustomMapFromFileName Parms{};

	Parms.Filename = std::move(Filename);

	UObject::ProcessEvent(Func, &Parms);

	if (MapDataFound != nullptr)
		*MapDataFound = Parms.MapDataFound;

	if (LayoutDataFound != nullptr)
		*LayoutDataFound = Parms.LayoutDataFound;

	if (MapData != nullptr)
		*MapData = std::move(Parms.MapData);

	if (LayoutData != nullptr)
		*LayoutData = std::move(Parms.LayoutData);
}


// Function B_MapManager.B_MapManager_C.GetSuitableMapCycleName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             Param_Name                                             (Parm, OutParm)

void UB_MapManager_C::GetSuitableMapCycleName(class FText* Param_Name) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "GetSuitableMapCycleName");

	Params::B_MapManager_C_GetSuitableMapCycleName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Name != nullptr)
		*Param_Name = std::move(Parms.Param_Name);
}


// Function B_MapManager.B_MapManager_C.ValidCustomMapCycleIsSelected
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ValidSelection                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_MapManager_C::ValidCustomMapCycleIsSelected(bool* ValidSelection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_MapManager_C", "ValidCustomMapCycleIsSelected");

	Params::B_MapManager_C_ValidCustomMapCycleIsSelected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ValidSelection != nullptr)
		*ValidSelection = Parms.ValidSelection;
}

}

