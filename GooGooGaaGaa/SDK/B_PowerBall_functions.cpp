#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_PowerBall

#include "Basic.hpp"

#include "B_PowerBall_classes.hpp"
#include "B_PowerBall_parameters.hpp"


namespace SDK
{

// Function B_PowerBall.B_PowerBall_C.CanTeleport
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanTeleport_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PowerBall_C::CanTeleport(bool* CanTeleport_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "CanTeleport");

	Params::B_PowerBall_C_CanTeleport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanTeleport_0 != nullptr)
		*CanTeleport_0 = Parms.CanTeleport_0;
}


// Function B_PowerBall.B_PowerBall_C.DestroyBall
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PowerBall_C::DestroyBall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "DestroyBall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PowerBall.B_PowerBall_C.ExecuteUbergraph_B_PowerBall
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PowerBall_C::ExecuteUbergraph_B_PowerBall(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "ExecuteUbergraph_B_PowerBall");

	Params::B_PowerBall_C_ExecuteUbergraph_B_PowerBall Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PowerBall.B_PowerBall_C.HandleCanJump
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Slope                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PowerBall_C::HandleCanJump(const struct FVector& HitNormal, double Slope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "HandleCanJump");

	Params::B_PowerBall_C_HandleCanJump Parms{};

	Parms.HitNormal = std::move(HitNormal);
	Parms.Slope = Slope;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PowerBall.B_PowerBall_C.HandleHit
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PowerBall_C::HandleHit(class AActor* HitActor, class UPrimitiveComponent* HitComponent, const struct FVector& HitNormal, const struct FVector& HitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "HandleHit");

	Params::B_PowerBall_C_HandleHit Parms{};

	Parms.HitActor = HitActor;
	Parms.HitComponent = HitComponent;
	Parms.HitNormal = std::move(HitNormal);
	Parms.HitLocation = std::move(HitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PowerBall.B_PowerBall_C.HitEffectMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PowerBall_C::HitEffectMulti(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "HitEffectMulti");

	Params::B_PowerBall_C_HitEffectMulti Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PowerBall.B_PowerBall_C.InitializeRules
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PowerBall_C::InitializeRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "InitializeRules");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PowerBall.B_PowerBall_C.Move
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PowerBall_C::Move(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "Move");

	Params::B_PowerBall_C_Move Parms{};

	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PowerBall.B_PowerBall_C.MultiJump
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AB_PowerBall_C::MultiJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "MultiJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PowerBall.B_PowerBall_C.OnOwnerDestroyed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_PowerBall_C::OnOwnerDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "OnOwnerDestroyed");

	Params::B_PowerBall_C_OnOwnerDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PowerBall.B_PowerBall_C.PostProccedTeleport
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PowerBall_C::PostProccedTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "PostProccedTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PowerBall.B_PowerBall_C.ProceedTeleport
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PowerBall_C::ProceedTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "ProceedTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PowerBall.B_PowerBall_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AB_PowerBall_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PowerBall.B_PowerBall_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void AB_PowerBall_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_PowerBall.B_PowerBall_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AB_PowerBall_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "ReceiveHit");

	Params::B_PowerBall_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PowerBall.B_PowerBall_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_PowerBall_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "ReceiveTick");

	Params::B_PowerBall_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_PowerBall.B_PowerBall_C.TickJump
// (Public, BlueprintCallable, BlueprintEvent)

void AB_PowerBall_C::TickJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_PowerBall_C", "TickJump");

	UObject::ProcessEvent(Func, nullptr);
}

}

