#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_WitchPickupConfusionWave

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_WitchPickupConfusionWave.B_WitchPickupConfusionWave_C.ExecuteUbergraph_B_WitchPickupConfusionWave
// 0x0090 (0x0090 - 0x0000)
struct B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC6[0xC];                                     // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Pawn;                                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_SpawnActorOrTakeFromPool_ReturnValue;     // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_ConfusionWave_C*                     K2Node_DynamicCast_AsB_Confusion_Wave;             // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave) == 0x000010, "Wrong alignment on B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave");
static_assert(sizeof(B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave) == 0x000090, "Wrong size on B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave");
static_assert(offsetof(B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave, EntryPoint) == 0x000000, "Member 'B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave, K2Node_Event_Pawn) == 0x000070, "Member 'B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave::K2Node_Event_Pawn' has a wrong offset!");
static_assert(offsetof(B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave, CallFunc_SpawnActorOrTakeFromPool_ReturnValue) == 0x000078, "Member 'B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave::CallFunc_SpawnActorOrTakeFromPool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave, K2Node_DynamicCast_AsB_Confusion_Wave) == 0x000080, "Member 'B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave::K2Node_DynamicCast_AsB_Confusion_Wave' has a wrong offset!");
static_assert(offsetof(B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'B_WitchPickupConfusionWave_C_ExecuteUbergraph_B_WitchPickupConfusionWave::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_WitchPickupConfusionWave.B_WitchPickupConfusionWave_C.PickupCollected
// 0x0008 (0x0008 - 0x0000)
struct B_WitchPickupConfusionWave_C_PickupCollected final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WitchPickupConfusionWave_C_PickupCollected) == 0x000008, "Wrong alignment on B_WitchPickupConfusionWave_C_PickupCollected");
static_assert(sizeof(B_WitchPickupConfusionWave_C_PickupCollected) == 0x000008, "Wrong size on B_WitchPickupConfusionWave_C_PickupCollected");
static_assert(offsetof(B_WitchPickupConfusionWave_C_PickupCollected, Pawn) == 0x000000, "Member 'B_WitchPickupConfusionWave_C_PickupCollected::Pawn' has a wrong offset!");

}

