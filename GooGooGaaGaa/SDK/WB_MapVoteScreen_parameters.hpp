#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_MapVoteScreen

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WB_MapVoteScreen.WB_MapVoteScreen_C.ExecuteUbergraph_WB_MapVoteScreen
// 0x0070 (0x0070 - 0x0000)
struct WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DAD[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen) == 0x000008, "Wrong alignment on WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen");
static_assert(sizeof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen) == 0x000070, "Wrong size on WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, EntryPoint) == 0x000000, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::EntryPoint' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, K2Node_Event_MyGeometry) == 0x000004, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, CallFunc_GetGameInstance_ReturnValue) == 0x000040, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, CallFunc_GetGameState_ReturnValue) == 0x000048, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, K2Node_DynamicCast_AsB_Game_Instance) == 0x000050, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, K2Node_DynamicCast_AsB_Game_State) == 0x000060, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, CallFunc_IsValid_ReturnValue) == 0x000069, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen, CallFunc_IsRoundEnd_RoundIsEnd) == 0x00006A, "Member 'WB_MapVoteScreen_C_ExecuteUbergraph_WB_MapVoteScreen::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");

// Function WB_MapVoteScreen.WB_MapVoteScreen_C.GetInitialFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct WB_MapVoteScreen_C_GetInitialFocusWidget final
{
public:
	class UUserWidget*                            InitialFocusWidget;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MapVoteScreen_C_GetInitialFocusWidget) == 0x000008, "Wrong alignment on WB_MapVoteScreen_C_GetInitialFocusWidget");
static_assert(sizeof(WB_MapVoteScreen_C_GetInitialFocusWidget) == 0x000008, "Wrong size on WB_MapVoteScreen_C_GetInitialFocusWidget");
static_assert(offsetof(WB_MapVoteScreen_C_GetInitialFocusWidget, InitialFocusWidget) == 0x000000, "Member 'WB_MapVoteScreen_C_GetInitialFocusWidget::InitialFocusWidget' has a wrong offset!");

// Function WB_MapVoteScreen.WB_MapVoteScreen_C.OnPreviewKeyDown
// 0x02A0 (0x02A0 - 0x0000)
struct WB_MapVoteScreen_C_OnPreviewKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_OnPreviewKeyDown_ReturnValue;             // 0x0130(0x00B8)()
	struct FEventReply                            CallFunc_HandleSelectionScreenPreviewKeyDown_EventReply; // 0x01E8(0x00B8)()
};
static_assert(alignof(WB_MapVoteScreen_C_OnPreviewKeyDown) == 0x000008, "Wrong alignment on WB_MapVoteScreen_C_OnPreviewKeyDown");
static_assert(sizeof(WB_MapVoteScreen_C_OnPreviewKeyDown) == 0x0002A0, "Wrong size on WB_MapVoteScreen_C_OnPreviewKeyDown");
static_assert(offsetof(WB_MapVoteScreen_C_OnPreviewKeyDown, MyGeometry) == 0x000000, "Member 'WB_MapVoteScreen_C_OnPreviewKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_OnPreviewKeyDown, InKeyEvent) == 0x000038, "Member 'WB_MapVoteScreen_C_OnPreviewKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_OnPreviewKeyDown, ReturnValue) == 0x000078, "Member 'WB_MapVoteScreen_C_OnPreviewKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_OnPreviewKeyDown, CallFunc_OnPreviewKeyDown_ReturnValue) == 0x000130, "Member 'WB_MapVoteScreen_C_OnPreviewKeyDown::CallFunc_OnPreviewKeyDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_OnPreviewKeyDown, CallFunc_HandleSelectionScreenPreviewKeyDown_EventReply) == 0x0001E8, "Member 'WB_MapVoteScreen_C_OnPreviewKeyDown::CallFunc_HandleSelectionScreenPreviewKeyDown_EventReply' has a wrong offset!");

// Function WB_MapVoteScreen.WB_MapVoteScreen_C.Tick
// 0x003C (0x003C - 0x0000)
struct WB_MapVoteScreen_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WB_MapVoteScreen_C_Tick) == 0x000004, "Wrong alignment on WB_MapVoteScreen_C_Tick");
static_assert(sizeof(WB_MapVoteScreen_C_Tick) == 0x00003C, "Wrong size on WB_MapVoteScreen_C_Tick");
static_assert(offsetof(WB_MapVoteScreen_C_Tick, MyGeometry) == 0x000000, "Member 'WB_MapVoteScreen_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WB_MapVoteScreen_C_Tick, InDeltaTime) == 0x000038, "Member 'WB_MapVoteScreen_C_Tick::InDeltaTime' has a wrong offset!");

}

