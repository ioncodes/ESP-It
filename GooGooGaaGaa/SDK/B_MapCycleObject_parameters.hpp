#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MapCycleObject

#include "Basic.hpp"


namespace SDK::Params
{

// Function B_MapCycleObject.B_MapCycleObject_C.AddItemToMapCycle
// 0x0028 (0x0028 - 0x0000)
struct B_MapCycleObject_C_AddItemToMapCycle final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
	int32                                         AllowedAmountOfMaps;                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeAdded;                                        // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MapCycleObject_C_AddItemToMapCycle) == 0x000008, "Wrong alignment on B_MapCycleObject_C_AddItemToMapCycle");
static_assert(sizeof(B_MapCycleObject_C_AddItemToMapCycle) == 0x000028, "Wrong size on B_MapCycleObject_C_AddItemToMapCycle");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, Filename) == 0x000000, "Member 'B_MapCycleObject_C_AddItemToMapCycle::Filename' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, AllowedAmountOfMaps) == 0x000010, "Member 'B_MapCycleObject_C_AddItemToMapCycle::AllowedAmountOfMaps' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, Success) == 0x000014, "Member 'B_MapCycleObject_C_AddItemToMapCycle::Success' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, CanBeAdded) == 0x000015, "Member 'B_MapCycleObject_C_AddItemToMapCycle::CanBeAdded' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, CallFunc_IsEmpty_ReturnValue) == 0x000016, "Member 'B_MapCycleObject_C_AddItemToMapCycle::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, CallFunc_Not_PreBool_ReturnValue) == 0x000017, "Member 'B_MapCycleObject_C_AddItemToMapCycle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'B_MapCycleObject_C_AddItemToMapCycle::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'B_MapCycleObject_C_AddItemToMapCycle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'B_MapCycleObject_C_AddItemToMapCycle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_AddItemToMapCycle, CallFunc_BooleanAND_ReturnValue) == 0x000021, "Member 'B_MapCycleObject_C_AddItemToMapCycle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_MapCycleObject.B_MapCycleObject_C.MapCycleContainsItem
// 0x0028 (0x0028 - 0x0000)
struct B_MapCycleObject_C_MapCycleContainsItem final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3806[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapIndex;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3807[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MapCycleObject_C_MapCycleContainsItem) == 0x000008, "Wrong alignment on B_MapCycleObject_C_MapCycleContainsItem");
static_assert(sizeof(B_MapCycleObject_C_MapCycleContainsItem) == 0x000028, "Wrong size on B_MapCycleObject_C_MapCycleContainsItem");
static_assert(offsetof(B_MapCycleObject_C_MapCycleContainsItem, Filename) == 0x000000, "Member 'B_MapCycleObject_C_MapCycleContainsItem::Filename' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_MapCycleContainsItem, ReturnValue) == 0x000010, "Member 'B_MapCycleObject_C_MapCycleContainsItem::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_MapCycleContainsItem, Param_Index) == 0x000014, "Member 'B_MapCycleObject_C_MapCycleContainsItem::Param_Index' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_MapCycleContainsItem, MapIndex) == 0x000018, "Member 'B_MapCycleObject_C_MapCycleContainsItem::MapIndex' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_MapCycleContainsItem, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00001C, "Member 'B_MapCycleObject_C_MapCycleContainsItem::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_MapCycleContainsItem, CallFunc_Array_Find_ReturnValue) == 0x000020, "Member 'B_MapCycleObject_C_MapCycleContainsItem::CallFunc_Array_Find_ReturnValue' has a wrong offset!");

// Function B_MapCycleObject.B_MapCycleObject_C.MapCycleIsEmpty
// 0x000C (0x000C - 0x0000)
struct B_MapCycleObject_C_MapCycleIsEmpty final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3808[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MapCycleObject_C_MapCycleIsEmpty) == 0x000004, "Wrong alignment on B_MapCycleObject_C_MapCycleIsEmpty");
static_assert(sizeof(B_MapCycleObject_C_MapCycleIsEmpty) == 0x00000C, "Wrong size on B_MapCycleObject_C_MapCycleIsEmpty");
static_assert(offsetof(B_MapCycleObject_C_MapCycleIsEmpty, IsEmpty) == 0x000000, "Member 'B_MapCycleObject_C_MapCycleIsEmpty::IsEmpty' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_MapCycleIsEmpty, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'B_MapCycleObject_C_MapCycleIsEmpty::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_MapCycleIsEmpty, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000008, "Member 'B_MapCycleObject_C_MapCycleIsEmpty::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_MapCycleObject.B_MapCycleObject_C.RemoveMapFromMapCycle
// 0x000C (0x000C - 0x0000)
struct B_MapCycleObject_C_RemoveMapFromMapCycle final
{
public:
	int32                                         IndexToRemove;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MapCycleObject_C_RemoveMapFromMapCycle) == 0x000004, "Wrong alignment on B_MapCycleObject_C_RemoveMapFromMapCycle");
static_assert(sizeof(B_MapCycleObject_C_RemoveMapFromMapCycle) == 0x00000C, "Wrong size on B_MapCycleObject_C_RemoveMapFromMapCycle");
static_assert(offsetof(B_MapCycleObject_C_RemoveMapFromMapCycle, IndexToRemove) == 0x000000, "Member 'B_MapCycleObject_C_RemoveMapFromMapCycle::IndexToRemove' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_RemoveMapFromMapCycle, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'B_MapCycleObject_C_RemoveMapFromMapCycle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_RemoveMapFromMapCycle, CallFunc_InRange_IntInt_ReturnValue) == 0x000008, "Member 'B_MapCycleObject_C_RemoveMapFromMapCycle::CallFunc_InRange_IntInt_ReturnValue' has a wrong offset!");

// Function B_MapCycleObject.B_MapCycleObject_C.CompareWithMapCycle
// 0x0058 (0x0058 - 0x0000)
struct B_MapCycleObject_C_CompareWithMapCycle final
{
public:
	class UB_MapCycleObject_C*                    MapCycleObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMatch;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Equal;                                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3809[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetAmountOfMapsInCycle_AmountOfMaps;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_380A[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_380B[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_380C[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MapCycleObject_C_CompareWithMapCycle) == 0x000008, "Wrong alignment on B_MapCycleObject_C_CompareWithMapCycle");
static_assert(sizeof(B_MapCycleObject_C_CompareWithMapCycle) == 0x000058, "Wrong size on B_MapCycleObject_C_CompareWithMapCycle");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, MapCycleObject) == 0x000000, "Member 'B_MapCycleObject_C_CompareWithMapCycle::MapCycleObject' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, IsMatch) == 0x000008, "Member 'B_MapCycleObject_C_CompareWithMapCycle::IsMatch' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, Equal) == 0x000009, "Member 'B_MapCycleObject_C_CompareWithMapCycle::Equal' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_GetAmountOfMapsInCycle_AmountOfMaps) == 0x00000C, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_GetAmountOfMapsInCycle_AmountOfMaps' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'B_MapCycleObject_C_CompareWithMapCycle::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, Temp_int_Array_Index_Variable) == 0x000014, "Member 'B_MapCycleObject_C_CompareWithMapCycle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'B_MapCycleObject_C_CompareWithMapCycle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000020, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_CompareWithMapCycle, CallFunc_NotEqual_StrStr_ReturnValue) == 0x000051, "Member 'B_MapCycleObject_C_CompareWithMapCycle::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");

// Function B_MapCycleObject.B_MapCycleObject_C.GetAmountOfMapsInCycle
// 0x0008 (0x0008 - 0x0000)
struct B_MapCycleObject_C_GetAmountOfMapsInCycle final
{
public:
	int32                                         AmountOfMaps;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MapCycleObject_C_GetAmountOfMapsInCycle) == 0x000004, "Wrong alignment on B_MapCycleObject_C_GetAmountOfMapsInCycle");
static_assert(sizeof(B_MapCycleObject_C_GetAmountOfMapsInCycle) == 0x000008, "Wrong size on B_MapCycleObject_C_GetAmountOfMapsInCycle");
static_assert(offsetof(B_MapCycleObject_C_GetAmountOfMapsInCycle, AmountOfMaps) == 0x000000, "Member 'B_MapCycleObject_C_GetAmountOfMapsInCycle::AmountOfMaps' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_GetAmountOfMapsInCycle, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'B_MapCycleObject_C_GetAmountOfMapsInCycle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function B_MapCycleObject.B_MapCycleObject_C.MapCycleHasNoName
// 0x0002 (0x0002 - 0x0000)
struct B_MapCycleObject_C_MapCycleHasNoName final
{
public:
	bool                                          HasNoName;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_MapCycleObject_C_MapCycleHasNoName) == 0x000001, "Wrong alignment on B_MapCycleObject_C_MapCycleHasNoName");
static_assert(sizeof(B_MapCycleObject_C_MapCycleHasNoName) == 0x000002, "Wrong size on B_MapCycleObject_C_MapCycleHasNoName");
static_assert(offsetof(B_MapCycleObject_C_MapCycleHasNoName, HasNoName) == 0x000000, "Member 'B_MapCycleObject_C_MapCycleHasNoName::HasNoName' has a wrong offset!");
static_assert(offsetof(B_MapCycleObject_C_MapCycleHasNoName, CallFunc_IsEmpty_ReturnValue) == 0x000001, "Member 'B_MapCycleObject_C_MapCycleHasNoName::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");

}

