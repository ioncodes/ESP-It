#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IKRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "IKRig_structs.hpp"
#include "PBIK_structs.hpp"


namespace SDK
{

// Class IKRig.RetargetOpBase
// 0x0008 (0x0030 - 0x0028)
class URetargetOpBase : public UObject
{
public:
	bool                                          bIsEnabled;                                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RetargetOpBase">();
	}
	static class URetargetOpBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URetargetOpBase>();
	}
};
static_assert(alignof(URetargetOpBase) == 0x000008, "Wrong alignment on URetargetOpBase");
static_assert(sizeof(URetargetOpBase) == 0x000030, "Wrong size on URetargetOpBase");
static_assert(offsetof(URetargetOpBase, bIsEnabled) == 0x000028, "Member 'URetargetOpBase::bIsEnabled' has a wrong offset!");

// Class IKRig.CurveRemapOp
// 0x0018 (0x0048 - 0x0030)
class UCurveRemapOp final : public URetargetOpBase
{
public:
	TArray<struct FCurveRemapPair>                CurvesToRemap;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCopyAllSourceCurves;                              // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurveRemapOp">();
	}
	static class UCurveRemapOp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveRemapOp>();
	}
};
static_assert(alignof(UCurveRemapOp) == 0x000008, "Wrong alignment on UCurveRemapOp");
static_assert(sizeof(UCurveRemapOp) == 0x000048, "Wrong size on UCurveRemapOp");
static_assert(offsetof(UCurveRemapOp, CurvesToRemap) == 0x000030, "Member 'UCurveRemapOp::CurvesToRemap' has a wrong offset!");
static_assert(offsetof(UCurveRemapOp, bCopyAllSourceCurves) == 0x000040, "Member 'UCurveRemapOp::bCopyAllSourceCurves' has a wrong offset!");

// Class IKRig.RetargetOpStack
// 0x0010 (0x0038 - 0x0028)
class URetargetOpStack final : public UObject
{
public:
	TArray<class URetargetOpBase*>                RetargetOps;                                       // 0x0028(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RetargetOpStack">();
	}
	static class URetargetOpStack* GetDefaultObj()
	{
		return GetDefaultObjImpl<URetargetOpStack>();
	}
};
static_assert(alignof(URetargetOpStack) == 0x000008, "Wrong alignment on URetargetOpStack");
static_assert(sizeof(URetargetOpStack) == 0x000038, "Wrong size on URetargetOpStack");
static_assert(offsetof(URetargetOpStack, RetargetOps) == 0x000028, "Member 'URetargetOpStack::RetargetOps' has a wrong offset!");

// Class IKRig.IKGoalCreatorInterface
// 0x0000 (0x0028 - 0x0028)
class IIKGoalCreatorInterface final : public IInterface
{
public:
	void AddIKGoals(TMap<class FName, struct FIKRigGoal>* OutGoals);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKGoalCreatorInterface">();
	}
	static class IIKGoalCreatorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IIKGoalCreatorInterface>();
	}
};
static_assert(alignof(IIKGoalCreatorInterface) == 0x000008, "Wrong alignment on IIKGoalCreatorInterface");
static_assert(sizeof(IIKGoalCreatorInterface) == 0x000028, "Wrong size on IIKGoalCreatorInterface");

// Class IKRig.PinBoneOp
// 0x00E0 (0x0110 - 0x0030)
class UPinBoneOp final : public URetargetOpBase
{
public:
	TArray<struct FPinBoneData>                   BonesToPin;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ERetargetSourceOrTarget                       PinTo;                                             // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPinBoneType                                  PinType;                                           // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0xD];                                       // 0x0043(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GlobalOffset;                                      // 0x0050(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LocalOffset;                                       // 0x00B0(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PinBoneOp">();
	}
	static class UPinBoneOp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPinBoneOp>();
	}
};
static_assert(alignof(UPinBoneOp) == 0x000010, "Wrong alignment on UPinBoneOp");
static_assert(sizeof(UPinBoneOp) == 0x000110, "Wrong size on UPinBoneOp");
static_assert(offsetof(UPinBoneOp, BonesToPin) == 0x000030, "Member 'UPinBoneOp::BonesToPin' has a wrong offset!");
static_assert(offsetof(UPinBoneOp, PinTo) == 0x000040, "Member 'UPinBoneOp::PinTo' has a wrong offset!");
static_assert(offsetof(UPinBoneOp, PinType) == 0x000041, "Member 'UPinBoneOp::PinType' has a wrong offset!");
static_assert(offsetof(UPinBoneOp, bMaintainOffset) == 0x000042, "Member 'UPinBoneOp::bMaintainOffset' has a wrong offset!");
static_assert(offsetof(UPinBoneOp, GlobalOffset) == 0x000050, "Member 'UPinBoneOp::GlobalOffset' has a wrong offset!");
static_assert(offsetof(UPinBoneOp, LocalOffset) == 0x0000B0, "Member 'UPinBoneOp::LocalOffset' has a wrong offset!");

// Class IKRig.RootMotionGeneratorOp
// 0x0220 (0x0250 - 0x0030)
class URootMotionGeneratorOp final : public URetargetOpBase
{
public:
	class FName                                   SourceRootBone;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetRootBone;                                    // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPelvisBone;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionSource                             RootMotionSource;                                  // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionHeightSource                       RootHeightSource;                                  // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToNonRetargetedChildren;                 // 0x004A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffsetFromPelvis;                         // 0x004B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateWithPelvis;                                 // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             GlobalOffset;                                      // 0x0050(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x1A0];                                     // 0x00B0(0x01A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootMotionGeneratorOp">();
	}
	static class URootMotionGeneratorOp* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootMotionGeneratorOp>();
	}
};
static_assert(alignof(URootMotionGeneratorOp) == 0x000010, "Wrong alignment on URootMotionGeneratorOp");
static_assert(sizeof(URootMotionGeneratorOp) == 0x000250, "Wrong size on URootMotionGeneratorOp");
static_assert(offsetof(URootMotionGeneratorOp, SourceRootBone) == 0x000030, "Member 'URootMotionGeneratorOp::SourceRootBone' has a wrong offset!");
static_assert(offsetof(URootMotionGeneratorOp, TargetRootBone) == 0x000038, "Member 'URootMotionGeneratorOp::TargetRootBone' has a wrong offset!");
static_assert(offsetof(URootMotionGeneratorOp, TargetPelvisBone) == 0x000040, "Member 'URootMotionGeneratorOp::TargetPelvisBone' has a wrong offset!");
static_assert(offsetof(URootMotionGeneratorOp, RootMotionSource) == 0x000048, "Member 'URootMotionGeneratorOp::RootMotionSource' has a wrong offset!");
static_assert(offsetof(URootMotionGeneratorOp, RootHeightSource) == 0x000049, "Member 'URootMotionGeneratorOp::RootHeightSource' has a wrong offset!");
static_assert(offsetof(URootMotionGeneratorOp, bPropagateToNonRetargetedChildren) == 0x00004A, "Member 'URootMotionGeneratorOp::bPropagateToNonRetargetedChildren' has a wrong offset!");
static_assert(offsetof(URootMotionGeneratorOp, bMaintainOffsetFromPelvis) == 0x00004B, "Member 'URootMotionGeneratorOp::bMaintainOffsetFromPelvis' has a wrong offset!");
static_assert(offsetof(URootMotionGeneratorOp, bRotateWithPelvis) == 0x00004C, "Member 'URootMotionGeneratorOp::bRotateWithPelvis' has a wrong offset!");
static_assert(offsetof(URootMotionGeneratorOp, GlobalOffset) == 0x000050, "Member 'URootMotionGeneratorOp::GlobalOffset' has a wrong offset!");

// Class IKRig.IKRigComponent
// 0x0018 (0x00B8 - 0x00A0)
class UIKRigComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAllGoals();
	void SetIKRigGoal(const struct FIKRigGoal& Goal);
	void SetIKRigGoalPositionAndRotation(const class FName GoalName, const struct FVector& Position, const struct FQuat& Rotation, const float PositionAlpha, const float RotationAlpha);
	void SetIKRigGoalTransform(const class FName GoalName, const struct FTransform& Transform, const float PositionAlpha, const float RotationAlpha);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRigComponent">();
	}
	static class UIKRigComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRigComponent>();
	}
};
static_assert(alignof(UIKRigComponent) == 0x000008, "Wrong alignment on UIKRigComponent");
static_assert(sizeof(UIKRigComponent) == 0x0000B8, "Wrong size on UIKRigComponent");

// Class IKRig.RetargetChainSettings
// 0x00C0 (0x00E8 - 0x0028)
class URetargetChainSettings final : public UObject
{
public:
	class FName                                   SourceChain;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetChain;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTargetChainSettings                   Settings;                                          // 0x0038(0x00B0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RetargetChainSettings">();
	}
	static class URetargetChainSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<URetargetChainSettings>();
	}
};
static_assert(alignof(URetargetChainSettings) == 0x000008, "Wrong alignment on URetargetChainSettings");
static_assert(sizeof(URetargetChainSettings) == 0x0000E8, "Wrong size on URetargetChainSettings");
static_assert(offsetof(URetargetChainSettings, SourceChain) == 0x000028, "Member 'URetargetChainSettings::SourceChain' has a wrong offset!");
static_assert(offsetof(URetargetChainSettings, TargetChain) == 0x000030, "Member 'URetargetChainSettings::TargetChain' has a wrong offset!");
static_assert(offsetof(URetargetChainSettings, Settings) == 0x000038, "Member 'URetargetChainSettings::Settings' has a wrong offset!");

// Class IKRig.RetargetRootSettings
// 0x0068 (0x0090 - 0x0028)
class URetargetRootSettings final : public UObject
{
public:
	struct FTargetRootSettings                    Settings;                                          // 0x0028(0x0068)(Edit, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RetargetRootSettings">();
	}
	static class URetargetRootSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<URetargetRootSettings>();
	}
};
static_assert(alignof(URetargetRootSettings) == 0x000008, "Wrong alignment on URetargetRootSettings");
static_assert(sizeof(URetargetRootSettings) == 0x000090, "Wrong size on URetargetRootSettings");
static_assert(offsetof(URetargetRootSettings, Settings) == 0x000028, "Member 'URetargetRootSettings::Settings' has a wrong offset!");

// Class IKRig.IKRetargetGlobalSettings
// 0x0028 (0x0050 - 0x0028)
class UIKRetargetGlobalSettings final : public UObject
{
public:
	struct FRetargetGlobalSettings                Settings;                                          // 0x0028(0x0024)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRetargetGlobalSettings">();
	}
	static class UIKRetargetGlobalSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRetargetGlobalSettings>();
	}
};
static_assert(alignof(UIKRetargetGlobalSettings) == 0x000008, "Wrong alignment on UIKRetargetGlobalSettings");
static_assert(sizeof(UIKRetargetGlobalSettings) == 0x000050, "Wrong size on UIKRetargetGlobalSettings");
static_assert(offsetof(UIKRetargetGlobalSettings, Settings) == 0x000028, "Member 'UIKRetargetGlobalSettings::Settings' has a wrong offset!");

// Class IKRig.IKRetargeter
// 0x01F0 (0x0218 - 0x0028)
class UIKRetargeter final : public UObject
{
public:
	int32                                         Version;                                           // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UIKRigDefinition>        SourceIKRigAsset;                                  // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UIKRigDefinition>        TargetIKRigAsset;                                  // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FRetargetChainMap>              ChainMapping;                                      // 0x0080(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	TArray<class URetargetChainSettings*>         ChainSettings;                                     // 0x0090(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	class URetargetRootSettings*                  RootSettings;                                      // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UIKRetargetGlobalSettings*              GlobalSettings;                                    // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URetargetOpStack*                       OpStack;                                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FRetargetProfile>    Profiles;                                          // 0x00B8(0x0050)(NativeAccessSpecifierPrivate)
	class FName                                   CurrentProfile;                                    // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FIKRetargetPose>     SourceRetargetPoses;                               // 0x0110(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FIKRetargetPose>     TargetRetargetPoses;                               // 0x0160(0x0050)(NativeAccessSpecifierPrivate)
	class FName                                   CurrentSourceRetargetPose;                         // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   CurrentTargetRetargetPose;                         // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FIKRetargetPose>     RetargetPoses;                                     // 0x01C0(0x0050)(Deprecated, NativeAccessSpecifierPrivate)
	class FName                                   CurrentRetargetPose;                               // 0x0210(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static struct FTargetChainSettings GetChainSettingsFromRetargetAsset(const class UIKRetargeter* RetargetAsset, const class FName TargetChainName, const class FName OptionalProfileName);
	static struct FTargetChainSettings GetChainSettingsFromRetargetProfile(struct FRetargetProfile& RetargetProfile, const class FName TargetChainName);
	static struct FTargetChainSettings GetChainUsingGoalFromRetargetAsset(const class UIKRetargeter* RetargetAsset, const class FName IKGoalName);
	static void GetGlobalSettingsFromRetargetAsset(const class UIKRetargeter* RetargetAsset, const class FName OptionalProfileName, struct FRetargetGlobalSettings* OutSettings);
	static struct FRetargetGlobalSettings GetGlobalSettingsFromRetargetProfile(struct FRetargetProfile& RetargetProfile);
	static void GetRootSettingsFromRetargetAsset(const class UIKRetargeter* RetargetAsset, const class FName OptionalProfileName, struct FTargetRootSettings* OutSettings);
	static struct FTargetRootSettings GetRootSettingsFromRetargetProfile(struct FRetargetProfile& RetargetProfile);
	static void SetChainFKSettingsInRetargetProfile(struct FRetargetProfile& RetargetProfile, const struct FTargetChainFKSettings& FKSettings, const class FName TargetChainName);
	static void SetChainIKSettingsInRetargetProfile(struct FRetargetProfile& RetargetProfile, const struct FTargetChainIKSettings& IKSettings, const class FName TargetChainName);
	static void SetChainSettingsInRetargetProfile(struct FRetargetProfile& RetargetProfile, const struct FTargetChainSettings& ChainSettings_0, const class FName TargetChainName);
	static void SetChainSpeedPlantSettingsInRetargetProfile(struct FRetargetProfile& RetargetProfile, const struct FTargetChainSpeedPlantSettings& SpeedPlantSettings, const class FName TargetChainName);
	static void SetGlobalSettingsInRetargetProfile(struct FRetargetProfile& RetargetProfile, const struct FRetargetGlobalSettings& GlobalSettings_0);
	static void SetRootSettingsInRetargetProfile(struct FRetargetProfile& RetargetProfile, const struct FTargetRootSettings& RootSettings_0);

	bool HasSourceIKRig() const;
	bool HasTargetIKRig() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRetargeter">();
	}
	static class UIKRetargeter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRetargeter>();
	}
};
static_assert(alignof(UIKRetargeter) == 0x000008, "Wrong alignment on UIKRetargeter");
static_assert(sizeof(UIKRetargeter) == 0x000218, "Wrong size on UIKRetargeter");
static_assert(offsetof(UIKRetargeter, Version) == 0x000028, "Member 'UIKRetargeter::Version' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, SourceIKRigAsset) == 0x000030, "Member 'UIKRetargeter::SourceIKRigAsset' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, TargetIKRigAsset) == 0x000058, "Member 'UIKRetargeter::TargetIKRigAsset' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, ChainMapping) == 0x000080, "Member 'UIKRetargeter::ChainMapping' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, ChainSettings) == 0x000090, "Member 'UIKRetargeter::ChainSettings' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, RootSettings) == 0x0000A0, "Member 'UIKRetargeter::RootSettings' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, GlobalSettings) == 0x0000A8, "Member 'UIKRetargeter::GlobalSettings' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, OpStack) == 0x0000B0, "Member 'UIKRetargeter::OpStack' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, Profiles) == 0x0000B8, "Member 'UIKRetargeter::Profiles' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, CurrentProfile) == 0x000108, "Member 'UIKRetargeter::CurrentProfile' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, SourceRetargetPoses) == 0x000110, "Member 'UIKRetargeter::SourceRetargetPoses' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, TargetRetargetPoses) == 0x000160, "Member 'UIKRetargeter::TargetRetargetPoses' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, CurrentSourceRetargetPose) == 0x0001B0, "Member 'UIKRetargeter::CurrentSourceRetargetPose' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, CurrentTargetRetargetPose) == 0x0001B8, "Member 'UIKRetargeter::CurrentTargetRetargetPose' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, RetargetPoses) == 0x0001C0, "Member 'UIKRetargeter::RetargetPoses' has a wrong offset!");
static_assert(offsetof(UIKRetargeter, CurrentRetargetPose) == 0x000210, "Member 'UIKRetargeter::CurrentRetargetPose' has a wrong offset!");

// Class IKRig.IKRetargetProcessor
// 0x0378 (0x03A0 - 0x0028)
class alignas(0x10) UIKRetargetProcessor final : public UObject
{
public:
	uint8                                         Pad_28[0x160];                                     // 0x0028(0x0160)(Fixing Size After Last Property [ Dumper-7 ])
	class UIKRigProcessor*                        IKRigProcessor;                                    // 0x0188(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x1F8];                                    // 0x0190(0x01F8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URetargetOpBase*>                OpStack;                                           // 0x0388(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRetargetProcessor">();
	}
	static class UIKRetargetProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRetargetProcessor>();
	}
};
static_assert(alignof(UIKRetargetProcessor) == 0x000010, "Wrong alignment on UIKRetargetProcessor");
static_assert(sizeof(UIKRetargetProcessor) == 0x0003A0, "Wrong size on UIKRetargetProcessor");
static_assert(offsetof(UIKRetargetProcessor, IKRigProcessor) == 0x000188, "Member 'UIKRetargetProcessor::IKRigProcessor' has a wrong offset!");
static_assert(offsetof(UIKRetargetProcessor, OpStack) == 0x000388, "Member 'UIKRetargetProcessor::OpStack' has a wrong offset!");

// Class IKRig.IKRigEffectorGoal
// 0x00D8 (0x0100 - 0x0028)
class UIKRigEffectorGoal final : public UObject
{
public:
	class FName                                   GoalName;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionAlpha;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             CurrentTransform;                                  // 0x0040(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InitialTransform;                                  // 0x00A0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRigEffectorGoal">();
	}
	static class UIKRigEffectorGoal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRigEffectorGoal>();
	}
};
static_assert(alignof(UIKRigEffectorGoal) == 0x000010, "Wrong alignment on UIKRigEffectorGoal");
static_assert(sizeof(UIKRigEffectorGoal) == 0x000100, "Wrong size on UIKRigEffectorGoal");
static_assert(offsetof(UIKRigEffectorGoal, GoalName) == 0x000028, "Member 'UIKRigEffectorGoal::GoalName' has a wrong offset!");
static_assert(offsetof(UIKRigEffectorGoal, BoneName) == 0x000030, "Member 'UIKRigEffectorGoal::BoneName' has a wrong offset!");
static_assert(offsetof(UIKRigEffectorGoal, PositionAlpha) == 0x000038, "Member 'UIKRigEffectorGoal::PositionAlpha' has a wrong offset!");
static_assert(offsetof(UIKRigEffectorGoal, RotationAlpha) == 0x00003C, "Member 'UIKRigEffectorGoal::RotationAlpha' has a wrong offset!");
static_assert(offsetof(UIKRigEffectorGoal, CurrentTransform) == 0x000040, "Member 'UIKRigEffectorGoal::CurrentTransform' has a wrong offset!");
static_assert(offsetof(UIKRigEffectorGoal, InitialTransform) == 0x0000A0, "Member 'UIKRigEffectorGoal::InitialTransform' has a wrong offset!");

// Class IKRig.IKRigDefinition
// 0x00D8 (0x0100 - 0x0028)
class UIKRigDefinition final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           PreviewSkeletalMesh;                               // 0x0030(0x0028)(Edit, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIKRigSkeleton                         Skeleton;                                          // 0x0058(0x0070)(NativeAccessSpecifierPrivate)
	TArray<class UIKRigEffectorGoal*>             Goals;                                             // 0x00C8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UIKRigSolver*>                   Solvers;                                           // 0x00D8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FRetargetDefinition                    RetargetDefinition;                                // 0x00E8(0x0018)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRigDefinition">();
	}
	static class UIKRigDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRigDefinition>();
	}
};
static_assert(alignof(UIKRigDefinition) == 0x000008, "Wrong alignment on UIKRigDefinition");
static_assert(sizeof(UIKRigDefinition) == 0x000100, "Wrong size on UIKRigDefinition");
static_assert(offsetof(UIKRigDefinition, PreviewSkeletalMesh) == 0x000030, "Member 'UIKRigDefinition::PreviewSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UIKRigDefinition, Skeleton) == 0x000058, "Member 'UIKRigDefinition::Skeleton' has a wrong offset!");
static_assert(offsetof(UIKRigDefinition, Goals) == 0x0000C8, "Member 'UIKRigDefinition::Goals' has a wrong offset!");
static_assert(offsetof(UIKRigDefinition, Solvers) == 0x0000D8, "Member 'UIKRigDefinition::Solvers' has a wrong offset!");
static_assert(offsetof(UIKRigDefinition, RetargetDefinition) == 0x0000E8, "Member 'UIKRigDefinition::RetargetDefinition' has a wrong offset!");

// Class IKRig.IKRigProcessor
// 0x0120 (0x0148 - 0x0028)
class UIKRigProcessor final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UIKRigSolver*>                   Solvers;                                           // 0x0060(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0xD8];                                      // 0x0070(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRigProcessor">();
	}
	static class UIKRigProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRigProcessor>();
	}
};
static_assert(alignof(UIKRigProcessor) == 0x000008, "Wrong alignment on UIKRigProcessor");
static_assert(sizeof(UIKRigProcessor) == 0x000148, "Wrong size on UIKRigProcessor");
static_assert(offsetof(UIKRigProcessor, Solvers) == 0x000060, "Member 'UIKRigProcessor::Solvers' has a wrong offset!");

// Class IKRig.IKRigSolver
// 0x0008 (0x0030 - 0x0028)
class UIKRigSolver : public UObject
{
public:
	bool                                          bIsEnabled;                                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRigSolver">();
	}
	static class UIKRigSolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRigSolver>();
	}
};
static_assert(alignof(UIKRigSolver) == 0x000008, "Wrong alignment on UIKRigSolver");
static_assert(sizeof(UIKRigSolver) == 0x000030, "Wrong size on UIKRigSolver");
static_assert(offsetof(UIKRigSolver, bIsEnabled) == 0x000028, "Member 'UIKRigSolver::bIsEnabled' has a wrong offset!");

// Class IKRig.IKRig_BodyMoverEffector
// 0x0018 (0x0040 - 0x0028)
class UIKRig_BodyMoverEffector final : public UObject
{
public:
	class FName                                   GoalName;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InfluenceMultiplier;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_BodyMoverEffector">();
	}
	static class UIKRig_BodyMoverEffector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_BodyMoverEffector>();
	}
};
static_assert(alignof(UIKRig_BodyMoverEffector) == 0x000008, "Wrong alignment on UIKRig_BodyMoverEffector");
static_assert(sizeof(UIKRig_BodyMoverEffector) == 0x000040, "Wrong size on UIKRig_BodyMoverEffector");
static_assert(offsetof(UIKRig_BodyMoverEffector, GoalName) == 0x000028, "Member 'UIKRig_BodyMoverEffector::GoalName' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMoverEffector, BoneName) == 0x000030, "Member 'UIKRig_BodyMoverEffector::BoneName' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMoverEffector, InfluenceMultiplier) == 0x000038, "Member 'UIKRig_BodyMoverEffector::InfluenceMultiplier' has a wrong offset!");

// Class IKRig.IKRig_BodyMover
// 0x0050 (0x0080 - 0x0030)
class UIKRig_BodyMover final : public UIKRigSolver
{
public:
	class FName                                   RootBone;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionAlpha;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionPositiveX;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionNegativeX;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionPositiveY;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionNegativeY;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionPositiveZ;                                 // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionNegativeZ;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateXAlpha;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateYAlpha;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateZAlpha;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UIKRig_BodyMoverEffector*>       Effectors;                                         // 0x0068(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_BodyMover">();
	}
	static class UIKRig_BodyMover* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_BodyMover>();
	}
};
static_assert(alignof(UIKRig_BodyMover) == 0x000008, "Wrong alignment on UIKRig_BodyMover");
static_assert(sizeof(UIKRig_BodyMover) == 0x000080, "Wrong size on UIKRig_BodyMover");
static_assert(offsetof(UIKRig_BodyMover, RootBone) == 0x000030, "Member 'UIKRig_BodyMover::RootBone' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, PositionAlpha) == 0x000038, "Member 'UIKRig_BodyMover::PositionAlpha' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, PositionPositiveX) == 0x00003C, "Member 'UIKRig_BodyMover::PositionPositiveX' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, PositionNegativeX) == 0x000040, "Member 'UIKRig_BodyMover::PositionNegativeX' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, PositionPositiveY) == 0x000044, "Member 'UIKRig_BodyMover::PositionPositiveY' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, PositionNegativeY) == 0x000048, "Member 'UIKRig_BodyMover::PositionNegativeY' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, PositionPositiveZ) == 0x00004C, "Member 'UIKRig_BodyMover::PositionPositiveZ' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, PositionNegativeZ) == 0x000050, "Member 'UIKRig_BodyMover::PositionNegativeZ' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, RotationAlpha) == 0x000054, "Member 'UIKRig_BodyMover::RotationAlpha' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, RotateXAlpha) == 0x000058, "Member 'UIKRig_BodyMover::RotateXAlpha' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, RotateYAlpha) == 0x00005C, "Member 'UIKRig_BodyMover::RotateYAlpha' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, RotateZAlpha) == 0x000060, "Member 'UIKRig_BodyMover::RotateZAlpha' has a wrong offset!");
static_assert(offsetof(UIKRig_BodyMover, Effectors) == 0x000068, "Member 'UIKRig_BodyMover::Effectors' has a wrong offset!");

// Class IKRig.IKRig_LimbEffector
// 0x0010 (0x0038 - 0x0028)
class UIKRig_LimbEffector final : public UObject
{
public:
	class FName                                   GoalName;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_LimbEffector">();
	}
	static class UIKRig_LimbEffector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_LimbEffector>();
	}
};
static_assert(alignof(UIKRig_LimbEffector) == 0x000008, "Wrong alignment on UIKRig_LimbEffector");
static_assert(sizeof(UIKRig_LimbEffector) == 0x000038, "Wrong size on UIKRig_LimbEffector");
static_assert(offsetof(UIKRig_LimbEffector, GoalName) == 0x000028, "Member 'UIKRig_LimbEffector::GoalName' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbEffector, BoneName) == 0x000030, "Member 'UIKRig_LimbEffector::BoneName' has a wrong offset!");

// Class IKRig.IKRig_LimbSolver
// 0x0060 (0x0090 - 0x0030)
class UIKRig_LimbSolver final : public UIKRigSolver
{
public:
	class FName                                   RootName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachPrecision;                                    // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         HingeRotationAxis;                                 // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxIterations;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLimit;                                      // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRotationAngle;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAveragePull;                                      // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PullDistribution;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReachStepAlpha;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTwistCorrection;                            // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         EndBoneForwardAxis;                                // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UIKRig_LimbEffector*                    Effector;                                          // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x28];                                      // 0x0068(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_LimbSolver">();
	}
	static class UIKRig_LimbSolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_LimbSolver>();
	}
};
static_assert(alignof(UIKRig_LimbSolver) == 0x000008, "Wrong alignment on UIKRig_LimbSolver");
static_assert(sizeof(UIKRig_LimbSolver) == 0x000090, "Wrong size on UIKRig_LimbSolver");
static_assert(offsetof(UIKRig_LimbSolver, RootName) == 0x000030, "Member 'UIKRig_LimbSolver::RootName' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, ReachPrecision) == 0x000038, "Member 'UIKRig_LimbSolver::ReachPrecision' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, HingeRotationAxis) == 0x00003C, "Member 'UIKRig_LimbSolver::HingeRotationAxis' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, MaxIterations) == 0x000040, "Member 'UIKRig_LimbSolver::MaxIterations' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, bEnableLimit) == 0x000044, "Member 'UIKRig_LimbSolver::bEnableLimit' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, MinRotationAngle) == 0x000048, "Member 'UIKRig_LimbSolver::MinRotationAngle' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, bAveragePull) == 0x00004C, "Member 'UIKRig_LimbSolver::bAveragePull' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, PullDistribution) == 0x000050, "Member 'UIKRig_LimbSolver::PullDistribution' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, ReachStepAlpha) == 0x000054, "Member 'UIKRig_LimbSolver::ReachStepAlpha' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, bEnableTwistCorrection) == 0x000058, "Member 'UIKRig_LimbSolver::bEnableTwistCorrection' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, EndBoneForwardAxis) == 0x000059, "Member 'UIKRig_LimbSolver::EndBoneForwardAxis' has a wrong offset!");
static_assert(offsetof(UIKRig_LimbSolver, Effector) == 0x000060, "Member 'UIKRig_LimbSolver::Effector' has a wrong offset!");

// Class IKRig.IKRig_FBIKEffector
// 0x0028 (0x0050 - 0x0028)
class UIKRig_FBIKEffector final : public UObject
{
public:
	class FName                                   GoalName;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChainDepth;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthAlpha;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PullChainAlpha;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PinRotation;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexInSolver;                                     // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_FBIKEffector">();
	}
	static class UIKRig_FBIKEffector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_FBIKEffector>();
	}
};
static_assert(alignof(UIKRig_FBIKEffector) == 0x000008, "Wrong alignment on UIKRig_FBIKEffector");
static_assert(sizeof(UIKRig_FBIKEffector) == 0x000050, "Wrong size on UIKRig_FBIKEffector");
static_assert(offsetof(UIKRig_FBIKEffector, GoalName) == 0x000028, "Member 'UIKRig_FBIKEffector::GoalName' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKEffector, BoneName) == 0x000030, "Member 'UIKRig_FBIKEffector::BoneName' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKEffector, ChainDepth) == 0x000038, "Member 'UIKRig_FBIKEffector::ChainDepth' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKEffector, StrengthAlpha) == 0x00003C, "Member 'UIKRig_FBIKEffector::StrengthAlpha' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKEffector, PullChainAlpha) == 0x000040, "Member 'UIKRig_FBIKEffector::PullChainAlpha' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKEffector, PinRotation) == 0x000044, "Member 'UIKRig_FBIKEffector::PinRotation' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKEffector, IndexInSolver) == 0x000048, "Member 'UIKRig_FBIKEffector::IndexInSolver' has a wrong offset!");

// Class IKRig.IKRig_FBIKBoneSettings
// 0x0050 (0x0078 - 0x0028)
class UIKRig_FBIKBoneSettings final : public UObject
{
public:
	class FName                                   bone;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationStiffness;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionStiffness;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                X;                                                 // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinX;                                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxX;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                Y;                                                 // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinY;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxY;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKLimitType                                Z;                                                 // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinZ;                                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxZ;                                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePreferredAngles;                               // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreferredAngles;                                   // 0x0060(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_FBIKBoneSettings">();
	}
	static class UIKRig_FBIKBoneSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_FBIKBoneSettings>();
	}
};
static_assert(alignof(UIKRig_FBIKBoneSettings) == 0x000008, "Wrong alignment on UIKRig_FBIKBoneSettings");
static_assert(sizeof(UIKRig_FBIKBoneSettings) == 0x000078, "Wrong size on UIKRig_FBIKBoneSettings");
static_assert(offsetof(UIKRig_FBIKBoneSettings, bone) == 0x000028, "Member 'UIKRig_FBIKBoneSettings::bone' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, RotationStiffness) == 0x000030, "Member 'UIKRig_FBIKBoneSettings::RotationStiffness' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, PositionStiffness) == 0x000034, "Member 'UIKRig_FBIKBoneSettings::PositionStiffness' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, X) == 0x000038, "Member 'UIKRig_FBIKBoneSettings::X' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, MinX) == 0x00003C, "Member 'UIKRig_FBIKBoneSettings::MinX' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, MaxX) == 0x000040, "Member 'UIKRig_FBIKBoneSettings::MaxX' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, Y) == 0x000044, "Member 'UIKRig_FBIKBoneSettings::Y' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, MinY) == 0x000048, "Member 'UIKRig_FBIKBoneSettings::MinY' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, MaxY) == 0x00004C, "Member 'UIKRig_FBIKBoneSettings::MaxY' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, Z) == 0x000050, "Member 'UIKRig_FBIKBoneSettings::Z' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, MinZ) == 0x000054, "Member 'UIKRig_FBIKBoneSettings::MinZ' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, MaxZ) == 0x000058, "Member 'UIKRig_FBIKBoneSettings::MaxZ' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, bUsePreferredAngles) == 0x00005C, "Member 'UIKRig_FBIKBoneSettings::bUsePreferredAngles' has a wrong offset!");
static_assert(offsetof(UIKRig_FBIKBoneSettings, PreferredAngles) == 0x000060, "Member 'UIKRig_FBIKBoneSettings::PreferredAngles' has a wrong offset!");

// Class IKRig.IKRigFBIKSolver
// 0x00C0 (0x00F0 - 0x0030)
class UIKRigFBIKSolver final : public UIKRigSolver
{
public:
	class FName                                   RootBone;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Iterations;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubIterations;                                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassMultiplier;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowStretch;                                     // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPBIKRootBehavior                             RootBehavior;                                      // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRootPrePullSettings                   PrePullRootSettings;                               // 0x0048(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PullChainAlpha;                                    // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverRelaxation;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartSolveFromInputPose;                          // 0x0074(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UIKRig_FBIKEffector*>            Effectors;                                         // 0x0078(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UIKRig_FBIKBoneSettings*>        BoneSettings;                                      // 0x0088(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x58];                                      // 0x0098(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRigFBIKSolver">();
	}
	static class UIKRigFBIKSolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRigFBIKSolver>();
	}
};
static_assert(alignof(UIKRigFBIKSolver) == 0x000008, "Wrong alignment on UIKRigFBIKSolver");
static_assert(sizeof(UIKRigFBIKSolver) == 0x0000F0, "Wrong size on UIKRigFBIKSolver");
static_assert(offsetof(UIKRigFBIKSolver, RootBone) == 0x000030, "Member 'UIKRigFBIKSolver::RootBone' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, Iterations) == 0x000038, "Member 'UIKRigFBIKSolver::Iterations' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, SubIterations) == 0x00003C, "Member 'UIKRigFBIKSolver::SubIterations' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, MassMultiplier) == 0x000040, "Member 'UIKRigFBIKSolver::MassMultiplier' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, bAllowStretch) == 0x000044, "Member 'UIKRigFBIKSolver::bAllowStretch' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, RootBehavior) == 0x000045, "Member 'UIKRigFBIKSolver::RootBehavior' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, PrePullRootSettings) == 0x000048, "Member 'UIKRigFBIKSolver::PrePullRootSettings' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, PullChainAlpha) == 0x000068, "Member 'UIKRigFBIKSolver::PullChainAlpha' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, MaxAngle) == 0x00006C, "Member 'UIKRigFBIKSolver::MaxAngle' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, OverRelaxation) == 0x000070, "Member 'UIKRigFBIKSolver::OverRelaxation' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, bStartSolveFromInputPose) == 0x000074, "Member 'UIKRigFBIKSolver::bStartSolveFromInputPose' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, Effectors) == 0x000078, "Member 'UIKRigFBIKSolver::Effectors' has a wrong offset!");
static_assert(offsetof(UIKRigFBIKSolver, BoneSettings) == 0x000088, "Member 'UIKRigFBIKSolver::BoneSettings' has a wrong offset!");

// Class IKRig.IKRig_PoleSolverEffector
// 0x0018 (0x0040 - 0x0028)
class UIKRig_PoleSolverEffector final : public UObject
{
public:
	class FName                                   GoalName;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_PoleSolverEffector">();
	}
	static class UIKRig_PoleSolverEffector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_PoleSolverEffector>();
	}
};
static_assert(alignof(UIKRig_PoleSolverEffector) == 0x000008, "Wrong alignment on UIKRig_PoleSolverEffector");
static_assert(sizeof(UIKRig_PoleSolverEffector) == 0x000040, "Wrong size on UIKRig_PoleSolverEffector");
static_assert(offsetof(UIKRig_PoleSolverEffector, GoalName) == 0x000028, "Member 'UIKRig_PoleSolverEffector::GoalName' has a wrong offset!");
static_assert(offsetof(UIKRig_PoleSolverEffector, BoneName) == 0x000030, "Member 'UIKRig_PoleSolverEffector::BoneName' has a wrong offset!");
static_assert(offsetof(UIKRig_PoleSolverEffector, Alpha) == 0x000038, "Member 'UIKRig_PoleSolverEffector::Alpha' has a wrong offset!");

// Class IKRig.IKRig_PoleSolver
// 0x0038 (0x0068 - 0x0030)
class UIKRig_PoleSolver final : public UIKRigSolver
{
public:
	class FName                                   RootName;                                          // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndName;                                           // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIKRig_PoleSolverEffector*              Effector;                                          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x20];                                      // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_PoleSolver">();
	}
	static class UIKRig_PoleSolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_PoleSolver>();
	}
};
static_assert(alignof(UIKRig_PoleSolver) == 0x000008, "Wrong alignment on UIKRig_PoleSolver");
static_assert(sizeof(UIKRig_PoleSolver) == 0x000068, "Wrong size on UIKRig_PoleSolver");
static_assert(offsetof(UIKRig_PoleSolver, RootName) == 0x000030, "Member 'UIKRig_PoleSolver::RootName' has a wrong offset!");
static_assert(offsetof(UIKRig_PoleSolver, EndName) == 0x000038, "Member 'UIKRig_PoleSolver::EndName' has a wrong offset!");
static_assert(offsetof(UIKRig_PoleSolver, Effector) == 0x000040, "Member 'UIKRig_PoleSolver::Effector' has a wrong offset!");

// Class IKRig.IKRig_SetTransformEffector
// 0x0008 (0x0030 - 0x0028)
class UIKRig_SetTransformEffector final : public UObject
{
public:
	bool                                          bEnablePosition;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRotation;                                   // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_SetTransformEffector">();
	}
	static class UIKRig_SetTransformEffector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_SetTransformEffector>();
	}
};
static_assert(alignof(UIKRig_SetTransformEffector) == 0x000008, "Wrong alignment on UIKRig_SetTransformEffector");
static_assert(sizeof(UIKRig_SetTransformEffector) == 0x000030, "Wrong size on UIKRig_SetTransformEffector");
static_assert(offsetof(UIKRig_SetTransformEffector, bEnablePosition) == 0x000028, "Member 'UIKRig_SetTransformEffector::bEnablePosition' has a wrong offset!");
static_assert(offsetof(UIKRig_SetTransformEffector, bEnableRotation) == 0x000029, "Member 'UIKRig_SetTransformEffector::bEnableRotation' has a wrong offset!");
static_assert(offsetof(UIKRig_SetTransformEffector, Alpha) == 0x00002C, "Member 'UIKRig_SetTransformEffector::Alpha' has a wrong offset!");

// Class IKRig.IKRig_SetTransform
// 0x0020 (0x0050 - 0x0030)
class UIKRig_SetTransform final : public UIKRigSolver
{
public:
	class FName                                   Goal;                                              // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootBone;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIKRig_SetTransformEffector*            Effector;                                          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IKRig_SetTransform">();
	}
	static class UIKRig_SetTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIKRig_SetTransform>();
	}
};
static_assert(alignof(UIKRig_SetTransform) == 0x000008, "Wrong alignment on UIKRig_SetTransform");
static_assert(sizeof(UIKRig_SetTransform) == 0x000050, "Wrong size on UIKRig_SetTransform");
static_assert(offsetof(UIKRig_SetTransform, Goal) == 0x000030, "Member 'UIKRig_SetTransform::Goal' has a wrong offset!");
static_assert(offsetof(UIKRig_SetTransform, RootBone) == 0x000038, "Member 'UIKRig_SetTransform::RootBone' has a wrong offset!");
static_assert(offsetof(UIKRig_SetTransform, Effector) == 0x000040, "Member 'UIKRig_SetTransform::Effector' has a wrong offset!");

}

