#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_Witch

#include "Basic.hpp"

#include "EHighlightChannel_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "STauntAnimation_structs.hpp"
#include "PropWitchHuntModule_structs.hpp"
#include "SCalculatedScoreStat_structs.hpp"
#include "SRuntimePropData_structs.hpp"


namespace SDK::Params
{

// Function B_Witch.B_Witch_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_ReceivePossessed) == 0x000008, "Wrong alignment on B_Witch_C_ReceivePossessed");
static_assert(sizeof(B_Witch_C_ReceivePossessed) == 0x000008, "Wrong size on B_Witch_C_ReceivePossessed");
static_assert(offsetof(B_Witch_C_ReceivePossessed, NewController) == 0x000000, "Member 'B_Witch_C_ReceivePossessed::NewController' has a wrong offset!");

// Function B_Witch.B_Witch_C.SetProp
// 0x00E0 (0x00E0 - 0x0000)
struct B_Witch_C_SetProp final
{
public:
	class AB_PropPawnPhysics_C*                   SpawnedProp_0;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PropPawnPhysics_C*                   SpawnProp;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValues_MaximumMana;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_CurrentMana;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValues_CurrentManaRegenPerSecond;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0070(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PropPawnPhysics_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_SetProp) == 0x000010, "Wrong alignment on B_Witch_C_SetProp");
static_assert(sizeof(B_Witch_C_SetProp) == 0x0000E0, "Wrong size on B_Witch_C_SetProp");
static_assert(offsetof(B_Witch_C_SetProp, SpawnedProp_0) == 0x000000, "Member 'B_Witch_C_SetProp::SpawnedProp_0' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, SpawnProp) == 0x000008, "Member 'B_Witch_C_SetProp::SpawnProp' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'B_Witch_C_SetProp::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_GetValues_MaximumMana) == 0x000018, "Member 'B_Witch_C_SetProp::CallFunc_GetValues_MaximumMana' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_GetValues_CurrentMana) == 0x000020, "Member 'B_Witch_C_SetProp::CallFunc_GetValues_CurrentMana' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_GetValues_CurrentManaRegenPerSecond) == 0x000028, "Member 'B_Witch_C_SetProp::CallFunc_GetValues_CurrentManaRegenPerSecond' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_GetController_ReturnValue) == 0x000030, "Member 'B_Witch_C_SetProp::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_GetController_ReturnValue_1) == 0x000038, "Member 'B_Witch_C_SetProp::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'B_Witch_C_SetProp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, K2Node_DynamicCast_AsPlayer_Controller) == 0x000048, "Member 'B_Witch_C_SetProp::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_Witch_C_SetProp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, K2Node_DynamicCast_AsB_Player_State) == 0x000058, "Member 'B_Witch_C_SetProp::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'B_Witch_C_SetProp::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_GetTransform_ReturnValue) == 0x000070, "Member 'B_Witch_C_SetProp::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000D0, "Member 'B_Witch_C_SetProp::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetProp, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000D8, "Member 'B_Witch_C_SetProp::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.TickVisuals
// 0x0070 (0x0070 - 0x0000)
struct B_Witch_C_TickVisuals final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_HUD_C>              K2Node_DynamicCast_AsI_HUD;                        // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_HUD_C*                              K2Node_DynamicCast_AsWB_HUD;                       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_HUDSkill_C*                         CallFunc_GetHUDSkills_Movement;                    // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWB_HUDSkill_C*                         CallFunc_GetHUDSkills_Utility;                     // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_TickVisuals) == 0x000008, "Wrong alignment on B_Witch_C_TickVisuals");
static_assert(sizeof(B_Witch_C_TickVisuals) == 0x000070, "Wrong size on B_Witch_C_TickVisuals");
static_assert(offsetof(B_Witch_C_TickVisuals, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'B_Witch_C_TickVisuals::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, CallFunc_GetGameInstance_ReturnValue_1) == 0x000008, "Member 'B_Witch_C_TickVisuals::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_Witch_C_TickVisuals::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_Witch_C_TickVisuals::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000020, "Member 'B_Witch_C_TickVisuals::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_Witch_C_TickVisuals::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, K2Node_DynamicCast_AsI_HUD) == 0x000030, "Member 'B_Witch_C_TickVisuals::K2Node_DynamicCast_AsI_HUD' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'B_Witch_C_TickVisuals::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, K2Node_DynamicCast_AsWB_HUD) == 0x000048, "Member 'B_Witch_C_TickVisuals::K2Node_DynamicCast_AsWB_HUD' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, K2Node_DynamicCast_bSuccess_3) == 0x000050, "Member 'B_Witch_C_TickVisuals::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, CallFunc_GetHUDSkills_Movement) == 0x000058, "Member 'B_Witch_C_TickVisuals::CallFunc_GetHUDSkills_Movement' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, CallFunc_GetHUDSkills_Utility) == 0x000060, "Member 'B_Witch_C_TickVisuals::CallFunc_GetHUDSkills_Utility' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'B_Witch_C_TickVisuals::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, CallFunc_IsValid_ReturnValue_1) == 0x000069, "Member 'B_Witch_C_TickVisuals::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickVisuals, CallFunc_IsLocallyControlled_ReturnValue) == 0x00006A, "Member 'B_Witch_C_TickVisuals::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.ExecuteUbergraph_B_Witch
// 0x0BC0 (0x0BC0 - 0x0000)
struct B_Witch_C_ExecuteUbergraph_B_Witch final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_3;                   // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_4;                   // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_5;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_1;            // 0x0068(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_6;                   // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_2;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_7;                   // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_3;            // 0x00B8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_8;                   // 0x00CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_9;                   // 0x0104(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_4;            // 0x010C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0120(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_5;            // 0x0180(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_FieldOfViewComponent_C*              CallFunc_AddComponent_ReturnValue;                 // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x01A0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_4;          // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BA[0x6];                                      // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingPlayerControllerMovementInput_ReturnValue; // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DB[0x1];                                      // 0x01DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_NewController;                        // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Prop;                           // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_5;          // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_212[0xE];                                      // 0x0212(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0220(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x02C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AB_PropPawnPhysics_C*                   CallFunc_SetProp_SpawnedProp;                      // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x02D8(0x0018)(HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x02F0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0350(0x0018)(HasGetValueTypeHash)
	class AController*                            K2Node_ComponentBoundEvent_Killer;                 // 0x0368(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIHighlightable_C>     K2Node_DynamicCast_AsIHighlightable;               // 0x0370(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0381(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_ForcedBoolean;               // 0x0382(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0383(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0385(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0386(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_387[0x1];                                      // 0x0387(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0388(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x03A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x03D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd_1;                  // 0x03D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D2[0x2];                                      // 0x03D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted_1;  // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DA[0x6];                                      // 0x03DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x03E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_3;               // 0x03E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x03F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F3[0x5];                                      // 0x03F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_2;                            // 0x03F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0410(0x0018)(HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NewLocation;            // 0x0428(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_442[0x2];                                      // 0x0442(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_6;            // 0x0444(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_454[0x4];                                      // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0458(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0470(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_492[0x2];                                      // 0x0492(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0498(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x04B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetIgnoreActors_Actors;                   // 0x04C8(0x0010)(ReferenceParm)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x04D8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x04F0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_4;             // 0x0509(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50A[0x6];                                      // 0x050A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSTauntAnimation                       K2Node_CustomEvent_Sound;                          // 0x0510(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_3;                            // 0x0528(0x0018)(HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIProp_C>              K2Node_DynamicCast_AsIProp;                        // 0x0548(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OffsetPosition_ValidTransform;            // 0x0559(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55A[0x6];                                      // 0x055A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_OffsetPosition_Transform;                 // 0x0560(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIProp_C>              K2Node_DynamicCast_AsIProp_1;                      // 0x05C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetMaxHealth_MaxHealth;                   // 0x05D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_4;               // 0x05E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_4;               // 0x05F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x05F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd_2;                  // 0x05F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted_2;  // 0x05FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x05FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x05FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD[0x3];                                      // 0x05FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_3;        // 0x0600(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_4;        // 0x0618(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0634(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_635[0x3];                                      // 0x0635(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_5;        // 0x0638(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue_1;    // 0x0650(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x0658(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0671(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0672(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_673[0x5];                                      // 0x0673(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0678(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0698(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x06B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B1[0x3];                                      // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x06B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x06B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x06BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x06C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_VSizeSquared_ReturnValue;                 // 0x06D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x06E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x06E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E2[0x6];                                      // 0x06E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x06E8(0x0018)(HasGetValueTypeHash)
	TScriptInterface<class IIHighlightable_C>     K2Node_DynamicCast_AsIHighlightable_1;             // 0x0700(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0710(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0711(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_ForcedBoolean_1;             // 0x0712(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_713[0x5];                                      // 0x0713(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_6;        // 0x0718(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0730(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0738(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x073C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x073D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73E[0x2];                                      // 0x073E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0740(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0748(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_751[0x3];                                      // 0x0751(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_3;                               // 0x0754(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0758(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x075C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHighlightChannel                             K2Node_Event_Channel;                              // 0x0761(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_762[0x2];                                      // 0x0762(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_1;                              // 0x0764(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item_1;                         // 0x0770(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0778(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x077C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77D[0x3];                                      // 0x077D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIHighlightable_C>     K2Node_DynamicCast_AsIHighlightable_2;             // 0x0780(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0790(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0791(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_ForcedBoolean_2;             // 0x0792(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_793[0x1];                                      // 0x0793(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName;                     // 0x0794(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79C[0x4];                                      // 0x079C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue; // 0x07A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x07A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x07AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSTauntAnimation                       CallFunc_Array_Get_Item_2;                         // 0x07B0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x07C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C1[0x3];                                      // 0x07C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_7;            // 0x07C4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        K2Node_CustomEvent_Head;                           // 0x07D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        K2Node_CustomEvent_Body;                           // 0x07E4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        K2Node_CustomEvent_Hat;                            // 0x07F4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        K2Node_CustomEvent_Broom;                          // 0x0804(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        K2Node_CustomEvent_Color;                          // 0x0814(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_824[0x4];                                      // 0x0824(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayMontageCallbackProxy*              CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1; // 0x0828(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0831(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0832(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0833(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0834(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0835(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0836(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_837[0x1];                                      // 0x0837(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0838(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0840(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0848(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x0850(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x0859(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85A[0x6];                                      // 0x085A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_HUD_C*                              K2Node_DynamicCast_AsWB_HUD;                       // 0x0860(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x0868(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_869[0x7];                                      // 0x0869(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0870(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_17;                    // 0x0878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0879(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87A[0x2];                                      // 0x087A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_NotifyName_1;                   // 0x087C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x0884(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_885[0x3];                                      // 0x0885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_CustomEvent_HitPlayerState;                 // 0x0888(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0890(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x08A8(0x0018)(HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_2;             // 0x08C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_18;                    // 0x08C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C9[0x7];                                      // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_3;             // 0x08D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_19;                    // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D9[0x3];                                      // 0x08D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_HalfHeightAdjust_1;                   // 0x08DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ScaledHalfHeightAdjust_1;             // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HalfHeightAdjust;                     // 0x08E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_ScaledHalfHeightAdjust;               // 0x08E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8EC[0x4];                                      // 0x08EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x08F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_8;            // 0x08F8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0908(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_20;                    // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_911[0x7];                                      // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_4;             // 0x0918(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_21;                    // 0x0920(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_921[0x7];                                      // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_HUD_C*                              K2Node_DynamicCast_AsWB_HUD_1;                     // 0x0928(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_22;                    // 0x0930(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0931(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_3;        // 0x0932(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetHighlight_ForcedBoolean_3;             // 0x0933(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxAcceleration_ReturnValue;           // 0x0934(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0938(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0950(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanCrouch_ReturnValue;                    // 0x0968(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCrouching_ReturnValue;                  // 0x0969(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCrouching_ReturnValue_1;                // 0x096A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x096B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_NotifyName_2;                   // 0x096C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0974(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_975[0x3];                                      // 0x0975(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0978(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0980(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(class FName NotifyName)>       K2Node_CreateDelegate_OutputDelegate_9;            // 0x0998(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x09A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x09AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x09B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B4[0x4];                                      // 0x09B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x09B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_10;           // 0x09D0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_SpawnProp_SpawnedProp;                    // 0x09E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSRuntimePropData                      CallFunc_SpawnProp_LastRuntimePropData;            // 0x09E8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMaxHealth_ReturnMaxHealth;             // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRuntimePropData                       K2Node_MakeStruct_RuntimePropData;                 // 0x0A28(0x0038)(NoDestructor)
	bool                                          CallFunc_IsGamepadMode_ReturnValue;                // 0x0A60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGamepadMode_ReturnValue_1;              // 0x0A61(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x0A62(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A63[0x5];                                      // 0x0A63(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0A68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0A70(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_7;        // 0x0A88(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0AA0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0AB8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Divide_VectorFloat_B_ImplicitCast;        // 0x0BB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x0BB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_ExecuteUbergraph_B_Witch) == 0x000010, "Wrong alignment on B_Witch_C_ExecuteUbergraph_B_Witch");
static_assert(sizeof(B_Witch_C_ExecuteUbergraph_B_Witch) == 0x000BC0, "Wrong size on B_Witch_C_ExecuteUbergraph_B_Witch");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, EntryPoint) == 0x000000, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_3) == 0x000004, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_4) == 0x00000C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_bool_Variable) == 0x000014, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Greater_IntInt_ReturnValue) == 0x000030, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_State) == 0x000038, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_name_Variable) == 0x000044, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsRoundEnd_RoundIsEnd) == 0x00004C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x00004D, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_5) == 0x000050, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanOR_ReturnValue) == 0x000058, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00005A, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsDedicatedServer_ReturnValue) == 0x00005B, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_int_Loop_Counter_Variable) == 0x00005C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_int_Array_Index_Variable) == 0x000064, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_1) == 0x000068, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_6) == 0x000078, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_2) == 0x000080, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameInstance_ReturnValue) == 0x000090, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_7) == 0x000098, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_7' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_Instance) == 0x0000A0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_1) == 0x0000A8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_int_Loop_Counter_Variable_1) == 0x0000AC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_int_Array_Index_Variable_1) == 0x0000B4, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000B8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x0000C8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_8) == 0x0000CC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_8' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000D8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000E0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000E8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_2) == 0x0000F0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000F8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_3) == 0x000100, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_9) == 0x000104, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_9' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_4) == 0x00010C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_struct_Variable) == 0x000120, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_5) == 0x000180, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_AddComponent_ReturnValue) == 0x000190, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x000198, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key) == 0x0001A0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x0001B8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsDedicatedServer_ReturnValue_4) == 0x0001B9, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsDedicatedServer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetController_ReturnValue) == 0x0001C0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_int_Variable) == 0x0001C8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Player_Controller) == 0x0001D0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_4) == 0x0001D8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_HasAuthority_ReturnValue) == 0x0001D9, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsUsingPlayerControllerMovementInput_ReturnValue) == 0x0001DA, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsUsingPlayerControllerMovementInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_Event_DeltaSeconds) == 0x0001DC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_Event_NewController) == 0x0001E0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_HasAuthority_ReturnValue_1) == 0x0001E8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_Prop) == 0x0001F0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_Prop' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsDedicatedServer_ReturnValue_5) == 0x0001F8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsDedicatedServer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_ApplyDamage_ReturnValue) == 0x0001FC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameState_ReturnValue_1) == 0x000200, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_State_1) == 0x000208, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_5) == 0x000210, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x000211, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000220, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakTransform_Location) == 0x000280, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakTransform_Rotation) == 0x000298, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakTransform_Scale) == 0x0002B0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x0002C8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_SetProp_SpawnedProp) == 0x0002D0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_SetProp_SpawnedProp' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_struct_Variable_1) == 0x0002D8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetTransform_ReturnValue) == 0x0002F0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_1) == 0x000350, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_ComponentBoundEvent_Killer) == 0x000368, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_ComponentBoundEvent_Killer' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsIHighlightable) == 0x000370, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsIHighlightable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_6) == 0x000380, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue) == 0x000381, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_SetHighlight_ForcedBoolean) == 0x000382, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_SetHighlight_ForcedBoolean' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_1) == 0x000383, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_2) == 0x000384, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_3) == 0x000385, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsLocallyControlled_ReturnValue) == 0x000386, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_2) == 0x000388, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0003A0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameState_ReturnValue_2) == 0x0003B8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Add_IntInt_ReturnValue_2) == 0x0003C0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_State_2) == 0x0003C8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_7) == 0x0003D0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsRoundEnd_RoundIsEnd_1) == 0x0003D1, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsRoundEnd_RoundIsEnd_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Subtract_IntInt_ReturnValue) == 0x0003D4, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_HasTrackingStarted_HasTrackingStarted_1) == 0x0003D8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_HasTrackingStarted_HasTrackingStarted_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanOR_ReturnValue_1) == 0x0003D9, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameState_ReturnValue_3) == 0x0003E0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_State_3) == 0x0003E8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_State_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_8) == 0x0003F0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0003F1, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanAND_ReturnValue_1) == 0x0003F2, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_struct_Variable_2) == 0x0003F8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_3) == 0x000410, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_ComponentBoundEvent_NewLocation) == 0x000428, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_ComponentBoundEvent_NewLocation' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000440, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x000441, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_6) == 0x000444, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000458, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000470, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_VSize_ReturnValue) == 0x000488, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_4) == 0x000490, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000491, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_int_Variable_1) == 0x000494, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_4) == 0x000498, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x0004B0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetIgnoreActors_Actors) == 0x0004C8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetIgnoreActors_Actors' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_5) == 0x0004D8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_6) == 0x0004F0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000508, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Greater_IntInt_ReturnValue_4) == 0x000509, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Greater_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_Sound) == 0x000510, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_Sound' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Add_IntInt_ReturnValue_3) == 0x000520, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_struct_Variable_3) == 0x000528, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Min_ReturnValue) == 0x000540, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsIProp) == 0x000548, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsIProp' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_9) == 0x000558, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_OffsetPosition_ValidTransform) == 0x000559, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_OffsetPosition_ValidTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_OffsetPosition_Transform) == 0x000560, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_OffsetPosition_Transform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsIProp_1) == 0x0005C0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsIProp_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_10) == 0x0005D0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetMaxHealth_MaxHealth) == 0x0005D8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetMaxHealth_MaxHealth' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameState_ReturnValue_4) == 0x0005E0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameState_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_5) == 0x0005E8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_State_4) == 0x0005F0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_State_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_11) == 0x0005F8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsRoundEnd_RoundIsEnd_2) == 0x0005F9, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsRoundEnd_RoundIsEnd_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_HasTrackingStarted_HasTrackingStarted_2) == 0x0005FA, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_HasTrackingStarted_HasTrackingStarted_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanOR_ReturnValue_2) == 0x0005FB, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanAND_ReturnValue_2) == 0x0005FC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetActorLocation_ReturnValue_3) == 0x000600, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetActorLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetActorLocation_ReturnValue_4) == 0x000618, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetActorLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_int_Variable_2) == 0x000630, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000634, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetActorLocation_ReturnValue_5) == 0x000638, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetActorLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_EqualEqual_VectorVector_ReturnValue_1) == 0x000650, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_EqualEqual_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_7) == 0x000658, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_6) == 0x000670, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_7) == 0x000671, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_8) == 0x000672, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetVelocity_ReturnValue) == 0x000678, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_9) == 0x000690, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_MakeRotFromX_ReturnValue) == 0x000698, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue_1) == 0x0006B0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakRotator_Roll) == 0x0006B4, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakRotator_Pitch) == 0x0006B8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakRotator_Yaw) == 0x0006BC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_MakeRotator_ReturnValue) == 0x0006C0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_VSizeSquared_ReturnValue) == 0x0006D8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_VSizeSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0006E0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0006E1, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_8) == 0x0006E8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsIHighlightable_1) == 0x000700, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsIHighlightable_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_12) == 0x000710, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_10) == 0x000711, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_SetHighlight_ForcedBoolean_1) == 0x000712, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_SetHighlight_ForcedBoolean_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetActorLocation_ReturnValue_6) == 0x000718, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetActorLocation_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Array_Get_Item) == 0x000730, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Array_Length_ReturnValue) == 0x000738, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_11) == 0x00073C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Less_IntInt_ReturnValue) == 0x00073D, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetOwner_ReturnValue) == 0x000740, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000748, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_HasAuthority_ReturnValue_2) == 0x000750, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_int_Variable_3) == 0x000754, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Add_IntInt_ReturnValue_4) == 0x000758, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00075C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue_2) == 0x000760, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_Event_Channel) == 0x000761, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_Event_Channel' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, Temp_name_Variable_1) == 0x000764, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Array_Get_Item_1) == 0x000770, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Array_Length_ReturnValue_1) == 0x000778, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Less_IntInt_ReturnValue_1) == 0x00077C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsIHighlightable_2) == 0x000780, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsIHighlightable_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_13) == 0x000790, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_12) == 0x000791, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_SetHighlight_ForcedBoolean_2) == 0x000792, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_SetHighlight_ForcedBoolean_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName) == 0x000794, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue) == 0x0007A0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Array_Length_ReturnValue_2) == 0x0007A8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_RandomInteger_ReturnValue) == 0x0007AC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Array_Get_Item_2) == 0x0007B0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_13) == 0x0007C0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_7) == 0x0007C4, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_Head) == 0x0007D4, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_Head' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_Body) == 0x0007E4, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_Body' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_Hat) == 0x0007F4, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_Hat' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_Broom) == 0x000804, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_Broom' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_Color) == 0x000814, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_Color' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1) == 0x000828, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_CreateProxyObjectForPlayMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_14) == 0x000830, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue_3) == 0x000831, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue_4) == 0x000832, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue_5) == 0x000833, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue_6) == 0x000834, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanAND_ReturnValue_3) == 0x000835, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanAND_ReturnValue_4) == 0x000836, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameInstance_ReturnValue_3) == 0x000838, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Player_State) == 0x000840, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_14) == 0x000848, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x000850, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_15) == 0x000858, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_15) == 0x000859, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsWB_HUD) == 0x000860, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsWB_HUD' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_16) == 0x000868, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Player_State_1) == 0x000870, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_17) == 0x000878, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_17' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_16) == 0x000879, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_1) == 0x00087C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_HasAuthority_ReturnValue_3) == 0x000884, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_HitPlayerState) == 0x000888, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_HitPlayerState' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputKeyEvent_Key) == 0x000890, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_InputActionEvent_Key_9) == 0x0008A8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Player_State_2) == 0x0008C0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Player_State_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_18) == 0x0008C8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_18' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Player_State_3) == 0x0008D0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Player_State_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_19) == 0x0008D8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_19' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_Event_HalfHeightAdjust_1) == 0x0008DC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_Event_HalfHeightAdjust_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_Event_ScaledHalfHeightAdjust_1) == 0x0008E0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_Event_ScaledHalfHeightAdjust_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_Event_HalfHeightAdjust) == 0x0008E4, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_Event_HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_Event_ScaledHalfHeightAdjust) == 0x0008E8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_Event_ScaledHalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetGameInstance_ReturnValue_4) == 0x0008F0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_8) == 0x0008F8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000908, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_20) == 0x000910, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_20' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsB_Player_State_4) == 0x000918, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsB_Player_State_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_21) == 0x000920, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_21' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_AsWB_HUD_1) == 0x000928, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_AsWB_HUD_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_DynamicCast_bSuccess_22) == 0x000930, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_DynamicCast_bSuccess_22' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsValid_ReturnValue_17) == 0x000931, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsLocallyControlled_ReturnValue_3) == 0x000932, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsLocallyControlled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_SetHighlight_ForcedBoolean_3) == 0x000933, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_SetHighlight_ForcedBoolean_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetMaxAcceleration_ReturnValue) == 0x000934, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetMaxAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000938, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000950, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_CanCrouch_ReturnValue) == 0x000968, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_CanCrouch_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsCrouching_ReturnValue) == 0x000969, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsCrouching_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsCrouching_ReturnValue_1) == 0x00096A, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsCrouching_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue_7) == 0x00096B, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CustomEvent_NotifyName_2) == 0x00096C, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CustomEvent_NotifyName_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BooleanAND_ReturnValue_5) == 0x000974, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetController_ReturnValue_1) == 0x000978, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetControlRotation_ReturnValue) == 0x000980, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_9) == 0x000998, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakRotator_Roll_1) == 0x0009A8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakRotator_Pitch_1) == 0x0009AC, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_BreakRotator_Yaw_1) == 0x0009B0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_MakeRotator_ReturnValue_1) == 0x0009B8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_CreateDelegate_OutputDelegate_10) == 0x0009D0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_SpawnProp_SpawnedProp) == 0x0009E0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_SpawnProp_SpawnedProp' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_SpawnProp_LastRuntimePropData) == 0x0009E8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_SpawnProp_LastRuntimePropData' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetMaxHealth_ReturnMaxHealth) == 0x000A20, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetMaxHealth_ReturnMaxHealth' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, K2Node_MakeStruct_RuntimePropData) == 0x000A28, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::K2Node_MakeStruct_RuntimePropData' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsGamepadMode_ReturnValue) == 0x000A60, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsGamepadMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_IsGamepadMode_ReturnValue_1) == 0x000A61, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_IsGamepadMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Not_PreBool_ReturnValue_8) == 0x000A62, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000A68, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000A70, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_GetActorLocation_ReturnValue_7) == 0x000A88, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_GetActorLocation_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_VInterpTo_ReturnValue) == 0x000AA0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000AB8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_Divide_VectorFloat_B_ImplicitCast) == 0x000BB0, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_Divide_VectorFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ExecuteUbergraph_B_Witch, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x000BB8, "Member 'B_Witch_C_ExecuteUbergraph_B_Witch::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function B_Witch.B_Witch_C.RefreshHighlight
// 0x0050 (0x0050 - 0x0000)
struct B_Witch_C_RefreshHighlight final
{
public:
	bool                                          Highlightable;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVisibilityBasedAnimTickOption                Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EVisibilityBasedAnimTickOption                Temp_byte_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUserInterfaceHidden_UserInterfaceIsHidden; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVisibilityBasedAnimTickOption                K2Node_Select_Default;                             // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_RefreshHighlight) == 0x000008, "Wrong alignment on B_Witch_C_RefreshHighlight");
static_assert(sizeof(B_Witch_C_RefreshHighlight) == 0x000050, "Wrong size on B_Witch_C_RefreshHighlight");
static_assert(offsetof(B_Witch_C_RefreshHighlight, Highlightable) == 0x000000, "Member 'B_Witch_C_RefreshHighlight::Highlightable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, Temp_int_Array_Index_Variable) == 0x000004, "Member 'B_Witch_C_RefreshHighlight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, Temp_byte_Variable) == 0x000008, "Member 'B_Witch_C_RefreshHighlight::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'B_Witch_C_RefreshHighlight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, Temp_bool_Variable) == 0x000010, "Member 'B_Witch_C_RefreshHighlight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_Witch_C_RefreshHighlight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'B_Witch_C_RefreshHighlight::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, Temp_byte_Variable_1) == 0x000020, "Member 'B_Witch_C_RefreshHighlight::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, K2Node_DynamicCast_AsB_Game_Instance) == 0x000028, "Member 'B_Witch_C_RefreshHighlight::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_Witch_C_RefreshHighlight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, CallFunc_IsUserInterfaceHidden_UserInterfaceIsHidden) == 0x000031, "Member 'B_Witch_C_RefreshHighlight::CallFunc_IsUserInterfaceHidden_UserInterfaceIsHidden' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, CallFunc_Not_PreBool_ReturnValue) == 0x000032, "Member 'B_Witch_C_RefreshHighlight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_Witch_C_RefreshHighlight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'B_Witch_C_RefreshHighlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'B_Witch_C_RefreshHighlight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'B_Witch_C_RefreshHighlight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RefreshHighlight, K2Node_Select_Default) == 0x000049, "Member 'B_Witch_C_RefreshHighlight::K2Node_Select_Default' has a wrong offset!");

// Function B_Witch.B_Witch_C.SetHighlight
// 0x0003 (0x0003 - 0x0000)
struct B_Witch_C_SetHighlight final
{
public:
	bool                                          Highlighted;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedBoolean;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RefreshHighlight_Highlightable;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_SetHighlight) == 0x000001, "Wrong alignment on B_Witch_C_SetHighlight");
static_assert(sizeof(B_Witch_C_SetHighlight) == 0x000003, "Wrong size on B_Witch_C_SetHighlight");
static_assert(offsetof(B_Witch_C_SetHighlight, Highlighted) == 0x000000, "Member 'B_Witch_C_SetHighlight::Highlighted' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetHighlight, ForcedBoolean) == 0x000001, "Member 'B_Witch_C_SetHighlight::ForcedBoolean' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetHighlight, CallFunc_RefreshHighlight_Highlightable) == 0x000002, "Member 'B_Witch_C_SetHighlight::CallFunc_RefreshHighlight_Highlightable' has a wrong offset!");

// Function B_Witch.B_Witch_C.GetRippleEffect
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_GetRippleEffect final
{
public:
	class UNiagaraSystem*                         RippleEffectNiagara;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_GetRippleEffect) == 0x000008, "Wrong alignment on B_Witch_C_GetRippleEffect");
static_assert(sizeof(B_Witch_C_GetRippleEffect) == 0x000008, "Wrong size on B_Witch_C_GetRippleEffect");
static_assert(offsetof(B_Witch_C_GetRippleEffect, RippleEffectNiagara) == 0x000000, "Member 'B_Witch_C_GetRippleEffect::RippleEffectNiagara' has a wrong offset!");

// Function B_Witch.B_Witch_C.GetSplashEffect
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_GetSplashEffect final
{
public:
	class UNiagaraSystem*                         SplashEffectNiagara;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_GetSplashEffect) == 0x000008, "Wrong alignment on B_Witch_C_GetSplashEffect");
static_assert(sizeof(B_Witch_C_GetSplashEffect) == 0x000008, "Wrong size on B_Witch_C_GetSplashEffect");
static_assert(offsetof(B_Witch_C_GetSplashEffect, SplashEffectNiagara) == 0x000000, "Member 'B_Witch_C_GetSplashEffect::SplashEffectNiagara' has a wrong offset!");

// Function B_Witch.B_Witch_C.GetRippleScale
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_GetRippleScale final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_GetRippleScale) == 0x000008, "Wrong alignment on B_Witch_C_GetRippleScale");
static_assert(sizeof(B_Witch_C_GetRippleScale) == 0x000018, "Wrong size on B_Witch_C_GetRippleScale");
static_assert(offsetof(B_Witch_C_GetRippleScale, Scale) == 0x000000, "Member 'B_Witch_C_GetRippleScale::Scale' has a wrong offset!");

// Function B_Witch.B_Witch_C.GetSplashScale
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_GetSplashScale final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_GetSplashScale) == 0x000008, "Wrong alignment on B_Witch_C_GetSplashScale");
static_assert(sizeof(B_Witch_C_GetSplashScale) == 0x000018, "Wrong size on B_Witch_C_GetSplashScale");
static_assert(offsetof(B_Witch_C_GetSplashScale, Scale) == 0x000000, "Member 'B_Witch_C_GetSplashScale::Scale' has a wrong offset!");

// Function B_Witch.B_Witch_C.GetSplashSound
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_GetSplashSound final
{
public:
	class USoundCue*                              Sound;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_GetSplashSound) == 0x000008, "Wrong alignment on B_Witch_C_GetSplashSound");
static_assert(sizeof(B_Witch_C_GetSplashSound) == 0x000008, "Wrong size on B_Witch_C_GetSplashSound");
static_assert(offsetof(B_Witch_C_GetSplashSound, Sound) == 0x000000, "Member 'B_Witch_C_GetSplashSound::Sound' has a wrong offset!");

// Function B_Witch.B_Witch_C.CanTeleport
// 0x0002 (0x0002 - 0x0000)
struct B_Witch_C_CanTeleport final
{
public:
	bool                                          CanTeleport_0;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_CanTeleport) == 0x000001, "Wrong alignment on B_Witch_C_CanTeleport");
static_assert(sizeof(B_Witch_C_CanTeleport) == 0x000002, "Wrong size on B_Witch_C_CanTeleport");
static_assert(offsetof(B_Witch_C_CanTeleport, CanTeleport_0) == 0x000000, "Member 'B_Witch_C_CanTeleport::CanTeleport_0' has a wrong offset!");
static_assert(offsetof(B_Witch_C_CanTeleport, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'B_Witch_C_CanTeleport::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.GetCurrentController
// 0x0010 (0x0010 - 0x0000)
struct B_Witch_C_GetCurrentController final
{
public:
	class AController*                            Controller_0;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_GetCurrentController) == 0x000008, "Wrong alignment on B_Witch_C_GetCurrentController");
static_assert(sizeof(B_Witch_C_GetCurrentController) == 0x000010, "Wrong size on B_Witch_C_GetCurrentController");
static_assert(offsetof(B_Witch_C_GetCurrentController, Controller_0) == 0x000000, "Member 'B_Witch_C_GetCurrentController::Controller_0' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetCurrentController, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'B_Witch_C_GetCurrentController::CallFunc_GetController_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.GetAttachComponent
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_GetAttachComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_GetAttachComponent) == 0x000008, "Wrong alignment on B_Witch_C_GetAttachComponent");
static_assert(sizeof(B_Witch_C_GetAttachComponent) == 0x000008, "Wrong size on B_Witch_C_GetAttachComponent");
static_assert(offsetof(B_Witch_C_GetAttachComponent, Component) == 0x000000, "Member 'B_Witch_C_GetAttachComponent::Component' has a wrong offset!");

// Function B_Witch.B_Witch_C.HideToHunters
// 0x0048 (0x0048 - 0x0000)
struct B_Witch_C_HideToHunters final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetFirstLocalPlayerController_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_HideToHunters) == 0x000008, "Wrong alignment on B_Witch_C_HideToHunters");
static_assert(sizeof(B_Witch_C_HideToHunters) == 0x000048, "Wrong size on B_Witch_C_HideToHunters");
static_assert(offsetof(B_Witch_C_HideToHunters, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'B_Witch_C_HideToHunters::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, Temp_int_Variable) == 0x000008, "Member 'B_Witch_C_HideToHunters::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_Witch_C_HideToHunters::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_Witch_C_HideToHunters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, CallFunc_GetFirstLocalPlayerController_ReturnValue) == 0x000020, "Member 'B_Witch_C_HideToHunters::CallFunc_GetFirstLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'B_Witch_C_HideToHunters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, K2Node_DynamicCast_AsB_Player_State) == 0x000030, "Member 'B_Witch_C_HideToHunters::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_Witch_C_HideToHunters::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000039, "Member 'B_Witch_C_HideToHunters::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, CallFunc_GetNumMaterials_ReturnValue) == 0x00003C, "Member 'B_Witch_C_HideToHunters::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_HideToHunters, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'B_Witch_C_HideToHunters::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.InitializeRules
// 0x0100 (0x0100 - 0x0000)
struct B_Witch_C_InitializeRules final
{
public:
	struct FVector                                CallFunc_GetActorScale3D_ReturnValue;              // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHealth_ReturnHealth;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMaxHealth_ReturnMaxHealth;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue_2;          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue_3;          // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeedCrouched_ImplicitCast; // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_JumpZVelocity_ImplicitCast;     // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_ProbeSize_ImplicitCast;         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_TargetArmLength_ImplicitCast;   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InitializeRules) == 0x000008, "Wrong alignment on B_Witch_C_InitializeRules");
static_assert(sizeof(B_Witch_C_InitializeRules) == 0x000100, "Wrong size on B_Witch_C_InitializeRules");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_GetActorScale3D_ReturnValue) == 0x000000, "Member 'B_Witch_C_InitializeRules::CallFunc_GetActorScale3D_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000018, "Member 'B_Witch_C_InitializeRules::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_BreakVector_X) == 0x000020, "Member 'B_Witch_C_InitializeRules::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_BreakVector_Y) == 0x000028, "Member 'B_Witch_C_InitializeRules::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_BreakVector_Z) == 0x000030, "Member 'B_Witch_C_InitializeRules::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x000038, "Member 'B_Witch_C_InitializeRules::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'B_Witch_C_InitializeRules::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_GetHealth_ReturnHealth) == 0x000048, "Member 'B_Witch_C_InitializeRules::CallFunc_GetHealth_ReturnHealth' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'B_Witch_C_InitializeRules::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_GetMaxHealth_ReturnMaxHealth) == 0x000058, "Member 'B_Witch_C_InitializeRules::CallFunc_GetMaxHealth_ReturnMaxHealth' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000060, "Member 'B_Witch_C_InitializeRules::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, Temp_bool_Variable) == 0x000061, "Member 'B_Witch_C_InitializeRules::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_GetWorldSubsystem_ReturnValue_2) == 0x000068, "Member 'B_Witch_C_InitializeRules::CallFunc_GetWorldSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, K2Node_Select_Default) == 0x000070, "Member 'B_Witch_C_InitializeRules::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000078, "Member 'B_Witch_C_InitializeRules::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000080, "Member 'B_Witch_C_InitializeRules::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000088, "Member 'B_Witch_C_InitializeRules::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'B_Witch_C_InitializeRules::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_GetWorldSubsystem_ReturnValue_3) == 0x0000A8, "Member 'B_Witch_C_InitializeRules::CallFunc_GetWorldSubsystem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000B0, "Member 'B_Witch_C_InitializeRules::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000B8, "Member 'B_Witch_C_InitializeRules::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0000D0, "Member 'B_Witch_C_InitializeRules::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x0000D8, "Member 'B_Witch_C_InitializeRules::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x0000E0, "Member 'B_Witch_C_InitializeRules::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x0000E8, "Member 'B_Witch_C_InitializeRules::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, K2Node_VariableSet_MaxWalkSpeedCrouched_ImplicitCast) == 0x0000EC, "Member 'B_Witch_C_InitializeRules::K2Node_VariableSet_MaxWalkSpeedCrouched_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, K2Node_VariableSet_JumpZVelocity_ImplicitCast) == 0x0000F0, "Member 'B_Witch_C_InitializeRules::K2Node_VariableSet_JumpZVelocity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, K2Node_VariableSet_ProbeSize_ImplicitCast) == 0x0000F4, "Member 'B_Witch_C_InitializeRules::K2Node_VariableSet_ProbeSize_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializeRules, K2Node_VariableSet_TargetArmLength_ImplicitCast) == 0x0000F8, "Member 'B_Witch_C_InitializeRules::K2Node_VariableSet_TargetArmLength_ImplicitCast' has a wrong offset!");

// Function B_Witch.B_Witch_C.TickMovementSpeed
// 0x0048 (0x0048 - 0x0000)
struct B_Witch_C_TickMovementSpeed final
{
public:
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_MaxWalkSpeed_ImplicitCast;      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_JumpZVelocity_ImplicitCast;     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_TickMovementSpeed) == 0x000008, "Wrong alignment on B_Witch_C_TickMovementSpeed");
static_assert(sizeof(B_Witch_C_TickMovementSpeed) == 0x000048, "Wrong size on B_Witch_C_TickMovementSpeed");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000000, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000009, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_SelectFloat_ReturnValue_1) == 0x000018, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000021, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000028, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, CallFunc_FMax_ReturnValue) == 0x000038, "Member 'B_Witch_C_TickMovementSpeed::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, K2Node_VariableSet_MaxWalkSpeed_ImplicitCast) == 0x000040, "Member 'B_Witch_C_TickMovementSpeed::K2Node_VariableSet_MaxWalkSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickMovementSpeed, K2Node_VariableSet_JumpZVelocity_ImplicitCast) == 0x000044, "Member 'B_Witch_C_TickMovementSpeed::K2Node_VariableSet_JumpZVelocity_ImplicitCast' has a wrong offset!");

// Function B_Witch.B_Witch_C.ReplicateSkinData
// 0x0068 (0x0068 - 0x0000)
struct B_Witch_C_ReplicateSkinData final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPrimaryAssetId                        CallFunc_GetPrimaryAssetIdFromClass_ReturnValue;   // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_1; // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_2; // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_3; // 0x0044(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_4; // 0x0054(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_ReplicateSkinData) == 0x000008, "Wrong alignment on B_Witch_C_ReplicateSkinData");
static_assert(sizeof(B_Witch_C_ReplicateSkinData) == 0x000068, "Wrong size on B_Witch_C_ReplicateSkinData");
static_assert(offsetof(B_Witch_C_ReplicateSkinData, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'B_Witch_C_ReplicateSkinData::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ReplicateSkinData, K2Node_DynamicCast_AsB_Game_Instance) == 0x000008, "Member 'B_Witch_C_ReplicateSkinData::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ReplicateSkinData, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Witch_C_ReplicateSkinData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ReplicateSkinData, CallFunc_GetPrimaryAssetIdFromClass_ReturnValue) == 0x000014, "Member 'B_Witch_C_ReplicateSkinData::CallFunc_GetPrimaryAssetIdFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ReplicateSkinData, CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_1) == 0x000024, "Member 'B_Witch_C_ReplicateSkinData::CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ReplicateSkinData, CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_2) == 0x000034, "Member 'B_Witch_C_ReplicateSkinData::CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ReplicateSkinData, CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_3) == 0x000044, "Member 'B_Witch_C_ReplicateSkinData::CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ReplicateSkinData, CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_4) == 0x000054, "Member 'B_Witch_C_ReplicateSkinData::CallFunc_GetPrimaryAssetIdFromClass_ReturnValue_4' has a wrong offset!");

// Function B_Witch.B_Witch_C.TickManaDrainDebuff
// 0x0038 (0x0038 - 0x0000)
struct B_Witch_C_TickManaDrainDebuff final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_TickManaDrainDebuff) == 0x000008, "Wrong alignment on B_Witch_C_TickManaDrainDebuff");
static_assert(sizeof(B_Witch_C_TickManaDrainDebuff) == 0x000038, "Wrong size on B_Witch_C_TickManaDrainDebuff");
static_assert(offsetof(B_Witch_C_TickManaDrainDebuff, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_Witch_C_TickManaDrainDebuff::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickManaDrainDebuff, K2Node_DynamicCast_AsB_Game_State) == 0x000008, "Member 'B_Witch_C_TickManaDrainDebuff::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickManaDrainDebuff, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Witch_C_TickManaDrainDebuff::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickManaDrainDebuff, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x000011, "Member 'B_Witch_C_TickManaDrainDebuff::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickManaDrainDebuff, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'B_Witch_C_TickManaDrainDebuff::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickManaDrainDebuff, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_Witch_C_TickManaDrainDebuff::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickManaDrainDebuff, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'B_Witch_C_TickManaDrainDebuff::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickManaDrainDebuff, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'B_Witch_C_TickManaDrainDebuff::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.ToggleCameraView
// 0x0010 (0x0010 - 0x0000)
struct B_Witch_C_ToggleCameraView final
{
public:
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_ToggleCameraView) == 0x000008, "Wrong alignment on B_Witch_C_ToggleCameraView");
static_assert(sizeof(B_Witch_C_ToggleCameraView) == 0x000010, "Wrong size on B_Witch_C_ToggleCameraView");
static_assert(offsetof(B_Witch_C_ToggleCameraView, K2Node_DynamicCast_AsB_Player_State) == 0x000000, "Member 'B_Witch_C_ToggleCameraView::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ToggleCameraView, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'B_Witch_C_ToggleCameraView::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ToggleCameraView, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'B_Witch_C_ToggleCameraView::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.CreateThirdPersonMeshes
// 0x0020 (0x0020 - 0x0000)
struct B_Witch_C_CreateThirdPersonMeshes final
{
public:
	class AB_SkinBodypart_C*                      CallFunc_AttachBodyPart_BodyPart;                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_SkinBodypart_C*                      CallFunc_AttachBodyPart_BodyPart_1;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_AttachToSocket_ActorRef;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_SkinBodypart_C*                      CallFunc_AttachBodyPart_BodyPart_2;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_CreateThirdPersonMeshes) == 0x000008, "Wrong alignment on B_Witch_C_CreateThirdPersonMeshes");
static_assert(sizeof(B_Witch_C_CreateThirdPersonMeshes) == 0x000020, "Wrong size on B_Witch_C_CreateThirdPersonMeshes");
static_assert(offsetof(B_Witch_C_CreateThirdPersonMeshes, CallFunc_AttachBodyPart_BodyPart) == 0x000000, "Member 'B_Witch_C_CreateThirdPersonMeshes::CallFunc_AttachBodyPart_BodyPart' has a wrong offset!");
static_assert(offsetof(B_Witch_C_CreateThirdPersonMeshes, CallFunc_AttachBodyPart_BodyPart_1) == 0x000008, "Member 'B_Witch_C_CreateThirdPersonMeshes::CallFunc_AttachBodyPart_BodyPart_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_CreateThirdPersonMeshes, CallFunc_AttachToSocket_ActorRef) == 0x000010, "Member 'B_Witch_C_CreateThirdPersonMeshes::CallFunc_AttachToSocket_ActorRef' has a wrong offset!");
static_assert(offsetof(B_Witch_C_CreateThirdPersonMeshes, CallFunc_AttachBodyPart_BodyPart_2) == 0x000018, "Member 'B_Witch_C_CreateThirdPersonMeshes::CallFunc_AttachBodyPart_BodyPart_2' has a wrong offset!");

// Function B_Witch.B_Witch_C.DestroyAllMeshes
// 0x0030 (0x0030 - 0x0000)
struct B_Witch_C_DestroyAllMeshes final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_DestroyAllMeshes) == 0x000008, "Wrong alignment on B_Witch_C_DestroyAllMeshes");
static_assert(sizeof(B_Witch_C_DestroyAllMeshes) == 0x000030, "Wrong size on B_Witch_C_DestroyAllMeshes");
static_assert(offsetof(B_Witch_C_DestroyAllMeshes, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_Witch_C_DestroyAllMeshes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_DestroyAllMeshes, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'B_Witch_C_DestroyAllMeshes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_DestroyAllMeshes, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'B_Witch_C_DestroyAllMeshes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_DestroyAllMeshes, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_Witch_C_DestroyAllMeshes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_DestroyAllMeshes, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_Witch_C_DestroyAllMeshes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_DestroyAllMeshes, CallFunc_GetOwner_ReturnValue) == 0x000020, "Member 'B_Witch_C_DestroyAllMeshes::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_DestroyAllMeshes, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'B_Witch_C_DestroyAllMeshes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_DestroyAllMeshes, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'B_Witch_C_DestroyAllMeshes::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.InitThirdPersonMeshes
// 0x0050 (0x0050 - 0x0000)
struct B_Witch_C_InitThirdPersonMeshes final
{
public:
	class AActor*                                 BodyPart;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InitThirdPersonMeshes) == 0x000008, "Wrong alignment on B_Witch_C_InitThirdPersonMeshes");
static_assert(sizeof(B_Witch_C_InitThirdPersonMeshes) == 0x000050, "Wrong size on B_Witch_C_InitThirdPersonMeshes");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, BodyPart) == 0x000000, "Member 'B_Witch_C_InitThirdPersonMeshes::BodyPart' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_Witch_C_InitThirdPersonMeshes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'B_Witch_C_InitThirdPersonMeshes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'B_Witch_C_InitThirdPersonMeshes::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_Witch_C_InitThirdPersonMeshes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'B_Witch_C_InitThirdPersonMeshes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, K2Node_MakeArray_Array) == 0x000030, "Member 'B_Witch_C_InitThirdPersonMeshes::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, CallFunc_Array_AddUnique_ReturnValue) == 0x000040, "Member 'B_Witch_C_InitThirdPersonMeshes::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'B_Witch_C_InitThirdPersonMeshes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'B_Witch_C_InitThirdPersonMeshes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitThirdPersonMeshes, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'B_Witch_C_InitThirdPersonMeshes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.SetCameraView
// 0x0030 (0x0030 - 0x0000)
struct B_Witch_C_SetCameraView final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_SetCameraView) == 0x000008, "Wrong alignment on B_Witch_C_SetCameraView");
static_assert(sizeof(B_Witch_C_SetCameraView) == 0x000030, "Wrong size on B_Witch_C_SetCameraView");
static_assert(offsetof(B_Witch_C_SetCameraView, Temp_int_Variable) == 0x000000, "Member 'B_Witch_C_SetCameraView::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetCameraView, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'B_Witch_C_SetCameraView::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetCameraView, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'B_Witch_C_SetCameraView::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetCameraView, K2Node_DynamicCast_AsB_Player_State) == 0x000010, "Member 'B_Witch_C_SetCameraView::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetCameraView, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_Witch_C_SetCameraView::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetCameraView, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_Witch_C_SetCameraView::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetCameraView, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'B_Witch_C_SetCameraView::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetCameraView, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'B_Witch_C_SetCameraView::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetCameraView, CallFunc_Not_PreBool_ReturnValue) == 0x00002D, "Member 'B_Witch_C_SetCameraView::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.TransformTest
// 0x0210 (0x0210 - 0x0000)
struct B_Witch_C_TransformTest final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ValidTransform;                                    // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0080(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CurrentSpawnTransform;                             // 0x00E0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentEncroachesGeometry_ReturnValue;  // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_TransformTest) == 0x000010, "Wrong alignment on B_Witch_C_TransformTest");
static_assert(sizeof(B_Witch_C_TransformTest) == 0x000210, "Wrong size on B_Witch_C_TransformTest");
static_assert(offsetof(B_Witch_C_TransformTest, SpawnTransform) == 0x000000, "Member 'B_Witch_C_TransformTest::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, IgnoreActors) == 0x000060, "Member 'B_Witch_C_TransformTest::IgnoreActors' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, ValidTransform) == 0x000070, "Member 'B_Witch_C_TransformTest::ValidTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, Transform) == 0x000080, "Member 'B_Witch_C_TransformTest::Transform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CurrentSpawnTransform) == 0x0000E0, "Member 'B_Witch_C_TransformTest::CurrentSpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CallFunc_GetGameState_ReturnValue) == 0x000140, "Member 'B_Witch_C_TransformTest::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, K2Node_DynamicCast_AsB_Game_State) == 0x000148, "Member 'B_Witch_C_TransformTest::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, K2Node_DynamicCast_bSuccess) == 0x000150, "Member 'B_Witch_C_TransformTest::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CallFunc_BreakTransform_Location) == 0x000158, "Member 'B_Witch_C_TransformTest::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CallFunc_BreakTransform_Rotation) == 0x000170, "Member 'B_Witch_C_TransformTest::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CallFunc_BreakTransform_Scale) == 0x000188, "Member 'B_Witch_C_TransformTest::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CallFunc_MakeTransform_ReturnValue) == 0x0001A0, "Member 'B_Witch_C_TransformTest::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CallFunc_IsValid_ReturnValue) == 0x000200, "Member 'B_Witch_C_TransformTest::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CallFunc_ComponentEncroachesGeometry_ReturnValue) == 0x000201, "Member 'B_Witch_C_TransformTest::CallFunc_ComponentEncroachesGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TransformTest, CallFunc_Not_PreBool_ReturnValue) == 0x000202, "Member 'B_Witch_C_TransformTest::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.OffsetPosition
// 0x0980 (0x0980 - 0x0000)
struct B_Witch_C_OffsetPosition final
{
public:
	struct FTransform                             WantedSpawnTransform;                              // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ValidTransform;                                    // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0080(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Offset;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible)
	struct FTransform                             ReturnTransform;                                   // 0x00F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValid;                                       // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CurrentIgnoreActors;                               // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurrentWantedSpawnTransform;                       // 0x0170(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ObjectSize;                                        // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x01D8(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0230(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x0250(0x0010)(ReferenceParm)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0280(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0300(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0318(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0330(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0348(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0360(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0378(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0390(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x03A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x03C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x03D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x03F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_408[0x8];                                      // 0x0408(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0410(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TransformTest_ValidTransform;             // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0xF];                                      // 0x0471(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TransformTest_Transform;                  // 0x0480(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TransformTest_ValidTransform_1;           // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E1[0xF];                                      // 0x04E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TransformTest_Transform_1;                // 0x04F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x0550(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x0568(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x0580(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x0598(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x05A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x05C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x05D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_2;                          // 0x05F0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0600(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x06F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F9[0x3];                                      // 0x06F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x06FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0700(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorFloat_ReturnValue;              // 0x0720(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0740(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_758[0x8];                                      // 0x0758(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x0760(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TransformTest_ValidTransform_2;           // 0x07C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C1[0xF];                                      // 0x07C1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_TransformTest_Transform_2;                // 0x07D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_6;                // 0x0830(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_6;                // 0x0848(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_6;                   // 0x0860(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit_1;       // 0x0878(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue_1;  // 0x0970(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_971[0x7];                                      // 0x0971(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OffsetPosition) == 0x000010, "Wrong alignment on B_Witch_C_OffsetPosition");
static_assert(sizeof(B_Witch_C_OffsetPosition) == 0x000980, "Wrong size on B_Witch_C_OffsetPosition");
static_assert(offsetof(B_Witch_C_OffsetPosition, WantedSpawnTransform) == 0x000000, "Member 'B_Witch_C_OffsetPosition::WantedSpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, IgnoreActors) == 0x000060, "Member 'B_Witch_C_OffsetPosition::IgnoreActors' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, ValidTransform) == 0x000070, "Member 'B_Witch_C_OffsetPosition::ValidTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, Transform) == 0x000080, "Member 'B_Witch_C_OffsetPosition::Transform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, Offset) == 0x0000E0, "Member 'B_Witch_C_OffsetPosition::Offset' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, ReturnTransform) == 0x0000F0, "Member 'B_Witch_C_OffsetPosition::ReturnTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, ReturnValid) == 0x000150, "Member 'B_Witch_C_OffsetPosition::ReturnValid' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CurrentIgnoreActors) == 0x000158, "Member 'B_Witch_C_OffsetPosition::CurrentIgnoreActors' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CurrentWantedSpawnTransform) == 0x000170, "Member 'B_Witch_C_OffsetPosition::CurrentWantedSpawnTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, ObjectSize) == 0x0001D0, "Member 'B_Witch_C_OffsetPosition::ObjectSize' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, Temp_object_Variable) == 0x0001D8, "Member 'B_Witch_C_OffsetPosition::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Location) == 0x0001E8, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Rotation) == 0x000200, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Scale) == 0x000218, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, Temp_object_Variable_1) == 0x000230, "Member 'B_Witch_C_OffsetPosition::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakRotator_Roll) == 0x000240, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakRotator_Pitch) == 0x000244, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakRotator_Yaw) == 0x000248, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, K2Node_MakeArray_Array) == 0x000250, "Member 'B_Witch_C_OffsetPosition::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_MakeRotator_ReturnValue) == 0x000260, "Member 'B_Witch_C_OffsetPosition::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_MakeTransform_ReturnValue) == 0x000280, "Member 'B_Witch_C_OffsetPosition::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, Temp_bool_True_if_break_was_hit_Variable) == 0x0002E0, "Member 'B_Witch_C_OffsetPosition::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, Temp_int_Array_Index_Variable) == 0x0002E4, "Member 'B_Witch_C_OffsetPosition::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Not_PreBool_ReturnValue) == 0x0002E8, "Member 'B_Witch_C_OffsetPosition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, Temp_int_Loop_Counter_Variable) == 0x0002EC, "Member 'B_Witch_C_OffsetPosition::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Add_IntInt_ReturnValue) == 0x0002F0, "Member 'B_Witch_C_OffsetPosition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0002F8, "Member 'B_Witch_C_OffsetPosition::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_MakeVector_ReturnValue) == 0x000300, "Member 'B_Witch_C_OffsetPosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Location_1) == 0x000318, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Rotation_1) == 0x000330, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Scale_1) == 0x000348, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Location_2) == 0x000360, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Rotation_2) == 0x000378, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Scale_2) == 0x000390, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Add_VectorVector_ReturnValue) == 0x0003A8, "Member 'B_Witch_C_OffsetPosition::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Location_3) == 0x0003C0, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Rotation_3) == 0x0003D8, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Scale_3) == 0x0003F0, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_MakeTransform_ReturnValue_1) == 0x000410, "Member 'B_Witch_C_OffsetPosition::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_TransformTest_ValidTransform) == 0x000470, "Member 'B_Witch_C_OffsetPosition::CallFunc_TransformTest_ValidTransform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_TransformTest_Transform) == 0x000480, "Member 'B_Witch_C_OffsetPosition::CallFunc_TransformTest_Transform' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_TransformTest_ValidTransform_1) == 0x0004E0, "Member 'B_Witch_C_OffsetPosition::CallFunc_TransformTest_ValidTransform_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_TransformTest_Transform_1) == 0x0004F0, "Member 'B_Witch_C_OffsetPosition::CallFunc_TransformTest_Transform_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Location_4) == 0x000550, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Rotation_4) == 0x000568, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Scale_4) == 0x000580, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, K2Node_MakeArray_Array_1) == 0x000598, "Member 'B_Witch_C_OffsetPosition::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Location_5) == 0x0005A8, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Rotation_5) == 0x0005C0, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Scale_5) == 0x0005D8, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, K2Node_MakeArray_Array_2) == 0x0005F0, "Member 'B_Witch_C_OffsetPosition::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000600, "Member 'B_Witch_C_OffsetPosition::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0006F8, "Member 'B_Witch_C_OffsetPosition::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Array_Length_ReturnValue) == 0x0006FC, "Member 'B_Witch_C_OffsetPosition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Array_Get_Item) == 0x000700, "Member 'B_Witch_C_OffsetPosition::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Less_IntInt_ReturnValue) == 0x000718, "Member 'B_Witch_C_OffsetPosition::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Add_VectorFloat_ReturnValue) == 0x000720, "Member 'B_Witch_C_OffsetPosition::CallFunc_Add_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BooleanAND_ReturnValue) == 0x000738, "Member 'B_Witch_C_OffsetPosition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000740, "Member 'B_Witch_C_OffsetPosition::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_MakeTransform_ReturnValue_2) == 0x000760, "Member 'B_Witch_C_OffsetPosition::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_TransformTest_ValidTransform_2) == 0x0007C0, "Member 'B_Witch_C_OffsetPosition::CallFunc_TransformTest_ValidTransform_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_TransformTest_Transform_2) == 0x0007D0, "Member 'B_Witch_C_OffsetPosition::CallFunc_TransformTest_Transform_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Location_6) == 0x000830, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Location_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Rotation_6) == 0x000848, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Rotation_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_BreakTransform_Scale_6) == 0x000860, "Member 'B_Witch_C_OffsetPosition::CallFunc_BreakTransform_Scale_6' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_LineTraceSingleForObjects_OutHit_1) == 0x000878, "Member 'B_Witch_C_OffsetPosition::CallFunc_LineTraceSingleForObjects_OutHit_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_LineTraceSingleForObjects_ReturnValue_1) == 0x000970, "Member 'B_Witch_C_OffsetPosition::CallFunc_LineTraceSingleForObjects_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_OffsetPosition, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000978, "Member 'B_Witch_C_OffsetPosition::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function B_Witch.B_Witch_C.Slow
// 0x0010 (0x0010 - 0x0000)
struct B_Witch_C_Slow final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_Slow) == 0x000008, "Wrong alignment on B_Witch_C_Slow");
static_assert(sizeof(B_Witch_C_Slow) == 0x000010, "Wrong size on B_Witch_C_Slow");
static_assert(offsetof(B_Witch_C_Slow, Time) == 0x000000, "Member 'B_Witch_C_Slow::Time' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Slow, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_Witch_C_Slow::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.IsAnySkillActive
// 0x0004 (0x0004 - 0x0000)
struct B_Witch_C_IsAnySkillActive final
{
public:
	bool                                          AnySkillActive;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkillActive;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_IsAnySkillActive) == 0x000001, "Wrong alignment on B_Witch_C_IsAnySkillActive");
static_assert(sizeof(B_Witch_C_IsAnySkillActive) == 0x000004, "Wrong size on B_Witch_C_IsAnySkillActive");
static_assert(offsetof(B_Witch_C_IsAnySkillActive, AnySkillActive) == 0x000000, "Member 'B_Witch_C_IsAnySkillActive::AnySkillActive' has a wrong offset!");
static_assert(offsetof(B_Witch_C_IsAnySkillActive, SkillActive) == 0x000001, "Member 'B_Witch_C_IsAnySkillActive::SkillActive' has a wrong offset!");
static_assert(offsetof(B_Witch_C_IsAnySkillActive, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'B_Witch_C_IsAnySkillActive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_IsAnySkillActive, CallFunc_IsValid_ReturnValue_1) == 0x000003, "Member 'B_Witch_C_IsAnySkillActive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function B_Witch.B_Witch_C.TickSurvivalTime
// 0x0028 (0x0028 - 0x0000)
struct B_Witch_C_TickSurvivalTime final
{
public:
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_TickSurvivalTime) == 0x000008, "Wrong alignment on B_Witch_C_TickSurvivalTime");
static_assert(sizeof(B_Witch_C_TickSurvivalTime) == 0x000028, "Wrong size on B_Witch_C_TickSurvivalTime");
static_assert(offsetof(B_Witch_C_TickSurvivalTime, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'B_Witch_C_TickSurvivalTime::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickSurvivalTime, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'B_Witch_C_TickSurvivalTime::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickSurvivalTime, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'B_Witch_C_TickSurvivalTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickSurvivalTime, K2Node_DynamicCast_AsB_Player_State) == 0x000018, "Member 'B_Witch_C_TickSurvivalTime::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TickSurvivalTime, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_Witch_C_TickSurvivalTime::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_Witch.B_Witch_C.RecalculateHP
// 0x0010 (0x0010 - 0x0000)
struct B_Witch_C_RecalculateHP final
{
public:
	double                                        CallFunc_GetMaxHealth_ReturnMaxHealth;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHealth_ReturnHealth;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_RecalculateHP) == 0x000008, "Wrong alignment on B_Witch_C_RecalculateHP");
static_assert(sizeof(B_Witch_C_RecalculateHP) == 0x000010, "Wrong size on B_Witch_C_RecalculateHP");
static_assert(offsetof(B_Witch_C_RecalculateHP, CallFunc_GetMaxHealth_ReturnMaxHealth) == 0x000000, "Member 'B_Witch_C_RecalculateHP::CallFunc_GetMaxHealth_ReturnMaxHealth' has a wrong offset!");
static_assert(offsetof(B_Witch_C_RecalculateHP, CallFunc_GetHealth_ReturnHealth) == 0x000008, "Member 'B_Witch_C_RecalculateHP::CallFunc_GetHealth_ReturnHealth' has a wrong offset!");

// Function B_Witch.B_Witch_C.VerifySkinSlots
// 0x00F0 (0x00F0 - 0x0000)
struct B_Witch_C_VerifySkinSlots final
{
public:
	struct FWitchSkin                             Skin_0;                                            // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FWitchSkin                             VerifiedSkin;                                      // 0x0028(0x0028)(Parm, OutParm, NoDestructor)
	class UClass*                                 Color;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Broom;                                             // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Hat;                                               // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Body;                                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Head;                                              // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Skin_Witch_Color_Base; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Skin_Witch_Broom_Base; // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Skin_Witch_Hat_Base;   // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Skin_Witch_Body_Base;  // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Skin_Witch_Head_Base;  // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_4;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWitchSkin                             K2Node_MakeStruct_WitchSkin;                       // 0x00C8(0x0028)(NoDestructor)
};
static_assert(alignof(B_Witch_C_VerifySkinSlots) == 0x000008, "Wrong alignment on B_Witch_C_VerifySkinSlots");
static_assert(sizeof(B_Witch_C_VerifySkinSlots) == 0x0000F0, "Wrong size on B_Witch_C_VerifySkinSlots");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, Skin_0) == 0x000000, "Member 'B_Witch_C_VerifySkinSlots::Skin_0' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, VerifiedSkin) == 0x000028, "Member 'B_Witch_C_VerifySkinSlots::VerifiedSkin' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, Color) == 0x000050, "Member 'B_Witch_C_VerifySkinSlots::Color' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, Broom) == 0x000058, "Member 'B_Witch_C_VerifySkinSlots::Broom' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, Hat) == 0x000060, "Member 'B_Witch_C_VerifySkinSlots::Hat' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, Body) == 0x000068, "Member 'B_Witch_C_VerifySkinSlots::Body' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, Head) == 0x000070, "Member 'B_Witch_C_VerifySkinSlots::Head' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_AsB_Skin_Witch_Color_Base) == 0x000078, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_AsB_Skin_Witch_Color_Base' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_bSuccess) == 0x000080, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_AsB_Skin_Witch_Broom_Base) == 0x000088, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_AsB_Skin_Witch_Broom_Base' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_bSuccess_1) == 0x000090, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_AsB_Skin_Witch_Hat_Base) == 0x000098, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_AsB_Skin_Witch_Hat_Base' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_bSuccess_2) == 0x0000A0, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_AsB_Skin_Witch_Body_Base) == 0x0000A8, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_AsB_Skin_Witch_Body_Base' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_bSuccess_3) == 0x0000B0, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_AsB_Skin_Witch_Head_Base) == 0x0000B8, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_AsB_Skin_Witch_Head_Base' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_ClassDynamicCast_bSuccess_4) == 0x0000C0, "Member 'B_Witch_C_VerifySkinSlots::K2Node_ClassDynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_VerifySkinSlots, K2Node_MakeStruct_WitchSkin) == 0x0000C8, "Member 'B_Witch_C_VerifySkinSlots::K2Node_MakeStruct_WitchSkin' has a wrong offset!");

// Function B_Witch.B_Witch_C.PlayCommunicationSound
// 0x0060 (0x0060 - 0x0000)
struct B_Witch_C_PlayCommunicationSound final
{
public:
	class USoundCue*                              SoundToPlay;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioComponentToUse;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAudioComponent*>                CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UAudioComponent*                        CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_PlayCommunicationSound) == 0x000008, "Wrong alignment on B_Witch_C_PlayCommunicationSound");
static_assert(sizeof(B_Witch_C_PlayCommunicationSound) == 0x000060, "Wrong size on B_Witch_C_PlayCommunicationSound");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, SoundToPlay) == 0x000000, "Member 'B_Witch_C_PlayCommunicationSound::SoundToPlay' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, AudioComponentToUse) == 0x000008, "Member 'B_Witch_C_PlayCommunicationSound::AudioComponentToUse' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, CallFunc_GetController_ReturnValue) == 0x000010, "Member 'B_Witch_C_PlayCommunicationSound::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'B_Witch_C_PlayCommunicationSound::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'B_Witch_C_PlayCommunicationSound::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_Witch_C_PlayCommunicationSound::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'B_Witch_C_PlayCommunicationSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000030, "Member 'B_Witch_C_PlayCommunicationSound::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, CallFunc_Array_Get_Item) == 0x000040, "Member 'B_Witch_C_PlayCommunicationSound::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'B_Witch_C_PlayCommunicationSound::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000050, "Member 'B_Witch_C_PlayCommunicationSound::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_PlayCommunicationSound, CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast) == 0x000058, "Member 'B_Witch_C_PlayCommunicationSound::CallFunc_SetPitchMultiplier_NewPitchMultiplier_ImplicitCast' has a wrong offset!");

// Function B_Witch.B_Witch_C.DecreaseTauntBudget
// 0x0004 (0x0004 - 0x0000)
struct B_Witch_C_DecreaseTauntBudget final
{
public:
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_DecreaseTauntBudget) == 0x000004, "Wrong alignment on B_Witch_C_DecreaseTauntBudget");
static_assert(sizeof(B_Witch_C_DecreaseTauntBudget) == 0x000004, "Wrong size on B_Witch_C_DecreaseTauntBudget");
static_assert(offsetof(B_Witch_C_DecreaseTauntBudget, CallFunc_Subtract_IntInt_ReturnValue) == 0x000000, "Member 'B_Witch_C_DecreaseTauntBudget::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.GetIgnoreActors
// 0x0058 (0x0058 - 0x0000)
struct B_Witch_C_GetIgnoreActors final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(Parm, OutParm)
	TArray<class AActor*>                         LocalActors;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetActorListFromComponentList_OutActorList; // 0x0030(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_GetIgnoreActors) == 0x000008, "Wrong alignment on B_Witch_C_GetIgnoreActors");
static_assert(sizeof(B_Witch_C_GetIgnoreActors) == 0x000058, "Wrong size on B_Witch_C_GetIgnoreActors");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, Actors) == 0x000000, "Member 'B_Witch_C_GetIgnoreActors::Actors' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, LocalActors) == 0x000010, "Member 'B_Witch_C_GetIgnoreActors::LocalActors' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, Temp_int_Array_Index_Variable) == 0x000020, "Member 'B_Witch_C_GetIgnoreActors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'B_Witch_C_GetIgnoreActors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'B_Witch_C_GetIgnoreActors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, CallFunc_GetActorListFromComponentList_OutActorList) == 0x000030, "Member 'B_Witch_C_GetIgnoreActors::CallFunc_GetActorListFromComponentList_OutActorList' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, CallFunc_Array_Get_Item) == 0x000040, "Member 'B_Witch_C_GetIgnoreActors::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'B_Witch_C_GetIgnoreActors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, CallFunc_Array_Add_ReturnValue) == 0x00004C, "Member 'B_Witch_C_GetIgnoreActors::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'B_Witch_C_GetIgnoreActors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_GetIgnoreActors, CallFunc_Array_Add_ReturnValue_1) == 0x000054, "Member 'B_Witch_C_GetIgnoreActors::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function B_Witch.B_Witch_C.UpdateAveragePropSize
// 0x0028 (0x0028 - 0x0000)
struct B_Witch_C_UpdateAveragePropSize final
{
public:
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_HuntaHagPlayerController_C*          K2Node_DynamicCast_AsB_Hunta_Hag_Player_Controller; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_UpdateAveragePropSize) == 0x000008, "Wrong alignment on B_Witch_C_UpdateAveragePropSize");
static_assert(sizeof(B_Witch_C_UpdateAveragePropSize) == 0x000028, "Wrong size on B_Witch_C_UpdateAveragePropSize");
static_assert(offsetof(B_Witch_C_UpdateAveragePropSize, CallFunc_GetController_ReturnValue) == 0x000000, "Member 'B_Witch_C_UpdateAveragePropSize::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAveragePropSize, K2Node_DynamicCast_AsB_Hunta_Hag_Player_Controller) == 0x000008, "Member 'B_Witch_C_UpdateAveragePropSize::K2Node_DynamicCast_AsB_Hunta_Hag_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAveragePropSize, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Witch_C_UpdateAveragePropSize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAveragePropSize, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'B_Witch_C_UpdateAveragePropSize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAveragePropSize, K2Node_DynamicCast_AsB_Player_State) == 0x000018, "Member 'B_Witch_C_UpdateAveragePropSize::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAveragePropSize, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'B_Witch_C_UpdateAveragePropSize::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function B_Witch.B_Witch_C.ShowScoreStats
// 0x00E8 (0x00E8 - 0x0000)
struct B_Witch_C_ShowScoreStats final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSCalculatedScoreStat>          CallFunc_GetCalculatedWitchStats_CalculatedScoreStats; // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSCalculatedScoreStat                  CallFunc_Array_Get_Item;                           // 0x0048(0x0018)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_1;        // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_ShowScoreStats) == 0x000008, "Wrong alignment on B_Witch_C_ShowScoreStats");
static_assert(sizeof(B_Witch_C_ShowScoreStats) == 0x0000E8, "Wrong size on B_Witch_C_ShowScoreStats");
static_assert(offsetof(B_Witch_C_ShowScoreStats, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'B_Witch_C_ShowScoreStats::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_Witch_C_ShowScoreStats::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_GetController_ReturnValue) == 0x000010, "Member 'B_Witch_C_ShowScoreStats::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'B_Witch_C_ShowScoreStats::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'B_Witch_C_ShowScoreStats::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_Witch_C_ShowScoreStats::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_GetCalculatedWitchStats_CalculatedScoreStats) == 0x000030, "Member 'B_Witch_C_ShowScoreStats::CallFunc_GetCalculatedWitchStats_CalculatedScoreStats' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Array_Get_Item) == 0x000048, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000068, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Conv_DoubleToString_ReturnValue_1) == 0x000078, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Conv_DoubleToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000088, "Member 'B_Witch_C_ShowScoreStats::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Concat_StrStr_ReturnValue) == 0x000098, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000A8, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000B8, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000C8, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast) == 0x0000D8, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_Witch_C_ShowScoreStats, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1) == 0x0000E0, "Member 'B_Witch_C_ShowScoreStats::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1' has a wrong offset!");

// Function B_Witch.B_Witch_C.UpdateTravelDistance
// 0x00A8 (0x00A8 - 0x0000)
struct B_Witch_C_UpdateTravelDistance final
{
public:
	double                                        NewTravelDistance;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_UpdateTravelDistance) == 0x000008, "Wrong alignment on B_Witch_C_UpdateTravelDistance");
static_assert(sizeof(B_Witch_C_UpdateTravelDistance) == 0x0000A8, "Wrong size on B_Witch_C_UpdateTravelDistance");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, NewTravelDistance) == 0x000000, "Member 'B_Witch_C_UpdateTravelDistance::NewTravelDistance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_IsDedicatedServer_ReturnValue) == 0x000008, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, K2Node_DynamicCast_AsB_Game_Instance) == 0x000018, "Member 'B_Witch_C_UpdateTravelDistance::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_Witch_C_UpdateTravelDistance::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_IsMovingOnGround_ReturnValue) == 0x000021, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, K2Node_DynamicCast_AsB_Player_State) == 0x000028, "Member 'B_Witch_C_UpdateTravelDistance::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_Witch_C_UpdateTravelDistance::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_GetController_ReturnValue) == 0x000050, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, K2Node_DynamicCast_AsB_Player_State_1) == 0x000060, "Member 'B_Witch_C_UpdateTravelDistance::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'B_Witch_C_UpdateTravelDistance::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000070, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000088, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateTravelDistance, CallFunc_VSize_ReturnValue) == 0x0000A0, "Member 'B_Witch_C_UpdateTravelDistance::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.UpdateAverageDistanceToHunters
// 0x0058 (0x0058 - 0x0000)
struct B_Witch_C_UpdateAverageDistanceToHunters final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetMinimumDistanceToActors_MinimumDistance; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_UpdateAverageDistanceToHunters) == 0x000008, "Wrong alignment on B_Witch_C_UpdateAverageDistanceToHunters");
static_assert(sizeof(B_Witch_C_UpdateAverageDistanceToHunters) == 0x000058, "Wrong size on B_Witch_C_UpdateAverageDistanceToHunters");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, CallFunc_GetController_ReturnValue) == 0x000008, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, K2Node_DynamicCast_AsB_Game_State) == 0x000010, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, K2Node_DynamicCast_AsB_Player_State) == 0x000038, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, CallFunc_GetMinimumDistanceToActors_MinimumDistance) == 0x000048, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::CallFunc_GetMinimumDistanceToActors_MinimumDistance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateAverageDistanceToHunters, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000050, "Member 'B_Witch_C_UpdateAverageDistanceToHunters::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.SetupVisualChild
// 0x0080 (0x0080 - 0x0000)
struct B_Witch_C_SetupVisualChild final
{
public:
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0000(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_VisualIntepolator_C*                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue_1;       // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue_2;       // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_SetupVisualChild) == 0x000010, "Wrong alignment on B_Witch_C_SetupVisualChild");
static_assert(sizeof(B_Witch_C_SetupVisualChild) == 0x000080, "Wrong size on B_Witch_C_SetupVisualChild");
static_assert(offsetof(B_Witch_C_SetupVisualChild, CallFunc_GetTransform_ReturnValue) == 0x000000, "Member 'B_Witch_C_SetupVisualChild::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetupVisualChild, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000060, "Member 'B_Witch_C_SetupVisualChild::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetupVisualChild, CallFunc_FinishSpawningActor_ReturnValue) == 0x000068, "Member 'B_Witch_C_SetupVisualChild::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetupVisualChild, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000070, "Member 'B_Witch_C_SetupVisualChild::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetupVisualChild, CallFunc_K2_AttachToComponent_ReturnValue_1) == 0x000071, "Member 'B_Witch_C_SetupVisualChild::CallFunc_K2_AttachToComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_SetupVisualChild, CallFunc_K2_AttachToComponent_ReturnValue_2) == 0x000072, "Member 'B_Witch_C_SetupVisualChild::CallFunc_K2_AttachToComponent_ReturnValue_2' has a wrong offset!");

// Function B_Witch.B_Witch_C.InitDissolve
// 0x0004 (0x0004 - 0x0000)
struct B_Witch_C_InitDissolve final
{
public:
	float                                         CallFunc_SetLifeSpan_InLifespan_ImplicitCast;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InitDissolve) == 0x000004, "Wrong alignment on B_Witch_C_InitDissolve");
static_assert(sizeof(B_Witch_C_InitDissolve) == 0x000004, "Wrong size on B_Witch_C_InitDissolve");
static_assert(offsetof(B_Witch_C_InitDissolve, CallFunc_SetLifeSpan_InLifespan_ImplicitCast) == 0x000000, "Member 'B_Witch_C_InitDissolve::CallFunc_SetLifeSpan_InLifespan_ImplicitCast' has a wrong offset!");

// Function B_Witch.B_Witch_C.Dissolve
// 0x0048 (0x0048 - 0x0000)
struct B_Witch_C_Dissolve final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast; // 0x0040(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_Dissolve) == 0x000008, "Wrong alignment on B_Witch_C_Dissolve");
static_assert(sizeof(B_Witch_C_Dissolve) == 0x000048, "Wrong size on B_Witch_C_Dissolve");
static_assert(offsetof(B_Witch_C_Dissolve, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_Witch_C_Dissolve::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, CallFunc_Array_Get_Item) == 0x000008, "Member 'B_Witch_C_Dissolve::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'B_Witch_C_Dissolve::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'B_Witch_C_Dissolve::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_Witch_C_Dissolve::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'B_Witch_C_Dissolve::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'B_Witch_C_Dissolve::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'B_Witch_C_Dissolve::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'B_Witch_C_Dissolve::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Dissolve, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast) == 0x000040, "Member 'B_Witch_C_Dissolve::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast' has a wrong offset!");

// Function B_Witch.B_Witch_C.UpdateSkinColor
// 0x0028 (0x0028 - 0x0000)
struct B_Witch_C_UpdateSkinColor final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Skin_Witch_Color_Base; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetActorListFromComponentList_OutActorList; // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(B_Witch_C_UpdateSkinColor) == 0x000008, "Wrong alignment on B_Witch_C_UpdateSkinColor");
static_assert(sizeof(B_Witch_C_UpdateSkinColor) == 0x000028, "Wrong size on B_Witch_C_UpdateSkinColor");
static_assert(offsetof(B_Witch_C_UpdateSkinColor, Class_0) == 0x000000, "Member 'B_Witch_C_UpdateSkinColor::Class_0' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateSkinColor, K2Node_ClassDynamicCast_AsB_Skin_Witch_Color_Base) == 0x000008, "Member 'B_Witch_C_UpdateSkinColor::K2Node_ClassDynamicCast_AsB_Skin_Witch_Color_Base' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateSkinColor, K2Node_ClassDynamicCast_bSuccess) == 0x000010, "Member 'B_Witch_C_UpdateSkinColor::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_UpdateSkinColor, CallFunc_GetActorListFromComponentList_OutActorList) == 0x000018, "Member 'B_Witch_C_UpdateSkinColor::CallFunc_GetActorListFromComponentList_OutActorList' has a wrong offset!");

// Function B_Witch.B_Witch_C.AttachToSocket
// 0x00D0 (0x00D0 - 0x0000)
struct B_Witch_C_AttachToSocket final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   InSocketName;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AttachingSkin;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UMeshComponent*                         CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SkinItem_C*                          K2Node_DynamicCast_AsB_Skin_Item;                  // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_AttachToSocket) == 0x000010, "Wrong alignment on B_Witch_C_AttachToSocket");
static_assert(sizeof(B_Witch_C_AttachToSocket) == 0x0000D0, "Wrong size on B_Witch_C_AttachToSocket");
static_assert(offsetof(B_Witch_C_AttachToSocket, Class_0) == 0x000000, "Member 'B_Witch_C_AttachToSocket::Class_0' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, InSocketName) == 0x000008, "Member 'B_Witch_C_AttachToSocket::InSocketName' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, ActorRef) == 0x000010, "Member 'B_Witch_C_AttachToSocket::ActorRef' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, AttachingSkin) == 0x000018, "Member 'B_Witch_C_AttachToSocket::AttachingSkin' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'B_Witch_C_AttachToSocket::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000024, "Member 'B_Witch_C_AttachToSocket::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'B_Witch_C_AttachToSocket::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'B_Witch_C_AttachToSocket::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000030, "Member 'B_Witch_C_AttachToSocket::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_Array_Get_Item) == 0x000040, "Member 'B_Witch_C_AttachToSocket::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'B_Witch_C_AttachToSocket::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'B_Witch_C_AttachToSocket::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, K2Node_DynamicCast_AsB_Skin_Item) == 0x000050, "Member 'B_Witch_C_AttachToSocket::K2Node_DynamicCast_AsB_Skin_Item' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'B_Witch_C_AttachToSocket::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000059, "Member 'B_Witch_C_AttachToSocket::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_GetSocketTransform_ReturnValue) == 0x000060, "Member 'B_Witch_C_AttachToSocket::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000C0, "Member 'B_Witch_C_AttachToSocket::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachToSocket, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000C8, "Member 'B_Witch_C_AttachToSocket::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.AttachBodyPart
// 0x00B0 (0x00B0 - 0x0000)
struct B_Witch_C_AttachBodyPart final
{
public:
	class UClass*                                 BodyPartClass;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Parent;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          SelfShadowOnly;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SkinBodypart_C*                      BodyPart;                                          // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsB_Skin_Bodypart;         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_SkinBodypart_C*                      CallFunc_FinishSpawningActor_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_AttachBodyPart) == 0x000010, "Wrong alignment on B_Witch_C_AttachBodyPart");
static_assert(sizeof(B_Witch_C_AttachBodyPart) == 0x0000B0, "Wrong size on B_Witch_C_AttachBodyPart");
static_assert(offsetof(B_Witch_C_AttachBodyPart, BodyPartClass) == 0x000000, "Member 'B_Witch_C_AttachBodyPart::BodyPartClass' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, Parent) == 0x000008, "Member 'B_Witch_C_AttachBodyPart::Parent' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, SelfShadowOnly) == 0x000010, "Member 'B_Witch_C_AttachBodyPart::SelfShadowOnly' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, BodyPart) == 0x000018, "Member 'B_Witch_C_AttachBodyPart::BodyPart' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000020, "Member 'B_Witch_C_AttachBodyPart::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, K2Node_ClassDynamicCast_AsB_Skin_Bodypart) == 0x000080, "Member 'B_Witch_C_AttachBodyPart::K2Node_ClassDynamicCast_AsB_Skin_Bodypart' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, K2Node_ClassDynamicCast_bSuccess) == 0x000088, "Member 'B_Witch_C_AttachBodyPart::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000090, "Member 'B_Witch_C_AttachBodyPart::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, CallFunc_FinishSpawningActor_ReturnValue) == 0x000098, "Member 'B_Witch_C_AttachBodyPart::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, CallFunc_K2_AttachToComponent_ReturnValue) == 0x0000A0, "Member 'B_Witch_C_AttachBodyPart::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_AttachBodyPart, CallFunc_IsValid_ReturnValue) == 0x0000A1, "Member 'B_Witch_C_AttachBodyPart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.InitializeSkinContent
// 0x0001 (0x0001 - 0x0000)
struct B_Witch_C_InitializeSkinContent final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InitializeSkinContent) == 0x000001, "Wrong alignment on B_Witch_C_InitializeSkinContent");
static_assert(sizeof(B_Witch_C_InitializeSkinContent) == 0x000001, "Wrong size on B_Witch_C_InitializeSkinContent");
static_assert(offsetof(B_Witch_C_InitializeSkinContent, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'B_Witch_C_InitializeSkinContent::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.TryInitializeSkinContent
// 0x0158 (0x0158 - 0x0000)
struct B_Witch_C_TryInitializeSkinContent final
{
public:
	TSoftClassPtr<class UClass>                   CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue; // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_1; // 0x0028(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue;      // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue_1;    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsActor;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsActor_1;                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_2; // 0x0080(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue_2;    // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_3; // 0x00B0(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsActor_2;                 // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue_3;    // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsActor_3;                 // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_4; // 0x0100(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadClassAsset_Blocking_ReturnValue_4;    // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsActor_4;                 // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_4;                // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidPrimaryAssetId_ReturnValue;        // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidPrimaryAssetId_ReturnValue_1;      // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidPrimaryAssetId_ReturnValue_2;      // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidPrimaryAssetId_ReturnValue_3;      // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidPrimaryAssetId_ReturnValue_4;      // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x014E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x014F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_TryInitializeSkinContent) == 0x000008, "Wrong alignment on B_Witch_C_TryInitializeSkinContent");
static_assert(sizeof(B_Witch_C_TryInitializeSkinContent) == 0x000158, "Wrong size on B_Witch_C_TryInitializeSkinContent");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue) == 0x000000, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_1) == 0x000028, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_LoadClassAsset_Blocking_ReturnValue) == 0x000050, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_LoadClassAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_LoadClassAsset_Blocking_ReturnValue_1) == 0x000058, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_LoadClassAsset_Blocking_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_AsActor) == 0x000060, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_bSuccess) == 0x000068, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_AsActor_1) == 0x000070, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_AsActor_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_bSuccess_1) == 0x000078, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_2) == 0x000080, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_LoadClassAsset_Blocking_ReturnValue_2) == 0x0000A8, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_LoadClassAsset_Blocking_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_3) == 0x0000B0, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_AsActor_2) == 0x0000D8, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_AsActor_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_bSuccess_2) == 0x0000E0, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_LoadClassAsset_Blocking_ReturnValue_3) == 0x0000E8, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_LoadClassAsset_Blocking_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_AsActor_3) == 0x0000F0, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_AsActor_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_bSuccess_3) == 0x0000F8, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_4) == 0x000100, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_GetSoftClassReferenceFromPrimaryAssetId_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_LoadClassAsset_Blocking_ReturnValue_4) == 0x000128, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_LoadClassAsset_Blocking_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_AsActor_4) == 0x000130, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_AsActor_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_ClassDynamicCast_bSuccess_4) == 0x000138, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_ClassDynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_DynamicCast_AsB_Player_State) == 0x000140, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'B_Witch_C_TryInitializeSkinContent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_IsValidPrimaryAssetId_ReturnValue) == 0x000149, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_IsValidPrimaryAssetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_IsValidPrimaryAssetId_ReturnValue_1) == 0x00014A, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_IsValidPrimaryAssetId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_IsValidPrimaryAssetId_ReturnValue_2) == 0x00014B, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_IsValidPrimaryAssetId_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_IsValidPrimaryAssetId_ReturnValue_3) == 0x00014C, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_IsValidPrimaryAssetId_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_IsValidPrimaryAssetId_ReturnValue_4) == 0x00014D, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_IsValidPrimaryAssetId_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_BooleanAND_ReturnValue) == 0x00014E, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_Not_PreBool_ReturnValue) == 0x00014F, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_BooleanAND_ReturnValue_1) == 0x000150, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_BooleanAND_ReturnValue_2) == 0x000151, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_Witch_C_TryInitializeSkinContent, CallFunc_BooleanAND_ReturnValue_3) == 0x000152, "Member 'B_Witch_C_TryInitializeSkinContent::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function B_Witch.B_Witch_C.LoadSkills
// 0x0060 (0x0060 - 0x0000)
struct B_Witch_C_LoadSkills final
{
public:
	class AController*                            Controller_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetWitchUtilitySkill_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetWitchMovementSkill_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_AddActorComponent_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UB_BaseWitchSkill_C*                    K2Node_DynamicCast_AsB_Base_Witch_Skill;           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_AddActorComponent_ReturnValue_1;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UB_BaseWitchSkill_C*                    K2Node_DynamicCast_AsB_Base_Witch_Skill_1;         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_LoadSkills) == 0x000008, "Wrong alignment on B_Witch_C_LoadSkills");
static_assert(sizeof(B_Witch_C_LoadSkills) == 0x000060, "Wrong size on B_Witch_C_LoadSkills");
static_assert(offsetof(B_Witch_C_LoadSkills, Controller_0) == 0x000000, "Member 'B_Witch_C_LoadSkills::Controller_0' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, K2Node_DynamicCast_AsB_Player_State) == 0x000008, "Member 'B_Witch_C_LoadSkills::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Witch_C_LoadSkills::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, CallFunc_GetWitchUtilitySkill_ReturnValue) == 0x000018, "Member 'B_Witch_C_LoadSkills::CallFunc_GetWitchUtilitySkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, CallFunc_GetWitchMovementSkill_ReturnValue) == 0x000020, "Member 'B_Witch_C_LoadSkills::CallFunc_GetWitchMovementSkill_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, CallFunc_HasAuthority_ReturnValue) == 0x000028, "Member 'B_Witch_C_LoadSkills::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, CallFunc_AddActorComponent_ReturnValue) == 0x000030, "Member 'B_Witch_C_LoadSkills::CallFunc_AddActorComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, K2Node_DynamicCast_AsB_Base_Witch_Skill) == 0x000038, "Member 'B_Witch_C_LoadSkills::K2Node_DynamicCast_AsB_Base_Witch_Skill' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_Witch_C_LoadSkills::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, CallFunc_AddActorComponent_ReturnValue_1) == 0x000048, "Member 'B_Witch_C_LoadSkills::CallFunc_AddActorComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, K2Node_DynamicCast_AsB_Base_Witch_Skill_1) == 0x000050, "Member 'B_Witch_C_LoadSkills::K2Node_DynamicCast_AsB_Base_Witch_Skill_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkills, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'B_Witch_C_LoadSkills::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function B_Witch.B_Witch_C.InitializePlayername
// 0x0048 (0x0048 - 0x0000)
struct B_Witch_C_InitializePlayername final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUserInterfaceHidden_UserInterfaceIsHidden; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue_1;        // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InitializePlayername) == 0x000008, "Wrong alignment on B_Witch_C_InitializePlayername");
static_assert(sizeof(B_Witch_C_InitializePlayername) == 0x000048, "Wrong size on B_Witch_C_InitializePlayername");
static_assert(offsetof(B_Witch_C_InitializePlayername, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'B_Witch_C_InitializePlayername::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_Witch_C_InitializePlayername::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_Witch_C_InitializePlayername::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_Witch_C_InitializePlayername::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, CallFunc_GetGameInstance_ReturnValue_1) == 0x000020, "Member 'B_Witch_C_InitializePlayername::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000028, "Member 'B_Witch_C_InitializePlayername::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_Witch_C_InitializePlayername::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, CallFunc_IsUserInterfaceHidden_UserInterfaceIsHidden) == 0x000031, "Member 'B_Witch_C_InitializePlayername::CallFunc_IsUserInterfaceHidden_UserInterfaceIsHidden' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000038, "Member 'B_Witch_C_InitializePlayername::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_InitializePlayername, CallFunc_GetUserWidgetObject_ReturnValue_1) == 0x000040, "Member 'B_Witch_C_InitializePlayername::CallFunc_GetUserWidgetObject_ReturnValue_1' has a wrong offset!");

// Function B_Witch.B_Witch_C.Fire
// 0x0030 (0x0030 - 0x0000)
struct B_Witch_C_Fire final
{
public:
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller_1;        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingPlayerControllerMovementInput_ReturnValue; // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_Fire) == 0x000008, "Wrong alignment on B_Witch_C_Fire");
static_assert(sizeof(B_Witch_C_Fire) == 0x000030, "Wrong size on B_Witch_C_Fire");
static_assert(offsetof(B_Witch_C_Fire, CallFunc_GetController_ReturnValue) == 0x000000, "Member 'B_Witch_C_Fire::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Fire, K2Node_DynamicCast_AsB_Player_Controller) == 0x000008, "Member 'B_Witch_C_Fire::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Fire, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_Witch_C_Fire::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Fire, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'B_Witch_C_Fire::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Fire, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'B_Witch_C_Fire::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Fire, CallFunc_GetController_ReturnValue_1) == 0x000018, "Member 'B_Witch_C_Fire::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Fire, K2Node_DynamicCast_AsB_Player_Controller_1) == 0x000020, "Member 'B_Witch_C_Fire::K2Node_DynamicCast_AsB_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Fire, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_Witch_C_Fire::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_Witch_C_Fire, CallFunc_IsUsingPlayerControllerMovementInput_ReturnValue) == 0x000029, "Member 'B_Witch_C_Fire::CallFunc_IsUsingPlayerControllerMovementInput_ReturnValue' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_Fire_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_Fire_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_Fire_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_Fire_K2Node_InputActionEvent_9");
static_assert(sizeof(B_Witch_C_InpActEvt_Fire_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_Fire_K2Node_InputActionEvent_9");
static_assert(offsetof(B_Witch_C_InpActEvt_Fire_K2Node_InputActionEvent_9, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_Fire_K2Node_InputActionEvent_9::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_Four_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_Four_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_Four_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_Four_K2Node_InputKeyEvent_0");
static_assert(sizeof(B_Witch_C_InpActEvt_Four_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_Four_K2Node_InputKeyEvent_0");
static_assert(offsetof(B_Witch_C_InpActEvt_Four_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_Four_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_Crouch_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_8");
static_assert(sizeof(B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_8");
static_assert(offsetof(B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_8, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_8::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_Crouch_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_7");
static_assert(sizeof(B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_7");
static_assert(offsetof(B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_7, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_Crouch_K2Node_InputActionEvent_7::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_QuestionSound_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_QuestionSound_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_QuestionSound_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_QuestionSound_K2Node_InputActionEvent_6");
static_assert(sizeof(B_Witch_C_InpActEvt_QuestionSound_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_QuestionSound_K2Node_InputActionEvent_6");
static_assert(offsetof(B_Witch_C_InpActEvt_QuestionSound_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_QuestionSound_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_SpeakSound_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_SpeakSound_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_SpeakSound_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_SpeakSound_K2Node_InputActionEvent_5");
static_assert(sizeof(B_Witch_C_InpActEvt_SpeakSound_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_SpeakSound_K2Node_InputActionEvent_5");
static_assert(offsetof(B_Witch_C_InpActEvt_SpeakSound_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_SpeakSound_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_ActivateSkill_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_4");
static_assert(sizeof(B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_4");
static_assert(offsetof(B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_ActivateSkill_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_3");
static_assert(sizeof(B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_3");
static_assert(offsetof(B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_ActivateSkill_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_2");
static_assert(sizeof(B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_2");
static_assert(offsetof(B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1");
static_assert(sizeof(B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1");
static_assert(offsetof(B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_ActivateUtilitySkill_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.InpActEvt_SwitchCamera_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_InpActEvt_SwitchCamera_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_InpActEvt_SwitchCamera_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on B_Witch_C_InpActEvt_SwitchCamera_K2Node_InputActionEvent_0");
static_assert(sizeof(B_Witch_C_InpActEvt_SwitchCamera_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on B_Witch_C_InpActEvt_SwitchCamera_K2Node_InputActionEvent_0");
static_assert(offsetof(B_Witch_C_InpActEvt_SwitchCamera_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'B_Witch_C_InpActEvt_SwitchCamera_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnNotifyEnd_68824520418818E46706A4AB71AD37EF
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnNotifyEnd_68824520418818E46706A4AB71AD37EF final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnNotifyEnd_68824520418818E46706A4AB71AD37EF) == 0x000004, "Wrong alignment on B_Witch_C_OnNotifyEnd_68824520418818E46706A4AB71AD37EF");
static_assert(sizeof(B_Witch_C_OnNotifyEnd_68824520418818E46706A4AB71AD37EF) == 0x000008, "Wrong size on B_Witch_C_OnNotifyEnd_68824520418818E46706A4AB71AD37EF");
static_assert(offsetof(B_Witch_C_OnNotifyEnd_68824520418818E46706A4AB71AD37EF, NotifyName) == 0x000000, "Member 'B_Witch_C_OnNotifyEnd_68824520418818E46706A4AB71AD37EF::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnNotifyBegin_68824520418818E46706A4AB71AD37EF
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnNotifyBegin_68824520418818E46706A4AB71AD37EF final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnNotifyBegin_68824520418818E46706A4AB71AD37EF) == 0x000004, "Wrong alignment on B_Witch_C_OnNotifyBegin_68824520418818E46706A4AB71AD37EF");
static_assert(sizeof(B_Witch_C_OnNotifyBegin_68824520418818E46706A4AB71AD37EF) == 0x000008, "Wrong size on B_Witch_C_OnNotifyBegin_68824520418818E46706A4AB71AD37EF");
static_assert(offsetof(B_Witch_C_OnNotifyBegin_68824520418818E46706A4AB71AD37EF, NotifyName) == 0x000000, "Member 'B_Witch_C_OnNotifyBegin_68824520418818E46706A4AB71AD37EF::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnInterrupted_68824520418818E46706A4AB71AD37EF
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnInterrupted_68824520418818E46706A4AB71AD37EF final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnInterrupted_68824520418818E46706A4AB71AD37EF) == 0x000004, "Wrong alignment on B_Witch_C_OnInterrupted_68824520418818E46706A4AB71AD37EF");
static_assert(sizeof(B_Witch_C_OnInterrupted_68824520418818E46706A4AB71AD37EF) == 0x000008, "Wrong size on B_Witch_C_OnInterrupted_68824520418818E46706A4AB71AD37EF");
static_assert(offsetof(B_Witch_C_OnInterrupted_68824520418818E46706A4AB71AD37EF, NotifyName) == 0x000000, "Member 'B_Witch_C_OnInterrupted_68824520418818E46706A4AB71AD37EF::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnBlendOut_68824520418818E46706A4AB71AD37EF
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnBlendOut_68824520418818E46706A4AB71AD37EF final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnBlendOut_68824520418818E46706A4AB71AD37EF) == 0x000004, "Wrong alignment on B_Witch_C_OnBlendOut_68824520418818E46706A4AB71AD37EF");
static_assert(sizeof(B_Witch_C_OnBlendOut_68824520418818E46706A4AB71AD37EF) == 0x000008, "Wrong size on B_Witch_C_OnBlendOut_68824520418818E46706A4AB71AD37EF");
static_assert(offsetof(B_Witch_C_OnBlendOut_68824520418818E46706A4AB71AD37EF, NotifyName) == 0x000000, "Member 'B_Witch_C_OnBlendOut_68824520418818E46706A4AB71AD37EF::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnCompleted_68824520418818E46706A4AB71AD37EF
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnCompleted_68824520418818E46706A4AB71AD37EF final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnCompleted_68824520418818E46706A4AB71AD37EF) == 0x000004, "Wrong alignment on B_Witch_C_OnCompleted_68824520418818E46706A4AB71AD37EF");
static_assert(sizeof(B_Witch_C_OnCompleted_68824520418818E46706A4AB71AD37EF) == 0x000008, "Wrong size on B_Witch_C_OnCompleted_68824520418818E46706A4AB71AD37EF");
static_assert(offsetof(B_Witch_C_OnCompleted_68824520418818E46706A4AB71AD37EF, NotifyName) == 0x000000, "Member 'B_Witch_C_OnCompleted_68824520418818E46706A4AB71AD37EF::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnNotifyEnd_C74C98F1400056E93CA7238388504B36
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnNotifyEnd_C74C98F1400056E93CA7238388504B36 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnNotifyEnd_C74C98F1400056E93CA7238388504B36) == 0x000004, "Wrong alignment on B_Witch_C_OnNotifyEnd_C74C98F1400056E93CA7238388504B36");
static_assert(sizeof(B_Witch_C_OnNotifyEnd_C74C98F1400056E93CA7238388504B36) == 0x000008, "Wrong size on B_Witch_C_OnNotifyEnd_C74C98F1400056E93CA7238388504B36");
static_assert(offsetof(B_Witch_C_OnNotifyEnd_C74C98F1400056E93CA7238388504B36, NotifyName) == 0x000000, "Member 'B_Witch_C_OnNotifyEnd_C74C98F1400056E93CA7238388504B36::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnNotifyBegin_C74C98F1400056E93CA7238388504B36
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnNotifyBegin_C74C98F1400056E93CA7238388504B36 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnNotifyBegin_C74C98F1400056E93CA7238388504B36) == 0x000004, "Wrong alignment on B_Witch_C_OnNotifyBegin_C74C98F1400056E93CA7238388504B36");
static_assert(sizeof(B_Witch_C_OnNotifyBegin_C74C98F1400056E93CA7238388504B36) == 0x000008, "Wrong size on B_Witch_C_OnNotifyBegin_C74C98F1400056E93CA7238388504B36");
static_assert(offsetof(B_Witch_C_OnNotifyBegin_C74C98F1400056E93CA7238388504B36, NotifyName) == 0x000000, "Member 'B_Witch_C_OnNotifyBegin_C74C98F1400056E93CA7238388504B36::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnInterrupted_C74C98F1400056E93CA7238388504B36
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnInterrupted_C74C98F1400056E93CA7238388504B36 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnInterrupted_C74C98F1400056E93CA7238388504B36) == 0x000004, "Wrong alignment on B_Witch_C_OnInterrupted_C74C98F1400056E93CA7238388504B36");
static_assert(sizeof(B_Witch_C_OnInterrupted_C74C98F1400056E93CA7238388504B36) == 0x000008, "Wrong size on B_Witch_C_OnInterrupted_C74C98F1400056E93CA7238388504B36");
static_assert(offsetof(B_Witch_C_OnInterrupted_C74C98F1400056E93CA7238388504B36, NotifyName) == 0x000000, "Member 'B_Witch_C_OnInterrupted_C74C98F1400056E93CA7238388504B36::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnBlendOut_C74C98F1400056E93CA7238388504B36
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnBlendOut_C74C98F1400056E93CA7238388504B36 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnBlendOut_C74C98F1400056E93CA7238388504B36) == 0x000004, "Wrong alignment on B_Witch_C_OnBlendOut_C74C98F1400056E93CA7238388504B36");
static_assert(sizeof(B_Witch_C_OnBlendOut_C74C98F1400056E93CA7238388504B36) == 0x000008, "Wrong size on B_Witch_C_OnBlendOut_C74C98F1400056E93CA7238388504B36");
static_assert(offsetof(B_Witch_C_OnBlendOut_C74C98F1400056E93CA7238388504B36, NotifyName) == 0x000000, "Member 'B_Witch_C_OnBlendOut_C74C98F1400056E93CA7238388504B36::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.OnCompleted_C74C98F1400056E93CA7238388504B36
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_OnCompleted_C74C98F1400056E93CA7238388504B36 final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_OnCompleted_C74C98F1400056E93CA7238388504B36) == 0x000004, "Wrong alignment on B_Witch_C_OnCompleted_C74C98F1400056E93CA7238388504B36");
static_assert(sizeof(B_Witch_C_OnCompleted_C74C98F1400056E93CA7238388504B36) == 0x000008, "Wrong size on B_Witch_C_OnCompleted_C74C98F1400056E93CA7238388504B36");
static_assert(offsetof(B_Witch_C_OnCompleted_C74C98F1400056E93CA7238388504B36, NotifyName) == 0x000000, "Member 'B_Witch_C_OnCompleted_C74C98F1400056E93CA7238388504B36::NotifyName' has a wrong offset!");

// Function B_Witch.B_Witch_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_Witch_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_ReceiveTick) == 0x000004, "Wrong alignment on B_Witch_C_ReceiveTick");
static_assert(sizeof(B_Witch_C_ReceiveTick) == 0x000004, "Wrong size on B_Witch_C_ReceiveTick");
static_assert(offsetof(B_Witch_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_Witch_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_Witch.B_Witch_C.ServerSwitchProp
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_ServerSwitchProp final
{
public:
	class AActor*                                 Prop;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_ServerSwitchProp) == 0x000008, "Wrong alignment on B_Witch_C_ServerSwitchProp");
static_assert(sizeof(B_Witch_C_ServerSwitchProp) == 0x000008, "Wrong size on B_Witch_C_ServerSwitchProp");
static_assert(offsetof(B_Witch_C_ServerSwitchProp, Prop) == 0x000000, "Member 'B_Witch_C_ServerSwitchProp::Prop' has a wrong offset!");

// Function B_Witch.B_Witch_C.BndEvt__ActorEvents_K2Node_ComponentBoundEvent_1_OnKilled__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_BndEvt__ActorEvents_K2Node_ComponentBoundEvent_1_OnKilled__DelegateSignature final
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_BndEvt__ActorEvents_K2Node_ComponentBoundEvent_1_OnKilled__DelegateSignature) == 0x000008, "Wrong alignment on B_Witch_C_BndEvt__ActorEvents_K2Node_ComponentBoundEvent_1_OnKilled__DelegateSignature");
static_assert(sizeof(B_Witch_C_BndEvt__ActorEvents_K2Node_ComponentBoundEvent_1_OnKilled__DelegateSignature) == 0x000008, "Wrong size on B_Witch_C_BndEvt__ActorEvents_K2Node_ComponentBoundEvent_1_OnKilled__DelegateSignature");
static_assert(offsetof(B_Witch_C_BndEvt__ActorEvents_K2Node_ComponentBoundEvent_1_OnKilled__DelegateSignature, Killer) == 0x000000, "Member 'B_Witch_C_BndEvt__ActorEvents_K2Node_ComponentBoundEvent_1_OnKilled__DelegateSignature::Killer' has a wrong offset!");

// Function B_Witch.B_Witch_C.BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct B_Witch_C_BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_Witch_C_BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature");
static_assert(sizeof(B_Witch_C_BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature) == 0x000018, "Wrong size on B_Witch_C_BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature");
static_assert(offsetof(B_Witch_C_BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature, NewLocation) == 0x000000, "Member 'B_Witch_C_BndEvt__CharacterMovement_K2Node_ComponentBoundEvent_0_CharacterMovementAdjustPositionSignature__DelegateSignature::NewLocation' has a wrong offset!");

// Function B_Witch.B_Witch_C.PlaySpeakSoundMulticast
// 0x0010 (0x0010 - 0x0000)
struct B_Witch_C_PlaySpeakSoundMulticast final
{
public:
	struct FSTauntAnimation                       Sound;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_PlaySpeakSoundMulticast) == 0x000008, "Wrong alignment on B_Witch_C_PlaySpeakSoundMulticast");
static_assert(sizeof(B_Witch_C_PlaySpeakSoundMulticast) == 0x000010, "Wrong size on B_Witch_C_PlaySpeakSoundMulticast");
static_assert(offsetof(B_Witch_C_PlaySpeakSoundMulticast, Sound) == 0x000000, "Member 'B_Witch_C_PlaySpeakSoundMulticast::Sound' has a wrong offset!");

// Function B_Witch.B_Witch_C.SetHighlightChannel
// 0x0001 (0x0001 - 0x0000)
struct B_Witch_C_SetHighlightChannel final
{
public:
	EHighlightChannel                             Channel;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_SetHighlightChannel) == 0x000001, "Wrong alignment on B_Witch_C_SetHighlightChannel");
static_assert(sizeof(B_Witch_C_SetHighlightChannel) == 0x000001, "Wrong size on B_Witch_C_SetHighlightChannel");
static_assert(offsetof(B_Witch_C_SetHighlightChannel, Channel) == 0x000000, "Member 'B_Witch_C_SetHighlightChannel::Channel' has a wrong offset!");

// Function B_Witch.B_Witch_C.LoadSkinsServer
// 0x0050 (0x0050 - 0x0000)
struct B_Witch_C_LoadSkinsServer final
{
public:
	struct FPrimaryAssetId                        Head;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        Body;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        Hat;                                               // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        Broom;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FPrimaryAssetId                        Color;                                             // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_LoadSkinsServer) == 0x000004, "Wrong alignment on B_Witch_C_LoadSkinsServer");
static_assert(sizeof(B_Witch_C_LoadSkinsServer) == 0x000050, "Wrong size on B_Witch_C_LoadSkinsServer");
static_assert(offsetof(B_Witch_C_LoadSkinsServer, Head) == 0x000000, "Member 'B_Witch_C_LoadSkinsServer::Head' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkinsServer, Body) == 0x000010, "Member 'B_Witch_C_LoadSkinsServer::Body' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkinsServer, Hat) == 0x000020, "Member 'B_Witch_C_LoadSkinsServer::Hat' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkinsServer, Broom) == 0x000030, "Member 'B_Witch_C_LoadSkinsServer::Broom' has a wrong offset!");
static_assert(offsetof(B_Witch_C_LoadSkinsServer, Color) == 0x000040, "Member 'B_Witch_C_LoadSkinsServer::Color' has a wrong offset!");

// Function B_Witch.B_Witch_C.WitchIsHit
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_WitchIsHit final
{
public:
	class AB_PlayerState_C*                       HitPlayerState;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_WitchIsHit) == 0x000008, "Wrong alignment on B_Witch_C_WitchIsHit");
static_assert(sizeof(B_Witch_C_WitchIsHit) == 0x000008, "Wrong size on B_Witch_C_WitchIsHit");
static_assert(offsetof(B_Witch_C_WitchIsHit, HitPlayerState) == 0x000000, "Member 'B_Witch_C_WitchIsHit::HitPlayerState' has a wrong offset!");

// Function B_Witch.B_Witch_C.K2_OnStartCrouch
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_K2_OnStartCrouch final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_K2_OnStartCrouch) == 0x000004, "Wrong alignment on B_Witch_C_K2_OnStartCrouch");
static_assert(sizeof(B_Witch_C_K2_OnStartCrouch) == 0x000008, "Wrong size on B_Witch_C_K2_OnStartCrouch");
static_assert(offsetof(B_Witch_C_K2_OnStartCrouch, HalfHeightAdjust) == 0x000000, "Member 'B_Witch_C_K2_OnStartCrouch::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(B_Witch_C_K2_OnStartCrouch, ScaledHalfHeightAdjust) == 0x000004, "Member 'B_Witch_C_K2_OnStartCrouch::ScaledHalfHeightAdjust' has a wrong offset!");

// Function B_Witch.B_Witch_C.K2_OnEndCrouch
// 0x0008 (0x0008 - 0x0000)
struct B_Witch_C_K2_OnEndCrouch final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_K2_OnEndCrouch) == 0x000004, "Wrong alignment on B_Witch_C_K2_OnEndCrouch");
static_assert(sizeof(B_Witch_C_K2_OnEndCrouch) == 0x000008, "Wrong size on B_Witch_C_K2_OnEndCrouch");
static_assert(offsetof(B_Witch_C_K2_OnEndCrouch, HalfHeightAdjust) == 0x000000, "Member 'B_Witch_C_K2_OnEndCrouch::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(B_Witch_C_K2_OnEndCrouch, ScaledHalfHeightAdjust) == 0x000004, "Member 'B_Witch_C_K2_OnEndCrouch::ScaledHalfHeightAdjust' has a wrong offset!");

// Function B_Witch.B_Witch_C.CanJumpInternal
// 0x0002 (0x0002 - 0x0000)
struct B_Witch_C_CanJumpInternal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanJumpInternal_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_Witch_C_CanJumpInternal) == 0x000001, "Wrong alignment on B_Witch_C_CanJumpInternal");
static_assert(sizeof(B_Witch_C_CanJumpInternal) == 0x000002, "Wrong size on B_Witch_C_CanJumpInternal");
static_assert(offsetof(B_Witch_C_CanJumpInternal, ReturnValue) == 0x000000, "Member 'B_Witch_C_CanJumpInternal::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_Witch_C_CanJumpInternal, CallFunc_CanJumpInternal_ReturnValue) == 0x000001, "Member 'B_Witch_C_CanJumpInternal::CallFunc_CanJumpInternal_ReturnValue' has a wrong offset!");

}

