#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MapManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SMapData_structs.hpp"
#include "S_PropLayoutData_structs.hpp"
#include "PropWitchHuntModule_structs.hpp"
#include "PropWitchHuntModule_classes.hpp"
#include "E_MapSize_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_MapManager.B_MapManager_C
// 0x12A0 (0x12D0 - 0x0030)
class UB_MapManager_C final : public UBaseManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0030(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FSMapData>                      SmallMapList;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSMapData                              CustomAutumn;                                      // 0x0048(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CustomIsland;                                      // 0x0098(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CustomSpring;                                      // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              RandomMapCycle;                                    // 0x0138(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              Snowbreeze;                                        // 0x0188(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              ChummyPotato;                                      // 0x01D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              GrunewaldLibrary;                                  // 0x0228(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              GrunewaldHalloween;                                // 0x0278(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              GrunewaldAtNight;                                  // 0x02C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              Morgenstund;                                       // 0x0318(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              Fiskersted;                                        // 0x0368(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              LoakikiParadise;                                   // 0x03B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              KulaKulaIslands;                                   // 0x0408(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              SleepingRoseCemetery;                              // 0x0458(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              TwinMaskTheatre;                                   // 0x04A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              ShipwreckHollow;                                   // 0x04F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              PortPlunder;                                       // 0x0548(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              WitchForest;                                       // 0x0598(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              TowerIsland;                                       // 0x05E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FSMapData>                      QuickmatchMapList;                                 // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, struct FSMapData>         MapDataByLevelName;                                // 0x0648(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSMapData                              CustomEmpty;                                       // 0x0698(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CustomIce;                                         // 0x06E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CustomGraveyard;                                   // 0x0738(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              WitchHouse;                                        // 0x0788(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              NorthernWhispersMap;                               // 0x07D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              HighSpruceTownMap;                                 // 0x0828(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              NorthernWhisper;                                   // 0x0878(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              MountainRailwayMap;                                // 0x08C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              NiemeyerLegacyMap;                                 // 0x0918(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              PizzafactoryMap;                                   // 0x0968(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              PowersourceMap;                                    // 0x09B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              StrongholdMap;                                     // 0x0A08(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              WardwellWintryMap;                                 // 0x0A58(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              ImpostorMap;                                       // 0x0AA8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CustomWitchForest;                                 // 0x0AF8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              ShardOfWiqqarra;                                   // 0x0B48(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              DesertTown;                                        // 0x0B98(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              Stoneage;                                          // 0x0BE8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CustomDesert;                                      // 0x0C38(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CustomDesertTown;                                  // 0x0C88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CitadeloftheSunKeeper;                             // 0x0CD8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              KasbahleRibat;                                     // 0x0D28(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              LostTemple;                                        // 0x0D78(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              PalaceofHeka;                                      // 0x0DC8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              VermilionValley;                                   // 0x0E18(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              OasisTemple;                                       // 0x0E68(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CustomStoneAge;                                    // 0x0EB8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              GraveCanyon;                                       // 0x0F08(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FSMapData>                      BigMapList;                                        // 0x0F58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSMapData>                      SmallBuiltInCustomMapList;                         // 0x0F68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSMapData>                      BigBuiltInCustomMapList;                           // 0x0F78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSMapData                              AncientTemple;                                     // 0x0F88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              CovensCove;                                        // 0x0FD8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              BonePit;                                           // 0x1028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              SingingSanctuary;                                  // 0x1078(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              SunsetSwamp;                                       // 0x10C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              MartinsChamber;                                    // 0x1118(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSMapData                              Castle;                                            // 0x1168(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UB_MapCycleObject_C*                    CustomMapCycle;                                    // 0x11B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, struct FSMapData>         MapDataByFileName;                                 // 0x11C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, struct FS_PropLayoutData> LayoutDataByFileName;                              // 0x1210(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, class UTexture2D*>        CustomMapTextureImages;                            // 0x1260(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AllowedAmountOfCycleMaps;                          // 0x12B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActiveCustomMapCycleIndex;                         // 0x12B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OfficialMapRatio;                                  // 0x12B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 AutoSaveSuffix;                                    // 0x12C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void AddMapToMapLists(const struct FSMapData& MapToAdd);
	void DetermineNextMapFromCustomMapCycle(bool* MapDataFound, bool* LayoutDataFound, struct FSMapData* MapData, struct FS_PropLayoutData* LayoutData);
	void ExecuteUbergraph_B_MapManager(int32 EntryPoint);
	void FilterMapsBySize(TArray<struct FSMapData>& MapsToFilter, TArray<struct FSMapData>* SmallMaps, TArray<struct FSMapData>* BigMaps);
	void GetAllCustomMapsOrByLevelNameFromSave(const class FString& OptionalLevelName, TArray<struct FS_PropLayoutData>* Layouts);
	void GetAllQuickmatchMaps(bool ExcludeRandomMapCycle, TArray<struct FSMapData>* QuickmatchMaps);
	void GetFilteredCustomLayoutsForMap(TArray<struct FS_PropLayoutData>& Layouts, TArray<class FString>& LayoutsToFilter, TArray<struct FS_PropLayoutData>* FilteredLayouts);
	void GetLevelNameFromFileName(class FName Filename, class FString* MapName);
	void GetMapVoteMapsBySize(E_MapSize TargetSize, TArray<struct FSMapData>* TargetMaps);
	void GetSpecificMapFromLevelName(const class FString& LevelName, struct FSMapData* MapData);
	void GetTextureForCustomMap(const struct FS_PropLayoutData& LayoutData, class UTexture2D** Texture);
	void Initialize(class UGameInstance* InGameInstance);
	void SetLayoutDataByFileName();
	void SetMapListsBySize(TArray<struct FSMapData>& OfficialMaps, TArray<struct FSMapData>& BuiltInMaps);
	void SetOrResetCustomMapCycle(class UB_MapCycleObject_C* NewCustomMapCycle__optional_);
	void SetupAndSortMapLists(TArray<struct FSMapData>& UnsortedOfficialMaps, TArray<struct FSMapData>& MapsToExcludeFromLiveBuild, TArray<struct FSMapData>& EmptyMapsForCreativeMode, TArray<struct FSMapData>& BuiltInCustomMapList);
	void UpdateNextMapFromCustomMapCycle(class UB_MatchOptions_C* NextMatchOptions);

	void GetBuiltInMaps(TArray<struct FSMapData>* BuiltInCustomMaps) const;
	void GetCustomMaps(bool WithAutosaves, TArray<struct FS_PropLayoutData>* CustomMaps) const;
	void GetMapsByFilterCriterion(bool UsedInObjective, bool UsedInImpostor, bool UsedAsCreativeTemplate, TArray<struct FSMapData>* FoundMaps) const;
	void GetOfficialMaps(bool ExcludeRandomMapCycle, TArray<struct FSMapData>* OfficialMaps) const;
	void GetSpecificMapOrCustomMapFromFileName(const class FString& Filename, bool* MapDataFound, bool* LayoutDataFound, struct FSMapData* MapData, struct FS_PropLayoutData* LayoutData) const;
	void GetSuitableMapCycleName(class FText* Param_Name) const;
	void ValidCustomMapCycleIsSelected(bool* ValidSelection) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_MapManager_C">();
	}
	static class UB_MapManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_MapManager_C>();
	}
};
static_assert(alignof(UB_MapManager_C) == 0x000008, "Wrong alignment on UB_MapManager_C");
static_assert(sizeof(UB_MapManager_C) == 0x0012D0, "Wrong size on UB_MapManager_C");
static_assert(offsetof(UB_MapManager_C, UberGraphFrame) == 0x000030, "Member 'UB_MapManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, SmallMapList) == 0x000038, "Member 'UB_MapManager_C::SmallMapList' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomAutumn) == 0x000048, "Member 'UB_MapManager_C::CustomAutumn' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomIsland) == 0x000098, "Member 'UB_MapManager_C::CustomIsland' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomSpring) == 0x0000E8, "Member 'UB_MapManager_C::CustomSpring' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, RandomMapCycle) == 0x000138, "Member 'UB_MapManager_C::RandomMapCycle' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, Snowbreeze) == 0x000188, "Member 'UB_MapManager_C::Snowbreeze' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, ChummyPotato) == 0x0001D8, "Member 'UB_MapManager_C::ChummyPotato' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, GrunewaldLibrary) == 0x000228, "Member 'UB_MapManager_C::GrunewaldLibrary' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, GrunewaldHalloween) == 0x000278, "Member 'UB_MapManager_C::GrunewaldHalloween' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, GrunewaldAtNight) == 0x0002C8, "Member 'UB_MapManager_C::GrunewaldAtNight' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, Morgenstund) == 0x000318, "Member 'UB_MapManager_C::Morgenstund' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, Fiskersted) == 0x000368, "Member 'UB_MapManager_C::Fiskersted' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, LoakikiParadise) == 0x0003B8, "Member 'UB_MapManager_C::LoakikiParadise' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, KulaKulaIslands) == 0x000408, "Member 'UB_MapManager_C::KulaKulaIslands' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, SleepingRoseCemetery) == 0x000458, "Member 'UB_MapManager_C::SleepingRoseCemetery' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, TwinMaskTheatre) == 0x0004A8, "Member 'UB_MapManager_C::TwinMaskTheatre' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, ShipwreckHollow) == 0x0004F8, "Member 'UB_MapManager_C::ShipwreckHollow' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, PortPlunder) == 0x000548, "Member 'UB_MapManager_C::PortPlunder' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, WitchForest) == 0x000598, "Member 'UB_MapManager_C::WitchForest' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, TowerIsland) == 0x0005E8, "Member 'UB_MapManager_C::TowerIsland' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, QuickmatchMapList) == 0x000638, "Member 'UB_MapManager_C::QuickmatchMapList' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, MapDataByLevelName) == 0x000648, "Member 'UB_MapManager_C::MapDataByLevelName' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomEmpty) == 0x000698, "Member 'UB_MapManager_C::CustomEmpty' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomIce) == 0x0006E8, "Member 'UB_MapManager_C::CustomIce' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomGraveyard) == 0x000738, "Member 'UB_MapManager_C::CustomGraveyard' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, WitchHouse) == 0x000788, "Member 'UB_MapManager_C::WitchHouse' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, NorthernWhispersMap) == 0x0007D8, "Member 'UB_MapManager_C::NorthernWhispersMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, HighSpruceTownMap) == 0x000828, "Member 'UB_MapManager_C::HighSpruceTownMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, NorthernWhisper) == 0x000878, "Member 'UB_MapManager_C::NorthernWhisper' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, MountainRailwayMap) == 0x0008C8, "Member 'UB_MapManager_C::MountainRailwayMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, NiemeyerLegacyMap) == 0x000918, "Member 'UB_MapManager_C::NiemeyerLegacyMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, PizzafactoryMap) == 0x000968, "Member 'UB_MapManager_C::PizzafactoryMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, PowersourceMap) == 0x0009B8, "Member 'UB_MapManager_C::PowersourceMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, StrongholdMap) == 0x000A08, "Member 'UB_MapManager_C::StrongholdMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, WardwellWintryMap) == 0x000A58, "Member 'UB_MapManager_C::WardwellWintryMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, ImpostorMap) == 0x000AA8, "Member 'UB_MapManager_C::ImpostorMap' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomWitchForest) == 0x000AF8, "Member 'UB_MapManager_C::CustomWitchForest' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, ShardOfWiqqarra) == 0x000B48, "Member 'UB_MapManager_C::ShardOfWiqqarra' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, DesertTown) == 0x000B98, "Member 'UB_MapManager_C::DesertTown' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, Stoneage) == 0x000BE8, "Member 'UB_MapManager_C::Stoneage' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomDesert) == 0x000C38, "Member 'UB_MapManager_C::CustomDesert' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomDesertTown) == 0x000C88, "Member 'UB_MapManager_C::CustomDesertTown' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CitadeloftheSunKeeper) == 0x000CD8, "Member 'UB_MapManager_C::CitadeloftheSunKeeper' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, KasbahleRibat) == 0x000D28, "Member 'UB_MapManager_C::KasbahleRibat' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, LostTemple) == 0x000D78, "Member 'UB_MapManager_C::LostTemple' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, PalaceofHeka) == 0x000DC8, "Member 'UB_MapManager_C::PalaceofHeka' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, VermilionValley) == 0x000E18, "Member 'UB_MapManager_C::VermilionValley' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, OasisTemple) == 0x000E68, "Member 'UB_MapManager_C::OasisTemple' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomStoneAge) == 0x000EB8, "Member 'UB_MapManager_C::CustomStoneAge' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, GraveCanyon) == 0x000F08, "Member 'UB_MapManager_C::GraveCanyon' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, BigMapList) == 0x000F58, "Member 'UB_MapManager_C::BigMapList' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, SmallBuiltInCustomMapList) == 0x000F68, "Member 'UB_MapManager_C::SmallBuiltInCustomMapList' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, BigBuiltInCustomMapList) == 0x000F78, "Member 'UB_MapManager_C::BigBuiltInCustomMapList' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, AncientTemple) == 0x000F88, "Member 'UB_MapManager_C::AncientTemple' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CovensCove) == 0x000FD8, "Member 'UB_MapManager_C::CovensCove' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, BonePit) == 0x001028, "Member 'UB_MapManager_C::BonePit' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, SingingSanctuary) == 0x001078, "Member 'UB_MapManager_C::SingingSanctuary' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, SunsetSwamp) == 0x0010C8, "Member 'UB_MapManager_C::SunsetSwamp' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, MartinsChamber) == 0x001118, "Member 'UB_MapManager_C::MartinsChamber' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, Castle) == 0x001168, "Member 'UB_MapManager_C::Castle' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomMapCycle) == 0x0011B8, "Member 'UB_MapManager_C::CustomMapCycle' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, MapDataByFileName) == 0x0011C0, "Member 'UB_MapManager_C::MapDataByFileName' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, LayoutDataByFileName) == 0x001210, "Member 'UB_MapManager_C::LayoutDataByFileName' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, CustomMapTextureImages) == 0x001260, "Member 'UB_MapManager_C::CustomMapTextureImages' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, AllowedAmountOfCycleMaps) == 0x0012B0, "Member 'UB_MapManager_C::AllowedAmountOfCycleMaps' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, ActiveCustomMapCycleIndex) == 0x0012B4, "Member 'UB_MapManager_C::ActiveCustomMapCycleIndex' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, OfficialMapRatio) == 0x0012B8, "Member 'UB_MapManager_C::OfficialMapRatio' has a wrong offset!");
static_assert(offsetof(UB_MapManager_C, AutoSaveSuffix) == 0x0012C0, "Member 'UB_MapManager_C::AutoSaveSuffix' has a wrong offset!");

}

