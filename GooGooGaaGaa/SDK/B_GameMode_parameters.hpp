#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_GameMode

#include "Basic.hpp"

#include "S_PropLayoutData_structs.hpp"
#include "E_JoinAsHunterStates_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_MapSize_structs.hpp"
#include "S_TournamentPlayer_structs.hpp"
#include "SMapData_structs.hpp"
#include "ETeamID_structs.hpp"
#include "PropWitchHuntModule_structs.hpp"
#include "AdvancedSessions_structs.hpp"
#include "OnlineSubsystemBlueprints_structs.hpp"
#include "SCalculatedScoreStat_structs.hpp"
#include "EGameMessageType_structs.hpp"
#include "VaRest_structs.hpp"


namespace SDK::Params
{

// Function B_GameMode.B_GameMode_C.CheckEndMatchWitchesDead
// 0x0020 (0x0020 - 0x0000)
struct B_GameMode_C_CheckEndMatchWitchesDead final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetWitchesCount_WitchesCount;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_ByteByte_ReturnValue;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_CheckEndMatchWitchesDead) == 0x000008, "Wrong alignment on B_GameMode_C_CheckEndMatchWitchesDead");
static_assert(sizeof(B_GameMode_C_CheckEndMatchWitchesDead) == 0x000020, "Wrong size on B_GameMode_C_CheckEndMatchWitchesDead");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, CallFunc_GetWitchesCount_WitchesCount) == 0x000008, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::CallFunc_GetWitchesCount_WitchesCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, K2Node_DynamicCast_AsB_Game_State) == 0x000010, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, CallFunc_LessEqual_ByteByte_ReturnValue) == 0x000019, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::CallFunc_LessEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, CallFunc_HasRoundStarted_RoundHasStarted) == 0x00001A, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, CallFunc_IsRoundEnd_RoundIsEnd) == 0x00001B, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchWitchesDead, CallFunc_BooleanAND_ReturnValue_1) == 0x00001E, "Member 'B_GameMode_C_CheckEndMatchWitchesDead::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.EnsureInitialize
// 0x00C8 (0x00C8 - 0x0000)
struct B_GameMode_C_EnsureInitialize final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMemoryStats_usedPhysical;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMemoryStats_peakUsedPhysical;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMemoryStats_usedVirtual;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMemoryStats_peakUsedVirtual;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMemoryStats_availablePhysical;         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMemoryStats_availableVirtual;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMemoryStats_totalPhysical;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMemoryStats_totalVirtual;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRandomTimerForWaitState_IsRandom;    // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_1;        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_2;        // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_3;        // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_2; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_3; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_EnsureInitialize) == 0x000008, "Wrong alignment on B_GameMode_C_EnsureInitialize");
static_assert(sizeof(B_GameMode_C_EnsureInitialize) == 0x0000C8, "Wrong size on B_GameMode_C_EnsureInitialize");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_GetMemoryStats_usedPhysical) == 0x000004, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_GetMemoryStats_usedPhysical' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_GetMemoryStats_peakUsedPhysical) == 0x000008, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_GetMemoryStats_peakUsedPhysical' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_GetMemoryStats_usedVirtual) == 0x00000C, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_GetMemoryStats_usedVirtual' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_GetMemoryStats_peakUsedVirtual) == 0x000010, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_GetMemoryStats_peakUsedVirtual' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_GetMemoryStats_availablePhysical) == 0x000014, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_GetMemoryStats_availablePhysical' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_GetMemoryStats_availableVirtual) == 0x000018, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_GetMemoryStats_availableVirtual' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_GetMemoryStats_totalPhysical) == 0x00001C, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_GetMemoryStats_totalPhysical' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_GetMemoryStats_totalVirtual) == 0x000020, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_GetMemoryStats_totalVirtual' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_CheckRandomTimerForWaitState_IsRandom) == 0x000024, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_CheckRandomTimerForWaitState_IsRandom' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000028, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Conv_DoubleToString_ReturnValue_1) == 0x000038, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Conv_DoubleToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000058, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Conv_DoubleToString_ReturnValue_2) == 0x000068, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Conv_DoubleToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Conv_DoubleToString_ReturnValue_3) == 0x000078, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Conv_DoubleToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000088, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000098, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast) == 0x0000A8, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1) == 0x0000B0, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_2) == 0x0000B8, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_EnsureInitialize, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_3) == 0x0000C0, "Member 'B_GameMode_C_EnsureInitialize::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_3' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetBaseXPNumerator
// 0x0008 (0x0008 - 0x0000)
struct B_GameMode_C_GetBaseXPNumerator final
{
public:
	double                                        Numerator;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetBaseXPNumerator) == 0x000008, "Wrong alignment on B_GameMode_C_GetBaseXPNumerator");
static_assert(sizeof(B_GameMode_C_GetBaseXPNumerator) == 0x000008, "Wrong size on B_GameMode_C_GetBaseXPNumerator");
static_assert(offsetof(B_GameMode_C_GetBaseXPNumerator, Numerator) == 0x000000, "Member 'B_GameMode_C_GetBaseXPNumerator::Numerator' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetPlayerPlayTime
// 0x0028 (0x0028 - 0x0000)
struct B_GameMode_C_GetPlayerPlayTime final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Playtime;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetPlayerPlayTime) == 0x000008, "Wrong alignment on B_GameMode_C_GetPlayerPlayTime");
static_assert(sizeof(B_GameMode_C_GetPlayerPlayTime) == 0x000028, "Wrong size on B_GameMode_C_GetPlayerPlayTime");
static_assert(offsetof(B_GameMode_C_GetPlayerPlayTime, PlayerState) == 0x000000, "Member 'B_GameMode_C_GetPlayerPlayTime::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayerPlayTime, Playtime) == 0x000008, "Member 'B_GameMode_C_GetPlayerPlayTime::Playtime' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayerPlayTime, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000010, "Member 'B_GameMode_C_GetPlayerPlayTime::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayerPlayTime, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'B_GameMode_C_GetPlayerPlayTime::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayerPlayTime, CallFunc_FTrunc_ReturnValue) == 0x000020, "Member 'B_GameMode_C_GetPlayerPlayTime::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetPlayerScoreStatManager
// 0x0020 (0x0020 - 0x0000)
struct B_GameMode_C_GetPlayerScoreStatManager final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ScoreStatManager_C*                  ScoreStatManager;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetPlayerScoreStatManager) == 0x000008, "Wrong alignment on B_GameMode_C_GetPlayerScoreStatManager");
static_assert(sizeof(B_GameMode_C_GetPlayerScoreStatManager) == 0x000020, "Wrong size on B_GameMode_C_GetPlayerScoreStatManager");
static_assert(offsetof(B_GameMode_C_GetPlayerScoreStatManager, PlayerState) == 0x000000, "Member 'B_GameMode_C_GetPlayerScoreStatManager::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayerScoreStatManager, ScoreStatManager) == 0x000008, "Member 'B_GameMode_C_GetPlayerScoreStatManager::ScoreStatManager' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayerScoreStatManager, K2Node_DynamicCast_AsB_Player_State) == 0x000010, "Member 'B_GameMode_C_GetPlayerScoreStatManager::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayerScoreStatManager, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_GetPlayerScoreStatManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleEndMatch
// 0x0478 (0x0478 - 0x0000)
struct B_GameMode_C_HandleEndMatch final
{
public:
	ETeamID                                       WinnerTeam;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceRegardlessOfEnd;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SurvivingWitches;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       LastWitch;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         LastHitHunters;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       WitchHunter;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       PlayerUnderTest;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_MagicRelict_C*>               MagicRelicts;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_4;               // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_5;               // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_3;               // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_6;               // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item_1;                         // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item_2;                         // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_2;             // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_5;                   // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_7;               // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_4;               // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_MagicRelict_C*                       CallFunc_Array_Get_Item_3;                         // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_8;               // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVaRestURL                             CallFunc_GetWorldURL_ReturnValue;                  // 0x01E0(0x0068)()
	class APlayerState*                           CallFunc_Array_Get_Item_4;                         // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0250(0x0010)()
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_3;             // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0270(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInWinnerTeam_InWinnerTeam;        // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x02C0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x02D0(0x0010)()
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x02F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldPostQuestProgress_Result;           // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULowEntryJsonObjectEntry*               CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue; // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULowEntryJsonObjectEntry*               CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_1; // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_9;               // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_5;               // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       CallFunc_Array_Get_Item_5;                         // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ULowEntryJsonObjectEntry*               CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_2; // 0x0348(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0355(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_356[0x2];                                      // 0x0356(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumberOfActivePlayers_ActiveCount;     // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0360(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ULowEntryJsonObjectEntry*               CallFunc_ObjectEntry_Pure_CreateFromInteger_ReturnValue; // 0x0370(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULowEntryJsonObjectEntry*               CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_3; // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ULowEntryJsonObjectEntry*>       K2Node_LowEntry_CreateJsonObjectPure_TempArray_Array; // 0x0380(0x0010)(ReferenceParm)
	class ULowEntryJsonObject*                    K2Node_LowEntry_CreateJsonObjectPure_JsonObject_Object; // 0x0390(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ScoreStatManager_C*                  CallFunc_GetPlayerScoreStatManager_ScoreStatManager; // 0x0398(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Object_Pure_ToJsonString_ReturnValue;     // 0x03A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHunterScoreStat_Stat;                  // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLastSurvivingWitch_LastWitchExists;    // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       CallFunc_GetLastSurvivingWitch_LastWitchPlayer;    // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x03D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_Achievement_C*                       CallFunc_Get_Player_Achievement_Achievement;       // 0x03E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Player_Achievement_Success;           // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInWinnerTeam_InWinnerTeam_1;      // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F2[0x6];                                      // 0x03F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue_1;        // 0x03F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0408(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0411(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0412(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_413[0x1];                                      // 0x0413(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_5;            // 0x0418(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_5;            // 0x0420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_5;                  // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_6;            // 0x0438(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_6;            // 0x0440(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0449(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x044A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44B[0x5];                                      // 0x044B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_7;            // 0x0450(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_MagicRelict_C*>               CallFunc_GetAllActorsOfClass_OutActors;            // 0x0458(0x0010)(ReferenceParm)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_7;            // 0x0468(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_17;                    // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleEndMatch) == 0x000008, "Wrong alignment on B_GameMode_C_HandleEndMatch");
static_assert(sizeof(B_GameMode_C_HandleEndMatch) == 0x000478, "Wrong size on B_GameMode_C_HandleEndMatch");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, WinnerTeam) == 0x000000, "Member 'B_GameMode_C_HandleEndMatch::WinnerTeam' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, ForceRegardlessOfEnd) == 0x000001, "Member 'B_GameMode_C_HandleEndMatch::ForceRegardlessOfEnd' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, SurvivingWitches) == 0x000004, "Member 'B_GameMode_C_HandleEndMatch::SurvivingWitches' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, LastWitch) == 0x000008, "Member 'B_GameMode_C_HandleEndMatch::LastWitch' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, LastHitHunters) == 0x000010, "Member 'B_GameMode_C_HandleEndMatch::LastHitHunters' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, WitchHunter) == 0x000018, "Member 'B_GameMode_C_HandleEndMatch::WitchHunter' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, PlayerUnderTest) == 0x000020, "Member 'B_GameMode_C_HandleEndMatch::PlayerUnderTest' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, MagicRelicts) == 0x000028, "Member 'B_GameMode_C_HandleEndMatch::MagicRelicts' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameInstance_ReturnValue) == 0x000038, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue) == 0x000040, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_Instance) == 0x000048, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_State) == 0x000058, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_SwitchEnum_CmpSuccess) == 0x000061, "Member 'B_GameMode_C_HandleEndMatch::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Not_PreBool_ReturnValue) == 0x000062, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_1) == 0x000068, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Array_Index_Variable) == 0x000070, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Array_Index_Variable_1) == 0x000078, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Loop_Counter_Variable) == 0x00007C, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Array_Index_Variable_2) == 0x00008C, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_2) == 0x000090, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_3) == 0x000098, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_State_1) == 0x0000A0, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Length_ReturnValue_1) == 0x0000AC, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_4) == 0x0000B8, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_State_2) == 0x0000C0, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_3) == 0x0000C8, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Loop_Counter_Variable_2) == 0x0000CC, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_IsRoundEnd_RoundIsEnd) == 0x0000D0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000D1, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000D4, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Loop_Counter_Variable_3) == 0x0000D8, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_5) == 0x0000E0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_State_3) == 0x0000E8, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_4) == 0x0000F0, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000F4, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Array_Index_Variable_3) == 0x0000F8, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000FC, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Get_Item) == 0x000100, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Player_State) == 0x000108, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_5) == 0x000110, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameInstance_ReturnValue_1) == 0x000118, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_6) == 0x000120, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000128, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_6) == 0x000130, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Get_Item_1) == 0x000138, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Player_State_1) == 0x000140, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_7) == 0x000148, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Length_ReturnValue_2) == 0x00014C, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Less_IntInt_ReturnValue_1) == 0x000150, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Array_Index_Variable_4) == 0x000154, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Loop_Counter_Variable_4) == 0x000158, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Get_Item_2) == 0x000160, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Add_IntInt_ReturnValue_4) == 0x000168, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Player_State_2) == 0x000170, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Player_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_8) == 0x000178, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Array_Index_Variable_5) == 0x00017C, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Array_Index_Variable_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameInstance_ReturnValue_2) == 0x000180, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameInstance_ReturnValue_3) == 0x000188, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000190, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_9) == 0x000198, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x0001A0, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_10) == 0x0001A8, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_7) == 0x0001B0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_State_4) == 0x0001B8, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_State_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_11) == 0x0001C0, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Get_Item_3) == 0x0001C8, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Length_ReturnValue_3) == 0x0001D0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001D4, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_8) == 0x0001D8, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetWorldURL_ReturnValue) == 0x0001E0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetWorldURL_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Get_Item_4) == 0x000248, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Conv_StringToText_ReturnValue) == 0x000250, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Player_State_3) == 0x000260, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Player_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_12) == 0x000268, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_MakeStruct_FormatArgumentData) == 0x000270, "Member 'B_GameMode_C_HandleEndMatch::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_IsPlayerInWinnerTeam_InWinnerTeam) == 0x0002B8, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_IsPlayerInWinnerTeam_InWinnerTeam' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_MakeArray_Array) == 0x0002C0, "Member 'B_GameMode_C_HandleEndMatch::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Format_ReturnValue) == 0x0002D0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Length_ReturnValue_4) == 0x0002E0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Less_IntInt_ReturnValue_3) == 0x0002E4, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Variable) == 0x0002E8, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetCurrentLevelName_ReturnValue) == 0x0002F0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_ShouldPostQuestProgress_Result) == 0x000300, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_ShouldPostQuestProgress_Result' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue) == 0x000308, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_1) == 0x000310, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameState_ReturnValue_9) == 0x000318, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameState_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_State_5) == 0x000320, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_State_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_13) == 0x000328, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Get_Item_5) == 0x000330, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Conv_NameToString_ReturnValue) == 0x000338, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_2) == 0x000348, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Array_Length_ReturnValue_5) == 0x000350, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_BooleanAND_ReturnValue) == 0x000354, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Less_IntInt_ReturnValue_4) == 0x000355, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetNumberOfActivePlayers_ActiveCount) == 0x000358, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetNumberOfActivePlayers_ActiveCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000360, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_ObjectEntry_Pure_CreateFromInteger_ReturnValue) == 0x000370, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_ObjectEntry_Pure_CreateFromInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_3) == 0x000378, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_ObjectEntry_Pure_CreateFromString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_LowEntry_CreateJsonObjectPure_TempArray_Array) == 0x000380, "Member 'B_GameMode_C_HandleEndMatch::K2Node_LowEntry_CreateJsonObjectPure_TempArray_Array' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_LowEntry_CreateJsonObjectPure_JsonObject_Object) == 0x000390, "Member 'B_GameMode_C_HandleEndMatch::K2Node_LowEntry_CreateJsonObjectPure_JsonObject_Object' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetPlayerScoreStatManager_ScoreStatManager) == 0x000398, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetPlayerScoreStatManager_ScoreStatManager' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Object_Pure_ToJsonString_ReturnValue) == 0x0003A0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Object_Pure_ToJsonString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetHunterScoreStat_Stat) == 0x0003B0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetHunterScoreStat_Stat' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetLastSurvivingWitch_LastWitchExists) == 0x0003B8, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetLastSurvivingWitch_LastWitchExists' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetLastSurvivingWitch_LastWitchPlayer) == 0x0003C0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetLastSurvivingWitch_LastWitchPlayer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_FTrunc_ReturnValue) == 0x0003C8, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Greater_IntInt_ReturnValue) == 0x0003CC, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameInstance_ReturnValue_4) == 0x0003D0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x0003D8, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_14) == 0x0003E0, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Get_Player_Achievement_Achievement) == 0x0003E8, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Get_Player_Achievement_Achievement' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Get_Player_Achievement_Success) == 0x0003F0, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Get_Player_Achievement_Success' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_IsPlayerInWinnerTeam_InWinnerTeam_1) == 0x0003F1, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_IsPlayerInWinnerTeam_InWinnerTeam_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetCurrentLevelName_ReturnValue_1) == 0x0003F8, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetCurrentLevelName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000408, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000410, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000411, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_BooleanAND_ReturnValue_1) == 0x000412, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Add_IntInt_ReturnValue_5) == 0x000414, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameInstance_ReturnValue_5) == 0x000418, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_Instance_5) == 0x000420, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_Instance_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_15) == 0x000428, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, Temp_int_Loop_Counter_Variable_5) == 0x00042C, "Member 'B_GameMode_C_HandleEndMatch::Temp_int_Loop_Counter_Variable_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Less_IntInt_ReturnValue_5) == 0x000430, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_Add_IntInt_ReturnValue_6) == 0x000434, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameInstance_ReturnValue_6) == 0x000438, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_Instance_6) == 0x000440, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_Instance_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_16) == 0x000448, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_BooleanOR_ReturnValue) == 0x000449, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_BooleanAND_ReturnValue_2) == 0x00044A, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetGameInstance_ReturnValue_7) == 0x000450, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetGameInstance_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, CallFunc_GetAllActorsOfClass_OutActors) == 0x000458, "Member 'B_GameMode_C_HandleEndMatch::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_AsB_Game_Instance_7) == 0x000468, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_AsB_Game_Instance_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatch, K2Node_DynamicCast_bSuccess_17) == 0x000470, "Member 'B_GameMode_C_HandleEndMatch::K2Node_DynamicCast_bSuccess_17' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleGrantExp
// 0x0170 (0x0170 - 0x0000)
struct B_GameMode_C_HandleGrantExp final
{
public:
	class AB_PlayerState_C*                       CurrentPlayerState;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalGrantedXp;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WinBonusXP;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastWitchXP;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Playtime;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalCatchXP;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalXP;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TimeXP;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AssistXP;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastHitXP;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetBaseXPNumerator_Numerator;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfActivePlayers_ActiveCount;     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInWinnerTeam_InWinnerTeam;        // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetPlayerPlayTime_Playtime;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_ScoreStatManager_C*                  CallFunc_GetPlayerScoreStatManager_ScoreStatManager; // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WithEditor_ReturnValue;                   // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetHunterScoreStat_Stat;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_ScoreStatManager_C*                  CallFunc_GetPlayerScoreStatManager_ScoreStatManager_1; // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHunterScoreStat_Stat_1;                // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleGrantExp) == 0x000008, "Wrong alignment on B_GameMode_C_HandleGrantExp");
static_assert(sizeof(B_GameMode_C_HandleGrantExp) == 0x000170, "Wrong size on B_GameMode_C_HandleGrantExp");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CurrentPlayerState) == 0x000000, "Member 'B_GameMode_C_HandleGrantExp::CurrentPlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, TotalGrantedXp) == 0x000008, "Member 'B_GameMode_C_HandleGrantExp::TotalGrantedXp' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, WinBonusXP) == 0x00000C, "Member 'B_GameMode_C_HandleGrantExp::WinBonusXP' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, LastWitchXP) == 0x000010, "Member 'B_GameMode_C_HandleGrantExp::LastWitchXP' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, Playtime) == 0x000014, "Member 'B_GameMode_C_HandleGrantExp::Playtime' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, TotalCatchXP) == 0x000018, "Member 'B_GameMode_C_HandleGrantExp::TotalCatchXP' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, TotalXP) == 0x00001C, "Member 'B_GameMode_C_HandleGrantExp::TotalXP' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, TimeXP) == 0x000020, "Member 'B_GameMode_C_HandleGrantExp::TimeXP' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, AssistXP) == 0x000024, "Member 'B_GameMode_C_HandleGrantExp::AssistXP' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, LastHitXP) == 0x000028, "Member 'B_GameMode_C_HandleGrantExp::LastHitXP' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetBaseXPNumerator_Numerator) == 0x000030, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetBaseXPNumerator_Numerator' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetGameInstance_ReturnValue) == 0x000038, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, K2Node_DynamicCast_AsB_Game_Instance) == 0x000040, "Member 'B_GameMode_C_HandleGrantExp::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_GameMode_C_HandleGrantExp::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Add_IntInt_ReturnValue_2) == 0x000054, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetNumberOfActivePlayers_ActiveCount) == 0x000058, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetNumberOfActivePlayers_ActiveCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Subtract_IntInt_ReturnValue) == 0x00005C, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000060, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Now_ReturnValue) == 0x000068, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000070, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_IsPlayerInWinnerTeam_InWinnerTeam) == 0x000078, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_IsPlayerInWinnerTeam_InWinnerTeam' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetPlayerPlayTime_Playtime) == 0x00007C, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetPlayerPlayTime_Playtime' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000080, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetGameInstance_ReturnValue_1) == 0x000088, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000090, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000098, "Member 'B_GameMode_C_HandleGrantExp::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'B_GameMode_C_HandleGrantExp::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetTotalSeconds_ReturnValue) == 0x0000A4, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000B1, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_BooleanOR_ReturnValue) == 0x0000B2, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000B8, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Not_PreBool_ReturnValue) == 0x0000C0, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_FTrunc_ReturnValue) == 0x0000D0, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000D4, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000D8, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000E0, "Member 'B_GameMode_C_HandleGrantExp::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, K2Node_DynamicCast_bSuccess_2) == 0x0000E8, "Member 'B_GameMode_C_HandleGrantExp::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000F0, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetPlayerScoreStatManager_ScoreStatManager) == 0x0000F8, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetPlayerScoreStatManager_ScoreStatManager' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_WithEditor_ReturnValue) == 0x000100, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_WithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetHunterScoreStat_Stat) == 0x000108, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetHunterScoreStat_Stat' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_BooleanOR_ReturnValue_1) == 0x000110, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000118, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_FTrunc_ReturnValue_1) == 0x000120, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Add_IntInt_ReturnValue_4) == 0x000124, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000128, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetPlayerScoreStatManager_ScoreStatManager_1) == 0x000130, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetPlayerScoreStatManager_ScoreStatManager_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_GetHunterScoreStat_Stat_1) == 0x000138, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_GetHunterScoreStat_Stat_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_SelectFloat_ReturnValue) == 0x000140, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000148, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000150, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_FTrunc_ReturnValue_2) == 0x000158, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_FTrunc_ReturnValue_3) == 0x00015C, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Add_IntInt_ReturnValue_5) == 0x000160, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleGrantExp, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000168, "Member 'B_GameMode_C_HandleGrantExp::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleStartMatch
// 0x0390 (0x0390 - 0x0000)
struct B_GameMode_C_HandleStartMatch final
{
public:
	TArray<class AB_StaticMeshProp_C*>            StaticMeshProps;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         CallFunc_GetTournamentPlayersStruct_PlayerIds;     // 0x0068(0x0010)(ReferenceParm)
	TArray<struct FS_TournamentPlayer>            CallFunc_GetTournamentPlayersStruct_TournamentPlayers; // 0x0078(0x0010)(ReferenceParm)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_4;               // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckDefaultNrOfActivePlayers_Sufficient_Players; // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B[0x1];                                      // 0x010B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_5;               // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    CallFunc_Array_Get_Item_1;                         // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_166[0x2];                                      // 0x0166(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_6;               // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_3;               // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVaRestURL                             CallFunc_GetWorldURL_ReturnValue;                  // 0x0190(0x0068)()
	struct FDateTime                              CallFunc_UtcNow_ReturnValue;                       // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0200(0x0010)()
	class FString                                 CallFunc_DateTime_ToIso8601_String;                // 0x0210(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0220(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0268(0x0010)(ReferenceParm)
	class UB_PoolManager_C*                       CallFunc_GetPoolManager_ReturnValue;               // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0280(0x0010)()
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_7;               // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item_2;                         // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item_3;                         // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_2;             // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_SpawnNewPlayerPawn_PlayerPawn;            // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue;           // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x02F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_AchievementManager_C*                CallFunc_CreateObject_Object;                      // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item_4;                         // 0x0318(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_3;             // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_5;            // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_6;            // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_5;            // 0x0340(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_6;            // 0x0350(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A[0x2];                                      // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x035C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AB_StaticMeshProp_C*>            CallFunc_GetAllActorsOfClass_OutActors;            // 0x0368(0x0010)(ReferenceParm)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetWitchesCount_WitchesCount;             // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleStartMatch) == 0x000008, "Wrong alignment on B_GameMode_C_HandleStartMatch");
static_assert(sizeof(B_GameMode_C_HandleStartMatch) == 0x000390, "Wrong size on B_GameMode_C_HandleStartMatch");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, StaticMeshProps) == 0x000000, "Member 'B_GameMode_C_HandleStartMatch::StaticMeshProps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameState_ReturnValue_1) == 0x000028, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Add_IntInt_ReturnValue_1) == 0x000030, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_State) == 0x000038, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameInstance_ReturnValue) == 0x000048, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_IsDedicatedServer_ReturnValue) == 0x000050, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_Instance) == 0x000058, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Array_Index_Variable) == 0x000064, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetTournamentPlayersStruct_PlayerIds) == 0x000068, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetTournamentPlayersStruct_PlayerIds' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetTournamentPlayersStruct_TournamentPlayers) == 0x000078, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetTournamentPlayersStruct_TournamentPlayers' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameState_ReturnValue_2) == 0x000088, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Loop_Counter_Variable_2) == 0x000090, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Less_IntInt_ReturnValue) == 0x000094, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Less_IntInt_ReturnValue_1) == 0x00009C, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000A0, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000A8, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000B0, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000C0, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameState_ReturnValue_3) == 0x0000C8, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000D0, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_3) == 0x0000D8, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_State_1) == 0x0000E0, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_4) == 0x0000E8, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameState_ReturnValue_4) == 0x0000F0, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameState_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_CheckDefaultNrOfActivePlayers_Sufficient_Players) == 0x0000F8, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_CheckDefaultNrOfActivePlayers_Sufficient_Players' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_State_2) == 0x000100, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_5) == 0x000108, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000109, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Not_PreBool_ReturnValue) == 0x00010A, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Array_Index_Variable_1) == 0x00010C, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Get_Item) == 0x000110, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Player_State) == 0x000118, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_6) == 0x000120, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameInstance_ReturnValue_3) == 0x000128, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x000130, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_7) == 0x000138, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Loop_Counter_Variable_3) == 0x00013C, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Add_IntInt_ReturnValue_3) == 0x000140, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Array_Index_Variable_2) == 0x000144, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Loop_Counter_Variable_4) == 0x000148, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Add_IntInt_ReturnValue_4) == 0x00014C, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameState_ReturnValue_5) == 0x000150, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameState_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Get_Item_1) == 0x000158, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Length_ReturnValue_2) == 0x000160, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Less_IntInt_ReturnValue_2) == 0x000164, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000165, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Length_ReturnValue_3) == 0x000168, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameState_ReturnValue_6) == 0x000170, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameState_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Less_IntInt_ReturnValue_3) == 0x000178, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_State_3) == 0x000180, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_8) == 0x000188, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetWorldURL_ReturnValue) == 0x000190, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetWorldURL_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_UtcNow_ReturnValue) == 0x0001F8, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_UtcNow_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Conv_StringToText_ReturnValue) == 0x000200, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_DateTime_ToIso8601_String) == 0x000210, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_DateTime_ToIso8601_String' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_MakeStruct_FormatArgumentData) == 0x000220, "Member 'B_GameMode_C_HandleStartMatch::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_MakeArray_Array) == 0x000268, "Member 'B_GameMode_C_HandleStartMatch::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetPoolManager_ReturnValue) == 0x000278, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetPoolManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Format_ReturnValue) == 0x000280, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameState_ReturnValue_7) == 0x000290, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameState_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Array_Index_Variable_3) == 0x000298, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Get_Item_2) == 0x0002A0, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Get_Item_3) == 0x0002A8, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Player_State_1) == 0x0002B0, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_9) == 0x0002B8, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Player_State_2) == 0x0002C0, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Player_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_10) == 0x0002C8, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0002C9, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_SpawnNewPlayerPawn_PlayerPawn) == 0x0002D0, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_SpawnNewPlayerPawn_PlayerPawn' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Length_ReturnValue_4) == 0x0002D8, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Less_IntInt_ReturnValue_4) == 0x0002DC, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetEngineSubsystem_ReturnValue) == 0x0002E0, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x0002E8, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameInstance_ReturnValue_4) == 0x0002F0, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x0002F8, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_11) == 0x000300, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_CreateObject_Object) == 0x000308, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, Temp_int_Array_Index_Variable_4) == 0x000310, "Member 'B_GameMode_C_HandleStartMatch::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Get_Item_4) == 0x000318, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Player_State_3) == 0x000320, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Player_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_12) == 0x000328, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_SwitchEnum_CmpSuccess) == 0x000329, "Member 'B_GameMode_C_HandleStartMatch::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameInstance_ReturnValue_5) == 0x000330, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameInstance_ReturnValue_6) == 0x000338, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_Instance_5) == 0x000340, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_Instance_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_13) == 0x000348, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_AsB_Game_Instance_6) == 0x000350, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_AsB_Game_Instance_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, K2Node_DynamicCast_bSuccess_14) == 0x000358, "Member 'B_GameMode_C_HandleStartMatch::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000359, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Array_Add_ReturnValue) == 0x00035C, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_BooleanOR_ReturnValue) == 0x000360, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetAllActorsOfClass_OutActors) == 0x000368, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_Now_ReturnValue) == 0x000378, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000380, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleStartMatch, CallFunc_GetWitchesCount_WitchesCount) == 0x000388, "Member 'B_GameMode_C_HandleStartMatch::CallFunc_GetWitchesCount_WitchesCount' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.Initialize
// 0x0360 (0x0360 - 0x0000)
struct B_GameMode_C_Initialize final
{
public:
	struct FSMapData                              CurrentMap;                                        // 0x0000(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<class AB_OverrideDropItemDef_C*>       OverrideDropItemDefActors;                         // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AB_StaticMeshProp_C*>            StaticMeshProps;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB[0x5];                                       // 0x00FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_SeekGameState_C*                     K2Node_DynamicCast_AsB_Seek_Game_State;            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_5;            // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_5;            // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_6;            // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_6;            // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_4;               // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_3;               // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameMode_C*                  K2Node_DynamicCast_AsB_Creative_Game_Mode;         // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_5;               // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_4;               // 0x01C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 AccountId, const class FString& RequestedAccountName, class UB_ServerClientConfig_C* ClientConfig, int32 AccountState)> K2Node_CreateDelegate_OutputDelegate;              // 0x01D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_7;            // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_8;            // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_7;            // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_8;            // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              CallFunc_GetSpecificMapFromLevelName_MapData;      // 0x0218(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_9;            // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue_1;        // 0x0268(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_9;            // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class AB_OverrideDropItemDef_C*>       CallFunc_GetAllActorsOfClass_OutActors;            // 0x02A8(0x0010)(ReferenceParm)
	class AB_OverrideDropItemDef_C*               CallFunc_Array_Get_Item;                           // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x02C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x02D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_WitchCollisionTest_C*                CallFunc_FinishSpawningActor_ReturnValue;          // 0x0348(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_Initialize) == 0x000010, "Wrong alignment on B_GameMode_C_Initialize");
static_assert(sizeof(B_GameMode_C_Initialize) == 0x000360, "Wrong size on B_GameMode_C_Initialize");
static_assert(offsetof(B_GameMode_C_Initialize, CurrentMap) == 0x000000, "Member 'B_GameMode_C_Initialize::CurrentMap' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, OverrideDropItemDefActors) == 0x000040, "Member 'B_GameMode_C_Initialize::OverrideDropItemDefActors' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, StaticMeshProps) == 0x000050, "Member 'B_GameMode_C_Initialize::StaticMeshProps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, Temp_int_Array_Index_Variable) == 0x000060, "Member 'B_GameMode_C_Initialize::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue) == 0x000068, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance) == 0x000070, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_1) == 0x000080, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, Temp_int_Loop_Counter_Variable) == 0x000088, "Member 'B_GameMode_C_Initialize::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000090, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Add_IntInt_ReturnValue) == 0x00009C, "Member 'B_GameMode_C_Initialize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameState_ReturnValue) == 0x0000A0, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000A8, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_State) == 0x0000B0, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000C0, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_3) == 0x0000C8, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameState_ReturnValue_1) == 0x0000D0, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_3) == 0x0000D8, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_State_1) == 0x0000E0, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_4) == 0x0000E8, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x0000F0, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_5) == 0x0000F8, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000F9, "Member 'B_GameMode_C_Initialize::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_BooleanOR_ReturnValue) == 0x0000FA, "Member 'B_GameMode_C_Initialize::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameState_ReturnValue_2) == 0x000100, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameState_ReturnValue_3) == 0x000108, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Seek_Game_State) == 0x000110, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Seek_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_6) == 0x000118, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_State_2) == 0x000120, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_7) == 0x000128, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000129, "Member 'B_GameMode_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_4) == 0x000130, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_SwitchEnum_CmpSuccess) == 0x000138, "Member 'B_GameMode_C_Initialize::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000140, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_8) == 0x000148, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_5) == 0x000150, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_5) == 0x000158, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_9) == 0x000160, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_6) == 0x000168, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_6) == 0x000170, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_10) == 0x000178, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameState_ReturnValue_4) == 0x000180, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameState_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_State_3) == 0x000188, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_11) == 0x000190, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000191, "Member 'B_GameMode_C_Initialize::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000198, "Member 'B_GameMode_C_Initialize::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, Temp_int_Loop_Counter_Variable_1) == 0x0001A8, "Member 'B_GameMode_C_Initialize::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Creative_Game_Mode) == 0x0001B0, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Creative_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_12) == 0x0001B8, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001BC, "Member 'B_GameMode_C_Initialize::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameState_ReturnValue_5) == 0x0001C0, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameState_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_State_4) == 0x0001C8, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_State_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_13) == 0x0001D0, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_CreateDelegate_OutputDelegate) == 0x0001D4, "Member 'B_GameMode_C_Initialize::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_7) == 0x0001E8, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_8) == 0x0001F0, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_7) == 0x0001F8, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_14) == 0x000200, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_8) == 0x000208, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_15) == 0x000210, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetSpecificMapFromLevelName_MapData) == 0x000218, "Member 'B_GameMode_C_Initialize::CallFunc_GetSpecificMapFromLevelName_MapData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_IsDedicatedServer_ReturnValue) == 0x000258, "Member 'B_GameMode_C_Initialize::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetGameInstance_ReturnValue_9) == 0x000260, "Member 'B_GameMode_C_Initialize::CallFunc_GetGameInstance_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetCurrentLevelName_ReturnValue_1) == 0x000268, "Member 'B_GameMode_C_Initialize::CallFunc_GetCurrentLevelName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_AsB_Game_Instance_9) == 0x000278, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_AsB_Game_Instance_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, K2Node_DynamicCast_bSuccess_16) == 0x000280, "Member 'B_GameMode_C_Initialize::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Concat_StrStr_ReturnValue) == 0x000288, "Member 'B_GameMode_C_Initialize::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000298, "Member 'B_GameMode_C_Initialize::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_GetAllActorsOfClass_OutActors) == 0x0002A8, "Member 'B_GameMode_C_Initialize::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Array_Get_Item) == 0x0002B8, "Member 'B_GameMode_C_Initialize::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Array_Length_ReturnValue) == 0x0002C0, "Member 'B_GameMode_C_Initialize::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Array_Length_ReturnValue_1) == 0x0002C4, "Member 'B_GameMode_C_Initialize::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Less_IntInt_ReturnValue) == 0x0002C8, "Member 'B_GameMode_C_Initialize::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Less_IntInt_ReturnValue_1) == 0x0002C9, "Member 'B_GameMode_C_Initialize::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_MakeTransform_ReturnValue) == 0x0002D0, "Member 'B_GameMode_C_Initialize::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, Temp_int_Array_Index_Variable_1) == 0x000330, "Member 'B_GameMode_C_Initialize::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000338, "Member 'B_GameMode_C_Initialize::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Array_Get_Item_1) == 0x000340, "Member 'B_GameMode_C_Initialize::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_FinishSpawningActor_ReturnValue) == 0x000348, "Member 'B_GameMode_C_Initialize::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Array_Add_ReturnValue) == 0x000350, "Member 'B_GameMode_C_Initialize::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Array_Length_ReturnValue_2) == 0x000354, "Member 'B_GameMode_C_Initialize::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Initialize, CallFunc_Greater_IntInt_ReturnValue) == 0x000358, "Member 'B_GameMode_C_Initialize::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.IsPlayerInWinnerTeam
// 0x0048 (0x0048 - 0x0000)
struct B_GameMode_C_IsPlayerInWinnerTeam final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          InWinnerTeam;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_IsPlayerInWinnerTeam) == 0x000008, "Wrong alignment on B_GameMode_C_IsPlayerInWinnerTeam");
static_assert(sizeof(B_GameMode_C_IsPlayerInWinnerTeam) == 0x000048, "Wrong size on B_GameMode_C_IsPlayerInWinnerTeam");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, PlayerState) == 0x000000, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, InWinnerTeam) == 0x000008, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::InWinnerTeam' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, K2Node_DynamicCast_AsB_Game_State) == 0x000018, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000022, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_Not_PreBool_ReturnValue) == 0x000023, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000025, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_GetGameState_ReturnValue_1) == 0x000028, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_BooleanAND_ReturnValue_1) == 0x000030, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, K2Node_DynamicCast_AsB_Game_State_1) == 0x000038, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_BooleanAND_ReturnValue_2) == 0x000041, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000042, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_BooleanAND_ReturnValue_3) == 0x000043, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_BooleanOR_ReturnValue) == 0x000044, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsPlayerInWinnerTeam, CallFunc_BooleanAND_ReturnValue_4) == 0x000045, "Member 'B_GameMode_C_IsPlayerInWinnerTeam::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.K2_OnLogout
// 0x0008 (0x0008 - 0x0000)
struct B_GameMode_C_K2_OnLogout final
{
public:
	class AController*                            ExitingController;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_K2_OnLogout) == 0x000008, "Wrong alignment on B_GameMode_C_K2_OnLogout");
static_assert(sizeof(B_GameMode_C_K2_OnLogout) == 0x000008, "Wrong size on B_GameMode_C_K2_OnLogout");
static_assert(offsetof(B_GameMode_C_K2_OnLogout, ExitingController) == 0x000000, "Member 'B_GameMode_C_K2_OnLogout::ExitingController' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.K2_PostLogin
// 0x0008 (0x0008 - 0x0000)
struct B_GameMode_C_K2_PostLogin final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_K2_PostLogin) == 0x000008, "Wrong alignment on B_GameMode_C_K2_PostLogin");
static_assert(sizeof(B_GameMode_C_K2_PostLogin) == 0x000008, "Wrong size on B_GameMode_C_K2_PostLogin");
static_assert(offsetof(B_GameMode_C_K2_PostLogin, NewPlayer) == 0x000000, "Member 'B_GameMode_C_K2_PostLogin::NewPlayer' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_GameMode_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_ReceiveTick) == 0x000004, "Wrong alignment on B_GameMode_C_ReceiveTick");
static_assert(sizeof(B_GameMode_C_ReceiveTick) == 0x000004, "Wrong size on B_GameMode_C_ReceiveTick");
static_assert(offsetof(B_GameMode_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_GameMode_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.StartNewGame
// 0x0280 (0x0280 - 0x0000)
struct B_GameMode_C_StartNewGame final
{
public:
	bool                                          RestartByPlayerJoin;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LevelName;                                         // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       CurrentPlayerState;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         VotedIndex;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HighestVotedIndices;                               // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         HighestVote;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            CollectedVotes;                                    // 0x0038(0x0050)(Edit, BlueprintVisible)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetLevelNameFromFileName_MapName;         // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_5;            // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_6;            // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_5;            // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_6;            // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              CallFunc_GetSpecificMapFromLevelName_MapData;      // 0x01A8(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WithEditor_ReturnValue;                   // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTearingDown_Result;                     // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20B[0x5];                                      // 0x020B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_7;            // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_7;            // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WithEditor_ReturnValue_1;                 // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0223(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_2;        // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_242[0x2];                                      // 0x0242(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_8;            // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_8;            // 0x0250(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25A[0x2];                                      // 0x025A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0262(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0263(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_9;            // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_9;            // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_StartNewGame) == 0x000008, "Wrong alignment on B_GameMode_C_StartNewGame");
static_assert(sizeof(B_GameMode_C_StartNewGame) == 0x000280, "Wrong size on B_GameMode_C_StartNewGame");
static_assert(offsetof(B_GameMode_C_StartNewGame, RestartByPlayerJoin) == 0x000000, "Member 'B_GameMode_C_StartNewGame::RestartByPlayerJoin' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, LevelName) == 0x000004, "Member 'B_GameMode_C_StartNewGame::LevelName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CurrentPlayerState) == 0x000010, "Member 'B_GameMode_C_StartNewGame::CurrentPlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, VotedIndex) == 0x000018, "Member 'B_GameMode_C_StartNewGame::VotedIndex' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, HighestVotedIndices) == 0x000020, "Member 'B_GameMode_C_StartNewGame::HighestVotedIndices' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, HighestVote) == 0x000030, "Member 'B_GameMode_C_StartNewGame::HighestVote' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CollectedVotes) == 0x000038, "Member 'B_GameMode_C_StartNewGame::CollectedVotes' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameState_ReturnValue) == 0x000088, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue) == 0x000090, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance) == 0x000098, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Array_Length_ReturnValue) == 0x0000A4, "Member 'B_GameMode_C_StartNewGame::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000A8, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Conv_NameToString_ReturnValue) == 0x0000B0, "Member 'B_GameMode_C_StartNewGame::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000C0, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Concat_StrStr_ReturnValue) == 0x0000D0, "Member 'B_GameMode_C_StartNewGame::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetLevelNameFromFileName_MapName) == 0x0000E0, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetLevelNameFromFileName_MapName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000F0, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_3) == 0x0000F8, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000100, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_2) == 0x000108, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x000110, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_3) == 0x000118, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Conv_NameToString_ReturnValue_1) == 0x000120, "Member 'B_GameMode_C_StartNewGame::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000130, "Member 'B_GameMode_C_StartNewGame::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Add_IntInt_ReturnValue) == 0x000140, "Member 'B_GameMode_C_StartNewGame::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_4) == 0x000148, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000150, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_4) == 0x000158, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, Temp_int_Array_Index_Variable) == 0x00015C, "Member 'B_GameMode_C_StartNewGame::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Array_Get_Item) == 0x000160, "Member 'B_GameMode_C_StartNewGame::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Player_State) == 0x000168, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_5) == 0x000170, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000171, "Member 'B_GameMode_C_StartNewGame::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_5) == 0x000178, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_6) == 0x000180, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_5) == 0x000188, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_6) == 0x000190, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_6) == 0x000198, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_7) == 0x0001A0, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetSpecificMapFromLevelName_MapData) == 0x0001A8, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetSpecificMapFromLevelName_MapData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_IsDedicatedServer_ReturnValue) == 0x0001E8, "Member 'B_GameMode_C_StartNewGame::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameState_ReturnValue_1) == 0x0001F0, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_State) == 0x0001F8, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_8) == 0x000200, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, Temp_int_Variable) == 0x000204, "Member 'B_GameMode_C_StartNewGame::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_WithEditor_ReturnValue) == 0x000208, "Member 'B_GameMode_C_StartNewGame::CallFunc_WithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_IsTearingDown_Result) == 0x000209, "Member 'B_GameMode_C_StartNewGame::CallFunc_IsTearingDown_Result' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_BooleanOR_ReturnValue) == 0x00020A, "Member 'B_GameMode_C_StartNewGame::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_7) == 0x000210, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_7) == 0x000218, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_9) == 0x000220, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_WithEditor_ReturnValue_1) == 0x000221, "Member 'B_GameMode_C_StartNewGame::CallFunc_WithEditor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Not_PreBool_ReturnValue) == 0x000222, "Member 'B_GameMode_C_StartNewGame::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000223, "Member 'B_GameMode_C_StartNewGame::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, Temp_int_Variable_1) == 0x000224, "Member 'B_GameMode_C_StartNewGame::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_EqualEqual_NameName_ReturnValue_2) == 0x000228, "Member 'B_GameMode_C_StartNewGame::CallFunc_EqualEqual_NameName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000230, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x000240, "Member 'B_GameMode_C_StartNewGame::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Not_PreBool_ReturnValue_1) == 0x000241, "Member 'B_GameMode_C_StartNewGame::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, Temp_int_Loop_Counter_Variable) == 0x000244, "Member 'B_GameMode_C_StartNewGame::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_8) == 0x000248, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_8) == 0x000250, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_10) == 0x000258, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Less_IntInt_ReturnValue) == 0x000259, "Member 'B_GameMode_C_StartNewGame::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Add_IntInt_ReturnValue_1) == 0x00025C, "Member 'B_GameMode_C_StartNewGame::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Not_PreBool_ReturnValue_2) == 0x000260, "Member 'B_GameMode_C_StartNewGame::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Not_PreBool_ReturnValue_3) == 0x000261, "Member 'B_GameMode_C_StartNewGame::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_BooleanAND_ReturnValue) == 0x000262, "Member 'B_GameMode_C_StartNewGame::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_BooleanAND_ReturnValue_1) == 0x000263, "Member 'B_GameMode_C_StartNewGame::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_GetGameInstance_ReturnValue_9) == 0x000268, "Member 'B_GameMode_C_StartNewGame::CallFunc_GetGameInstance_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_AsB_Game_Instance_9) == 0x000270, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_AsB_Game_Instance_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, K2Node_DynamicCast_bSuccess_11) == 0x000278, "Member 'B_GameMode_C_StartNewGame::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_StartNewGame, CallFunc_Add_IntInt_ReturnValue_2) == 0x00027C, "Member 'B_GameMode_C_StartNewGame::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.TimerSecondElapsed
// 0x0078 (0x0078 - 0x0000)
struct B_GameMode_C_TimerSecondElapsed final
{
public:
	double                                        RemainingSeconds;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_TimerSecondElapsed) == 0x000008, "Wrong alignment on B_GameMode_C_TimerSecondElapsed");
static_assert(sizeof(B_GameMode_C_TimerSecondElapsed) == 0x000078, "Wrong size on B_GameMode_C_TimerSecondElapsed");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, RemainingSeconds) == 0x000000, "Member 'B_GameMode_C_TimerSecondElapsed::RemainingSeconds' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'B_GameMode_C_TimerSecondElapsed::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_FTrunc_ReturnValue) == 0x00000C, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, K2Node_DynamicCast_AsB_Game_State) == 0x000020, "Member 'B_GameMode_C_TimerSecondElapsed::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_GameMode_C_TimerSecondElapsed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_GetGameState_ReturnValue_1) == 0x000030, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, K2Node_DynamicCast_AsB_Game_State_1) == 0x000038, "Member 'B_GameMode_C_TimerSecondElapsed::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'B_GameMode_C_TimerSecondElapsed::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000041, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x000042, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_BooleanAND_ReturnValue) == 0x000043, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_GetGameState_ReturnValue_2) == 0x000048, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, Temp_int_Array_Index_Variable) == 0x000050, "Member 'B_GameMode_C_TimerSecondElapsed::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_Array_Get_Item) == 0x000058, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, K2Node_DynamicCast_AsB_Player_State) == 0x000068, "Member 'B_GameMode_C_TimerSecondElapsed::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'B_GameMode_C_TimerSecondElapsed::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_Less_IntInt_ReturnValue) == 0x000071, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerSecondElapsed, CallFunc_IsDedicatedServer_ReturnValue) == 0x000072, "Member 'B_GameMode_C_TimerSecondElapsed::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.UnregisterPlayer
// 0x0190 (0x0190 - 0x0000)
struct B_GameMode_C_UnregisterPlayer final
{
public:
	class AController*                            PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       LeavingPlayerState;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          NoPlayersLeft;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            LeavingPlayerController;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_4;               // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetWitchesCount_WitchesCount;             // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_5;               // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_3;               // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted_1;        // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x012E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12F[0x1];                                      // 0x012F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       CallFunc_GetPlayerStateUniqueNetId_ReturnValue;    // 0x0130(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_2;             // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_UnregisterPlayer) == 0x000008, "Wrong alignment on B_GameMode_C_UnregisterPlayer");
static_assert(sizeof(B_GameMode_C_UnregisterPlayer) == 0x000190, "Wrong size on B_GameMode_C_UnregisterPlayer");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, PlayerController) == 0x000000, "Member 'B_GameMode_C_UnregisterPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, LeavingPlayerState) == 0x000008, "Member 'B_GameMode_C_UnregisterPlayer::LeavingPlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, NoPlayersLeft) == 0x000010, "Member 'B_GameMode_C_UnregisterPlayer::NoPlayersLeft' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, LeavingPlayerController) == 0x000018, "Member 'B_GameMode_C_UnregisterPlayer::LeavingPlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_IsDedicatedServer_ReturnValue) == 0x000020, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameState_ReturnValue_1) == 0x000030, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Game_State) == 0x000038, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000048, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameState_ReturnValue_2) == 0x000050, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, Temp_int_Array_Index_Variable) == 0x000058, "Member 'B_GameMode_C_UnregisterPlayer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Array_Length_ReturnValue_1) == 0x00005C, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Array_Get_Item) == 0x000060, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Player_State) == 0x000068, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'B_GameMode_C_UnregisterPlayer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, Temp_int_Loop_Counter_Variable_1) == 0x000080, "Member 'B_GameMode_C_UnregisterPlayer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000084, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameState_ReturnValue_3) == 0x000090, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Game_State_1) == 0x000098, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_2) == 0x0000A0, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameInstance_ReturnValue) == 0x0000A8, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Game_Instance) == 0x0000B0, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_3) == 0x0000B8, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameState_ReturnValue_4) == 0x0000C0, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameState_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Game_State_2) == 0x0000C8, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_4) == 0x0000D0, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_HasRoundStarted_RoundHasStarted) == 0x0000D1, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, Temp_int_Array_Index_Variable_1) == 0x0000D4, "Member 'B_GameMode_C_UnregisterPlayer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Player_State_1) == 0x0000E0, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_5) == 0x0000E8, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Array_AddUnique_ReturnValue) == 0x0000EC, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetWitchesCount_WitchesCount) == 0x0000F0, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetWitchesCount_WitchesCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x0000F1, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Add_ByteByte_ReturnValue) == 0x0000F2, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Map_Find_Value) == 0x0000F4, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Map_Find_ReturnValue) == 0x0000F8, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x0000F9, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Not_PreBool_ReturnValue) == 0x0000FA, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_BooleanAND_ReturnValue) == 0x0000FB, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_BooleanAND_ReturnValue_1) == 0x0000FC, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_BooleanAND_ReturnValue_2) == 0x0000FD, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameInstance_ReturnValue_1) == 0x000100, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameState_ReturnValue_5) == 0x000108, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameState_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000110, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_6) == 0x000118, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Game_State_3) == 0x000120, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Game_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_7) == 0x000128, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000129, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_Not_PreBool_ReturnValue_1) == 0x00012A, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_HasRoundStarted_RoundHasStarted_1) == 0x00012B, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_HasRoundStarted_RoundHasStarted_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_BooleanAND_ReturnValue_3) == 0x00012C, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_IsValid_ReturnValue) == 0x00012D, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_BooleanAND_ReturnValue_4) == 0x00012E, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetPlayerStateUniqueNetId_ReturnValue) == 0x000130, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetPlayerStateUniqueNetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000160, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000161, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_IsValid_ReturnValue_2) == 0x000162, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_IsValid_ReturnValue_3) == 0x000163, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Player_State_2) == 0x000168, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Player_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_8) == 0x000170, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, CallFunc_GetGameInstance_ReturnValue_2) == 0x000178, "Member 'B_GameMode_C_UnregisterPlayer::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000180, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UnregisterPlayer, K2Node_DynamicCast_bSuccess_9) == 0x000188, "Member 'B_GameMode_C_UnregisterPlayer::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.UpdateCustomGameMatchOptions
// 0x0038 (0x0038 - 0x0000)
struct B_GameMode_C_UpdateCustomGameMatchOptions final
{
public:
	class UB_GameInstance_C*                      Game_Instance;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ValidCustomMapCycleIsSelected_ValidSelection; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_UpdateCustomGameMatchOptions) == 0x000008, "Wrong alignment on B_GameMode_C_UpdateCustomGameMatchOptions");
static_assert(sizeof(B_GameMode_C_UpdateCustomGameMatchOptions) == 0x000038, "Wrong size on B_GameMode_C_UpdateCustomGameMatchOptions");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, Game_Instance) == 0x000000, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, CallFunc_GetGameInstance_ReturnValue_1) == 0x000020, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000028, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, CallFunc_ValidCustomMapCycleIsSelected_ValidSelection) == 0x000031, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::CallFunc_ValidCustomMapCycleIsSelected_ValidSelection' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateCustomGameMatchOptions, CallFunc_IsValid_ReturnValue) == 0x000032, "Member 'B_GameMode_C_UpdateCustomGameMatchOptions::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.ExecuteUbergraph_B_GameMode
// 0x0538 (0x0538 - 0x0000)
struct B_GameMode_C_ExecuteUbergraph_B_GameMode final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsConsoleBuild_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTrackingStarted_HasTrackingStarted;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_SessionName_1;                  // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bWasSuccessful_1;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName SessionName, bool bWasSuccessful)> K2Node_CreateDelegate_OutputDelegate;              // 0x005C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_3;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_Event_NewPlayer;                            // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x00B0(0x0020)()
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00E0(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00F0(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0138(0x0010)(ReferenceParm)
	class AController*                            K2Node_Event_ExitingController;                    // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0150(0x0010)()
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId_1; // 0x0180(0x0020)()
	class FString                                 CallFunc_UniqueNetIdToString_String_1;             // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRandomTimerForWaitState_IsRandom;    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOnlineSessionSubsystem*                CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UOnlineSessionSubsystemDestroySession*  CallFunc_DestroySession_ReturnValue;               // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPickupSpawnDelay_ReturnValue;          // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0230(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0240(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName SessionName, bool bWasSuccessful)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0248(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_4;               // 0x0258(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_4;               // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x026C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0280(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28A[0x2];                                      // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_SessionName;                    // 0x028C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bWasSuccessful;                 // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue_1;         // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLastSurvivingWitch_LastWitchExists;    // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       CallFunc_GetLastSurvivingWitch_LastWitchPlayer;    // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_AccountId;                      // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_RequestedAccountName;           // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UB_ServerClientConfig_C*                K2Node_CustomEvent_ClientConfig;                   // 0x02D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_AccountState;                   // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTearingDown_Result;                     // 0x02E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleShouldGameStart_IsReady;            // 0x02E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x02E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E7[0x1];                                      // 0x02E7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMasterServerSubsystem*                 CallFunc_GetEngineSubsystem_ReturnValue_2;         // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNewMasterServerManager*                CallFunc_GetNewMasterServerManager_ReturnValue;    // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x02F8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0310(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31A[0x2];                                      // 0x031A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x031C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_5;               // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_5;               // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMasterServerSubsystem*                 CallFunc_GetEngineSubsystem_ReturnValue_3;         // 0x0340(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNewMasterServerManager*                CallFunc_GetNewMasterServerManager_ReturnValue_1;  // 0x0348(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UInstanceManagerConnSubsystem*          CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0350(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x035A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35B[0x1];                                      // 0x035B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x035C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_6;               // 0x0370(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_6;               // 0x0378(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SeekGameState_C*                     K2Node_DynamicCast_AsB_Seek_Game_State;            // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0392(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0393(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOnlineMessageSanitizerSubsystem*       CallFunc_GetGameInstanceSubsystem_ReturnValue_2;   // 0x0398(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Temp_string_Variable;                              // 0x03A8(0x0010)(ReferenceParm)
	class UInstanceManagerConnSubsystem*          CallFunc_GetGameInstanceSubsystem_ReturnValue_3;   // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x03C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x03D0(0x0010)()
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item_1;                         // 0x03E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x03F8(0x0010)()
	bool                                          K2Node_CustomEvent_bSuccess;                       // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_CustomEvent_SanitizedMessages;              // 0x0410(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(const class FString& Message)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x0420(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_message_1;                      // 0x0430(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_3;          // 0x0440(0x0010)()
	TDelegate<void(int32 WitchItAccountId, int32 Code, const class FString& Message)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x0450(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_witchItAccountId;               // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_code;                           // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_message;                        // 0x0468(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue_4;         // 0x0478(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_7;               // 0x0480(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bSuccess, TArray<class FString>& SanitizedMessages)> K2Node_CreateDelegate_OutputDelegate_8;            // 0x0488(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_9;            // 0x049C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bSuccess_1;                     // 0x04AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AE[0x2];                                      // 0x04AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_CustomEvent_SanitizedMessages_1;            // 0x04B0(0x0010)(ConstParm, ReferenceParm)
	class FString                                 K2Node_CustomEvent_SourcePlayerName;               // 0x04C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_TargetPlayerName;               // 0x04D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue_5;         // 0x04E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_4;          // 0x04E8(0x0010)()
	TArray<class FString>                         K2Node_MakeArray_Array_1;                          // 0x04F8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_5;          // 0x0508(0x0010)()
	class UOnlineMessageSanitizerSubsystemSanitizeDisplayNames* CallFunc_SanitizeDisplayNames_ReturnValue;         // 0x0518(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x3];                                      // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bSuccess, TArray<class FString>& SanitizedMessages)> K2Node_CreateDelegate_OutputDelegate_10;           // 0x0524(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_ExecuteUbergraph_B_GameMode) == 0x000008, "Wrong alignment on B_GameMode_C_ExecuteUbergraph_B_GameMode");
static_assert(sizeof(B_GameMode_C_ExecuteUbergraph_B_GameMode) == 0x000538, "Wrong size on B_GameMode_C_ExecuteUbergraph_B_GameMode");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, EntryPoint) == 0x000000, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsConsoleBuild_ReturnValue) == 0x000004, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsConsoleBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_State) == 0x000010, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameState_ReturnValue_1) == 0x000020, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_HasTrackingStarted_HasTrackingStarted) == 0x000028, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_HasTrackingStarted_HasTrackingStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_State_1) == 0x000030, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_SessionName_1) == 0x00003C, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_SessionName_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_bWasSuccessful_1) == 0x000044, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_bWasSuccessful_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameInstance_ReturnValue) == 0x000048, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_Instance) == 0x000050, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate) == 0x00005C, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameState_ReturnValue_2) == 0x000070, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameState_ReturnValue_3) == 0x000078, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_State_2) == 0x000080, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_3) == 0x000088, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_State_3) == 0x000090, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_4) == 0x000098, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_Event_NewPlayer) == 0x0000A0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_Event_NewPlayer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_HasAuthority_ReturnValue) == 0x0000A8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x0000B0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_UniqueNetIdToString_String) == 0x0000D0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Conv_StringToText_ReturnValue) == 0x0000E0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_MakeStruct_FormatArgumentData) == 0x0000F0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_MakeArray_Array) == 0x000138, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_Event_ExitingController) == 0x000148, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_Event_ExitingController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Format_ReturnValue) == 0x000150, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsPlayer_Controller) == 0x000160, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_5) == 0x000168, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Player_State) == 0x000170, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_6) == 0x000178, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId_1) == 0x000180, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_UniqueNetIdToString_String_1) == 0x0001A0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_UniqueNetIdToString_String_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_Event_DeltaSeconds) == 0x0001B0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Concat_StrStr_ReturnValue) == 0x0001B8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_CheckRandomTimerForWaitState_IsRandom) == 0x0001C8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_CheckRandomTimerForWaitState_IsRandom' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0001D0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0001E0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsDedicatedServer_ReturnValue) == 0x0001F0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x0001F8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameInstance_ReturnValue_1) == 0x000200, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_DestroySession_ReturnValue) == 0x000208, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_DestroySession_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000210, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_7) == 0x000218, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsValid_ReturnValue) == 0x000219, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000220, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetPickupSpawnDelay_ReturnValue) == 0x000228, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetPickupSpawnDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_1) == 0x000230, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000240, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_2) == 0x000248, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameState_ReturnValue_4) == 0x000258, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameState_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_State_4) == 0x000260, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_State_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_8) == 0x000268, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_3) == 0x00026C, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000280, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_HasAuthority_ReturnValue_1) == 0x000288, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000289, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_SessionName) == 0x00028C, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_SessionName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_bWasSuccessful) == 0x000294, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_bWasSuccessful' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000298, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetEngineSubsystem_ReturnValue_1) == 0x0002A0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetEngineSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, Temp_real_Variable) == 0x0002A8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetLastSurvivingWitch_LastWitchExists) == 0x0002B0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetLastSurvivingWitch_LastWitchExists' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetLastSurvivingWitch_LastWitchPlayer) == 0x0002B8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetLastSurvivingWitch_LastWitchPlayer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_AccountId) == 0x0002C0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_AccountId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_RequestedAccountName) == 0x0002C8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_RequestedAccountName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_ClientConfig) == 0x0002D8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_ClientConfig' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_AccountState) == 0x0002E0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_AccountState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsTearingDown_Result) == 0x0002E4, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsTearingDown_Result' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_HandleShouldGameStart_IsReady) == 0x0002E5, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_HandleShouldGameStart_IsReady' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x0002E6, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetEngineSubsystem_ReturnValue_2) == 0x0002E8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetEngineSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetNewMasterServerManager_ReturnValue) == 0x0002F0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetNewMasterServerManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_4) == 0x0002F8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsValid_ReturnValue_1) == 0x000308, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000310, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, Temp_bool_Variable) == 0x000318, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_Event_EndPlayReason) == 0x000319, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, Temp_name_Variable) == 0x00031C, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameState_ReturnValue_5) == 0x000328, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameState_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_State_5) == 0x000330, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_State_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_9) == 0x000338, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetEngineSubsystem_ReturnValue_3) == 0x000340, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetEngineSubsystem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetNewMasterServerManager_ReturnValue_1) == 0x000348, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetNewMasterServerManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000350, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsValid_ReturnValue_2) == 0x000358, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsValid_ReturnValue_3) == 0x000359, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x00035A, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_5) == 0x00035C, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameState_ReturnValue_6) == 0x000370, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameState_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Game_State_6) == 0x000378, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Game_State_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_10) == 0x000380, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_AsB_Seek_Game_State) == 0x000388, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_AsB_Seek_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_DynamicCast_bSuccess_11) == 0x000390, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000391, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000392, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000393, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameInstanceSubsystem_ReturnValue_2) == 0x000398, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameInstanceSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, Temp_bool_Variable_1) == 0x0003A0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, Temp_string_Variable) == 0x0003A8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameInstanceSubsystem_ReturnValue_3) == 0x0003B8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameInstanceSubsystem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Array_Get_Item) == 0x0003C0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0003D0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsValid_ReturnValue_4) == 0x0003E0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Array_Get_Item_1) == 0x0003E8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Conv_StringToText_ReturnValue_2) == 0x0003F8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_bSuccess) == 0x000408, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_SanitizedMessages) == 0x000410, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_SanitizedMessages' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_6) == 0x000420, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_message_1) == 0x000430, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_message_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Conv_StringToText_ReturnValue_3) == 0x000440, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Conv_StringToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_7) == 0x000450, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_witchItAccountId) == 0x000460, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_witchItAccountId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_code) == 0x000464, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_code' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_message) == 0x000468, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_message' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetEngineSubsystem_ReturnValue_4) == 0x000478, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetEngineSubsystem_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetGameState_ReturnValue_7) == 0x000480, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetGameState_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_8) == 0x000488, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Array_Length_ReturnValue) == 0x000498, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_9) == 0x00049C, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0004AC, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_bSuccess_1) == 0x0004AD, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_SanitizedMessages_1) == 0x0004B0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_SanitizedMessages_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_SourcePlayerName) == 0x0004C0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_SourcePlayerName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CustomEvent_TargetPlayerName) == 0x0004D0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CustomEvent_TargetPlayerName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_GetEngineSubsystem_ReturnValue_5) == 0x0004E0, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_GetEngineSubsystem_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Conv_StringToText_ReturnValue_4) == 0x0004E8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Conv_StringToText_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_MakeArray_Array_1) == 0x0004F8, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_Conv_StringToText_ReturnValue_5) == 0x000508, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_Conv_StringToText_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_SanitizeDisplayNames_ReturnValue) == 0x000518, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_SanitizeDisplayNames_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_IsValid_ReturnValue_5) == 0x000520, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, K2Node_CreateDelegate_OutputDelegate_10) == 0x000524, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ExecuteUbergraph_B_GameMode, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000534, "Member 'B_GameMode_C_ExecuteUbergraph_B_GameMode::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.PlayerIDReceived
// 0x0008 (0x0008 - 0x0000)
struct B_GameMode_C_PlayerIDReceived final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_PlayerIDReceived) == 0x000008, "Wrong alignment on B_GameMode_C_PlayerIDReceived");
static_assert(sizeof(B_GameMode_C_PlayerIDReceived) == 0x000008, "Wrong size on B_GameMode_C_PlayerIDReceived");
static_assert(offsetof(B_GameMode_C_PlayerIDReceived, PlayerState) == 0x000000, "Member 'B_GameMode_C_PlayerIDReceived::PlayerState' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnPlaceableStatic
// 0x00C0 (0x00C0 - 0x0000)
struct B_GameMode_C_SpawnPlaceableStatic final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableStaticProp_C*              SpawnedActor;                                      // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WeathervaneClass;                                  // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_WeatherVane_C*                       CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableStaticProp_C*              CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_CreativeGameMode_C*                  K2Node_DynamicCast_AsB_Creative_Game_Mode;         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnPlaceableStatic) == 0x000010, "Wrong alignment on B_GameMode_C_SpawnPlaceableStatic");
static_assert(sizeof(B_GameMode_C_SpawnPlaceableStatic) == 0x0000C0, "Wrong size on B_GameMode_C_SpawnPlaceableStatic");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, Class_0) == 0x000000, "Member 'B_GameMode_C_SpawnPlaceableStatic::Class_0' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, Transform) == 0x000010, "Member 'B_GameMode_C_SpawnPlaceableStatic::Transform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, SpawnedActor) == 0x000070, "Member 'B_GameMode_C_SpawnPlaceableStatic::SpawnedActor' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, WeathervaneClass) == 0x000078, "Member 'B_GameMode_C_SpawnPlaceableStatic::WeathervaneClass' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'B_GameMode_C_SpawnPlaceableStatic::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'B_GameMode_C_SpawnPlaceableStatic::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000090, "Member 'B_GameMode_C_SpawnPlaceableStatic::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000098, "Member 'B_GameMode_C_SpawnPlaceableStatic::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, CallFunc_ClassIsChildOf_ReturnValue) == 0x0000A0, "Member 'B_GameMode_C_SpawnPlaceableStatic::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, CallFunc_Not_PreBool_ReturnValue) == 0x0000A1, "Member 'B_GameMode_C_SpawnPlaceableStatic::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, K2Node_DynamicCast_AsB_Creative_Game_Mode) == 0x0000A8, "Member 'B_GameMode_C_SpawnPlaceableStatic::K2Node_DynamicCast_AsB_Creative_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableStatic, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'B_GameMode_C_SpawnPlaceableStatic::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnSwitch
// 0x0090 (0x0090 - 0x0000)
struct B_GameMode_C_SpawnSwitch final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BreaksAfterUse;                                    // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Switch_C*                           SpawnedActor;                                      // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Switch_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnSwitch) == 0x000010, "Wrong alignment on B_GameMode_C_SpawnSwitch");
static_assert(sizeof(B_GameMode_C_SpawnSwitch) == 0x000090, "Wrong size on B_GameMode_C_SpawnSwitch");
static_assert(offsetof(B_GameMode_C_SpawnSwitch, Class_0) == 0x000000, "Member 'B_GameMode_C_SpawnSwitch::Class_0' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnSwitch, Transform) == 0x000010, "Member 'B_GameMode_C_SpawnSwitch::Transform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnSwitch, BreaksAfterUse) == 0x000070, "Member 'B_GameMode_C_SpawnSwitch::BreaksAfterUse' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnSwitch, SpawnedActor) == 0x000078, "Member 'B_GameMode_C_SpawnSwitch::SpawnedActor' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnSwitch, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'B_GameMode_C_SpawnSwitch::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnSwitch, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'B_GameMode_C_SpawnSwitch::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnProp
// 0x0090 (0x0090 - 0x0000)
struct B_GameMode_C_SpawnProp final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAwake;                                        // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFrozen;                                          // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    SpawnedActor;                                      // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnProp) == 0x000010, "Wrong alignment on B_GameMode_C_SpawnProp");
static_assert(sizeof(B_GameMode_C_SpawnProp) == 0x000090, "Wrong size on B_GameMode_C_SpawnProp");
static_assert(offsetof(B_GameMode_C_SpawnProp, Class_0) == 0x000000, "Member 'B_GameMode_C_SpawnProp::Class_0' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnProp, Transform) == 0x000010, "Member 'B_GameMode_C_SpawnProp::Transform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnProp, StartAwake) == 0x000070, "Member 'B_GameMode_C_SpawnProp::StartAwake' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnProp, IsFrozen) == 0x000071, "Member 'B_GameMode_C_SpawnProp::IsFrozen' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnProp, SpawnedActor) == 0x000078, "Member 'B_GameMode_C_SpawnProp::SpawnedActor' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnProp, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'B_GameMode_C_SpawnProp::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnProp, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'B_GameMode_C_SpawnProp::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnPlaceableLight
// 0x00B0 (0x00B0 - 0x0000)
struct B_GameMode_C_SpawnPlaceableLight final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Color;                                             // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activated;                                         // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableLight_C*                   SpawnedActor;                                      // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableLight_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnPlaceableLight) == 0x000010, "Wrong alignment on B_GameMode_C_SpawnPlaceableLight");
static_assert(sizeof(B_GameMode_C_SpawnPlaceableLight) == 0x0000B0, "Wrong size on B_GameMode_C_SpawnPlaceableLight");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableLight, Class_0) == 0x000000, "Member 'B_GameMode_C_SpawnPlaceableLight::Class_0' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableLight, Transform) == 0x000010, "Member 'B_GameMode_C_SpawnPlaceableLight::Transform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableLight, Color) == 0x000070, "Member 'B_GameMode_C_SpawnPlaceableLight::Color' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableLight, Activated) == 0x000088, "Member 'B_GameMode_C_SpawnPlaceableLight::Activated' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableLight, SpawnedActor) == 0x000090, "Member 'B_GameMode_C_SpawnPlaceableLight::SpawnedActor' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableLight, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000098, "Member 'B_GameMode_C_SpawnPlaceableLight::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnPlaceableLight, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000A0, "Member 'B_GameMode_C_SpawnPlaceableLight::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnActionProp
// 0x0090 (0x0090 - 0x0000)
struct B_GameMode_C_SpawnActionProp final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAwake;                                        // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFrozen;                                          // 0x0071(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activated;                                         // 0x0072(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    SpawnedActor;                                      // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshActionProp_C*              CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnActionProp) == 0x000010, "Wrong alignment on B_GameMode_C_SpawnActionProp");
static_assert(sizeof(B_GameMode_C_SpawnActionProp) == 0x000090, "Wrong size on B_GameMode_C_SpawnActionProp");
static_assert(offsetof(B_GameMode_C_SpawnActionProp, Class_0) == 0x000000, "Member 'B_GameMode_C_SpawnActionProp::Class_0' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionProp, Transform) == 0x000010, "Member 'B_GameMode_C_SpawnActionProp::Transform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionProp, StartAwake) == 0x000070, "Member 'B_GameMode_C_SpawnActionProp::StartAwake' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionProp, IsFrozen) == 0x000071, "Member 'B_GameMode_C_SpawnActionProp::IsFrozen' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionProp, Activated) == 0x000072, "Member 'B_GameMode_C_SpawnActionProp::Activated' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionProp, SpawnedActor) == 0x000078, "Member 'B_GameMode_C_SpawnActionProp::SpawnedActor' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionProp, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'B_GameMode_C_SpawnActionProp::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionProp, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'B_GameMode_C_SpawnActionProp::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnActionPlaceableStatic
// 0x0090 (0x0090 - 0x0000)
struct B_GameMode_C_SpawnActionPlaceableStatic final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Activated;                                         // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceableStaticProp_C*              SpawnedActor;                                      // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_ActionPlacable_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnActionPlaceableStatic) == 0x000010, "Wrong alignment on B_GameMode_C_SpawnActionPlaceableStatic");
static_assert(sizeof(B_GameMode_C_SpawnActionPlaceableStatic) == 0x000090, "Wrong size on B_GameMode_C_SpawnActionPlaceableStatic");
static_assert(offsetof(B_GameMode_C_SpawnActionPlaceableStatic, Class_0) == 0x000000, "Member 'B_GameMode_C_SpawnActionPlaceableStatic::Class_0' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionPlaceableStatic, Transform) == 0x000010, "Member 'B_GameMode_C_SpawnActionPlaceableStatic::Transform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionPlaceableStatic, Activated) == 0x000070, "Member 'B_GameMode_C_SpawnActionPlaceableStatic::Activated' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionPlaceableStatic, SpawnedActor) == 0x000078, "Member 'B_GameMode_C_SpawnActionPlaceableStatic::SpawnedActor' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionPlaceableStatic, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000080, "Member 'B_GameMode_C_SpawnActionPlaceableStatic::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnActionPlaceableStatic, CallFunc_FinishSpawningActor_ReturnValue) == 0x000088, "Member 'B_GameMode_C_SpawnActionPlaceableStatic::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleReceivedAccountInfo
// 0x01C8 (0x01C8 - 0x0000)
struct B_GameMode_C_HandleReceivedAccountInfo final
{
public:
	int32                                         AccountId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProductUserId;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UB_ServerClientConfig_C*                AccountClientConfig;                               // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         AccountState;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBanned;                                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0090(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00A0(0x0048)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00F0(0x0048)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0140(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0188(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0198(0x0010)()
	bool                                          CallFunc_IsBitSet_ReturnValue;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue_1;         // 0x01C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleReceivedAccountInfo) == 0x000008, "Wrong alignment on B_GameMode_C_HandleReceivedAccountInfo");
static_assert(sizeof(B_GameMode_C_HandleReceivedAccountInfo) == 0x0001C8, "Wrong size on B_GameMode_C_HandleReceivedAccountInfo");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, AccountId) == 0x000000, "Member 'B_GameMode_C_HandleReceivedAccountInfo::AccountId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, ProductUserId) == 0x000008, "Member 'B_GameMode_C_HandleReceivedAccountInfo::ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, AccountClientConfig) == 0x000018, "Member 'B_GameMode_C_HandleReceivedAccountInfo::AccountClientConfig' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, AccountState) == 0x000020, "Member 'B_GameMode_C_HandleReceivedAccountInfo::AccountState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, bIsBanned) == 0x000024, "Member 'B_GameMode_C_HandleReceivedAccountInfo::bIsBanned' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Conv_IntToString_ReturnValue) == 0x000028, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000038, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000048, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000070, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000080, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Conv_StringToText_ReturnValue) == 0x000090, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, K2Node_MakeStruct_FormatArgumentData) == 0x0000A0, "Member 'B_GameMode_C_HandleReceivedAccountInfo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Conv_IntToInt64_ReturnValue) == 0x0000E8, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000F0, "Member 'B_GameMode_C_HandleReceivedAccountInfo::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000138, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, K2Node_MakeStruct_FormatArgumentData_2) == 0x000140, "Member 'B_GameMode_C_HandleReceivedAccountInfo::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, K2Node_MakeArray_Array) == 0x000188, "Member 'B_GameMode_C_HandleReceivedAccountInfo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Format_ReturnValue) == 0x000198, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_IsBitSet_ReturnValue) == 0x0001A8, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_IsBitSet_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_Conv_TextToString_ReturnValue) == 0x0001B0, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleReceivedAccountInfo, CallFunc_GetEngineSubsystem_ReturnValue_1) == 0x0001C0, "Member 'B_GameMode_C_HandleReceivedAccountInfo::CallFunc_GetEngineSubsystem_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.TryIncreaseTimerIfMapVoteScreenNecessary
// 0x0020 (0x0020 - 0x0000)
struct B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary) == 0x000008, "Wrong alignment on B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary");
static_assert(sizeof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary) == 0x000020, "Wrong size on B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary");
static_assert(offsetof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary, K2Node_DynamicCast_AsB_Game_State) == 0x000008, "Member 'B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000011, "Member 'B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'B_GameMode_C_TryIncreaseTimerIfMapVoteScreenNecessary::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.KickPlayer
// 0x0070 (0x0070 - 0x0000)
struct B_GameMode_C_KickPlayer final
{
public:
	int32                                         WitchItAccountId;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Code;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class APlayerController*                      FoundPlayerController;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           FoundPlayerState;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0010)()
	class APlayerState*                           CallFunc_FindPlayerStateByWitchItAccountId_Out;    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_FindPlayerControllerByPlayerState_Out;    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_KickPlayer) == 0x000008, "Wrong alignment on B_GameMode_C_KickPlayer");
static_assert(sizeof(B_GameMode_C_KickPlayer) == 0x000070, "Wrong size on B_GameMode_C_KickPlayer");
static_assert(offsetof(B_GameMode_C_KickPlayer, WitchItAccountId) == 0x000000, "Member 'B_GameMode_C_KickPlayer::WitchItAccountId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, Code) == 0x000004, "Member 'B_GameMode_C_KickPlayer::Code' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, Reason) == 0x000008, "Member 'B_GameMode_C_KickPlayer::Reason' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, FoundPlayerController) == 0x000018, "Member 'B_GameMode_C_KickPlayer::FoundPlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, FoundPlayerState) == 0x000020, "Member 'B_GameMode_C_KickPlayer::FoundPlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'B_GameMode_C_KickPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'B_GameMode_C_KickPlayer::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, CallFunc_FindPlayerStateByWitchItAccountId_Out) == 0x000040, "Member 'B_GameMode_C_KickPlayer::CallFunc_FindPlayerStateByWitchItAccountId_Out' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, CallFunc_FindPlayerControllerByPlayerState_Out) == 0x000048, "Member 'B_GameMode_C_KickPlayer::CallFunc_FindPlayerControllerByPlayerState_Out' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'B_GameMode_C_KickPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, K2Node_DynamicCast_AsB_Player_Controller) == 0x000058, "Member 'B_GameMode_C_KickPlayer::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'B_GameMode_C_KickPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KickPlayer, CallFunc_GetGameMode_ReturnValue) == 0x000068, "Member 'B_GameMode_C_KickPlayer::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SetGameIsUsingCustomRules
// 0x0001 (0x0001 - 0x0000)
struct B_GameMode_C_SetGameIsUsingCustomRules final
{
public:
	bool                                          UsingCustomRules;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SetGameIsUsingCustomRules) == 0x000001, "Wrong alignment on B_GameMode_C_SetGameIsUsingCustomRules");
static_assert(sizeof(B_GameMode_C_SetGameIsUsingCustomRules) == 0x000001, "Wrong size on B_GameMode_C_SetGameIsUsingCustomRules");
static_assert(offsetof(B_GameMode_C_SetGameIsUsingCustomRules, UsingCustomRules) == 0x000000, "Member 'B_GameMode_C_SetGameIsUsingCustomRules::UsingCustomRules' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.CanJoinAsMidgameHunter
// 0x0030 (0x0030 - 0x0000)
struct B_GameMode_C_CanJoinAsMidgameHunter final
{
public:
	bool                                          JoinAsHunter;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SeekGameMode_C*                      K2Node_DynamicCast_AsB_Seek_Game_Mode;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_CanJoinAsMidgameHunter) == 0x000008, "Wrong alignment on B_GameMode_C_CanJoinAsMidgameHunter");
static_assert(sizeof(B_GameMode_C_CanJoinAsMidgameHunter) == 0x000030, "Wrong size on B_GameMode_C_CanJoinAsMidgameHunter");
static_assert(offsetof(B_GameMode_C_CanJoinAsMidgameHunter, JoinAsHunter) == 0x000000, "Member 'B_GameMode_C_CanJoinAsMidgameHunter::JoinAsHunter' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CanJoinAsMidgameHunter, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_CanJoinAsMidgameHunter::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CanJoinAsMidgameHunter, K2Node_DynamicCast_AsB_Game_State) == 0x000010, "Member 'B_GameMode_C_CanJoinAsMidgameHunter::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CanJoinAsMidgameHunter, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_CanJoinAsMidgameHunter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CanJoinAsMidgameHunter, CallFunc_HasRoundStarted_RoundHasStarted) == 0x000019, "Member 'B_GameMode_C_CanJoinAsMidgameHunter::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CanJoinAsMidgameHunter, K2Node_DynamicCast_AsB_Seek_Game_Mode) == 0x000020, "Member 'B_GameMode_C_CanJoinAsMidgameHunter::K2Node_DynamicCast_AsB_Seek_Game_Mode' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CanJoinAsMidgameHunter, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_GameMode_C_CanJoinAsMidgameHunter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CanJoinAsMidgameHunter, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'B_GameMode_C_CanJoinAsMidgameHunter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SendServerInfoToClient
// 0x0038 (0x0038 - 0x0000)
struct B_GameMode_C_SendServerInfoToClient final
{
public:
	class APlayerController*                      JoiningPlayerController;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDeveloperModeSubsystem*                CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SendServerInfoToClient) == 0x000008, "Wrong alignment on B_GameMode_C_SendServerInfoToClient");
static_assert(sizeof(B_GameMode_C_SendServerInfoToClient) == 0x000038, "Wrong size on B_GameMode_C_SendServerInfoToClient");
static_assert(offsetof(B_GameMode_C_SendServerInfoToClient, JoiningPlayerController) == 0x000000, "Member 'B_GameMode_C_SendServerInfoToClient::JoiningPlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SendServerInfoToClient, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_GameMode_C_SendServerInfoToClient::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SendServerInfoToClient, K2Node_DynamicCast_AsB_Player_Controller) == 0x000010, "Member 'B_GameMode_C_SendServerInfoToClient::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SendServerInfoToClient, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_SendServerInfoToClient::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SendServerInfoToClient, K2Node_DynamicCast_AsB_Game_Instance) == 0x000020, "Member 'B_GameMode_C_SendServerInfoToClient::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SendServerInfoToClient, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_GameMode_C_SendServerInfoToClient::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SendServerInfoToClient, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000030, "Member 'B_GameMode_C_SendServerInfoToClient::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleShouldGameStart
// 0x0002 (0x0002 - 0x0000)
struct B_GameMode_C_HandleShouldGameStart final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfAllPlayersAreReady_IsReady;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleShouldGameStart) == 0x000001, "Wrong alignment on B_GameMode_C_HandleShouldGameStart");
static_assert(sizeof(B_GameMode_C_HandleShouldGameStart) == 0x000002, "Wrong size on B_GameMode_C_HandleShouldGameStart");
static_assert(offsetof(B_GameMode_C_HandleShouldGameStart, IsReady) == 0x000000, "Member 'B_GameMode_C_HandleShouldGameStart::IsReady' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleShouldGameStart, CallFunc_CheckIfAllPlayersAreReady_IsReady) == 0x000001, "Member 'B_GameMode_C_HandleShouldGameStart::CallFunc_CheckIfAllPlayersAreReady_IsReady' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.AddMapsToVoteBySize
// 0x0128 (0x0128 - 0x0000)
struct B_GameMode_C_AddMapsToVoteBySize final
{
public:
	E_MapSize                                     TargetSize;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              MapToIgnore;                                       // 0x0008(0x0040)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         LastIndex;                                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              RandomMap;                                         // 0x0050(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FSMapData>                      Maps;                                              // 0x0090(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSMapData>                      CallFunc_GetMapVoteMapsBySize_TargetMaps;          // 0x00C0(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              CallFunc_Array_Get_Item;                           // 0x00E8(0x0040)(HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_AddMapsToVoteBySize) == 0x000008, "Wrong alignment on B_GameMode_C_AddMapsToVoteBySize");
static_assert(sizeof(B_GameMode_C_AddMapsToVoteBySize) == 0x000128, "Wrong size on B_GameMode_C_AddMapsToVoteBySize");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, TargetSize) == 0x000000, "Member 'B_GameMode_C_AddMapsToVoteBySize::TargetSize' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, MapToIgnore) == 0x000008, "Member 'B_GameMode_C_AddMapsToVoteBySize::MapToIgnore' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, LastIndex) == 0x000048, "Member 'B_GameMode_C_AddMapsToVoteBySize::LastIndex' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, RandomMap) == 0x000050, "Member 'B_GameMode_C_AddMapsToVoteBySize::RandomMap' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, Maps) == 0x000090, "Member 'B_GameMode_C_AddMapsToVoteBySize::Maps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, Temp_int_Variable) == 0x0000A0, "Member 'B_GameMode_C_AddMapsToVoteBySize::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_Add_IntInt_ReturnValue) == 0x0000A4, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_GetGameInstance_ReturnValue) == 0x0000A8, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, K2Node_DynamicCast_AsB_Game_Instance) == 0x0000B0, "Member 'B_GameMode_C_AddMapsToVoteBySize::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'B_GameMode_C_AddMapsToVoteBySize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B9, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_GetMapVoteMapsBySize_TargetMaps) == 0x0000C0, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_GetMapVoteMapsBySize_TargetMaps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_Array_RemoveItem_ReturnValue) == 0x0000D0, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_Array_Add_ReturnValue) == 0x0000D4, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x0000DC, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_RandomInteger_ReturnValue) == 0x0000E0, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_AddMapsToVoteBySize, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'B_GameMode_C_AddMapsToVoteBySize::CallFunc_Array_Get_Item' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.TurnPlayerIntoSpectator
// 0x0018 (0x0018 - 0x0000)
struct B_GameMode_C_TurnPlayerIntoSpectator final
{
public:
	class AController*                            PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Spectator_C*                         NewPawn;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_SpawnNewPlayerPawn_PlayerPawn;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_TurnPlayerIntoSpectator) == 0x000008, "Wrong alignment on B_GameMode_C_TurnPlayerIntoSpectator");
static_assert(sizeof(B_GameMode_C_TurnPlayerIntoSpectator) == 0x000018, "Wrong size on B_GameMode_C_TurnPlayerIntoSpectator");
static_assert(offsetof(B_GameMode_C_TurnPlayerIntoSpectator, PlayerController) == 0x000000, "Member 'B_GameMode_C_TurnPlayerIntoSpectator::PlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TurnPlayerIntoSpectator, NewPawn) == 0x000008, "Member 'B_GameMode_C_TurnPlayerIntoSpectator::NewPawn' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TurnPlayerIntoSpectator, CallFunc_SpawnNewPlayerPawn_PlayerPawn) == 0x000010, "Member 'B_GameMode_C_TurnPlayerIntoSpectator::CallFunc_SpawnNewPlayerPawn_PlayerPawn' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleEndMatchForQuests
// 0x0038 (0x0038 - 0x0000)
struct B_GameMode_C_HandleEndMatchForQuests final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInWinnerTeam_InWinnerTeam;        // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldPostQuestProgressForPlayer_Result;  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleEndMatchForQuests) == 0x000008, "Wrong alignment on B_GameMode_C_HandleEndMatchForQuests");
static_assert(sizeof(B_GameMode_C_HandleEndMatchForQuests) == 0x000038, "Wrong size on B_GameMode_C_HandleEndMatchForQuests");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_GameMode_C_HandleEndMatchForQuests::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_GameMode_C_HandleEndMatchForQuests::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_GameMode_C_HandleEndMatchForQuests::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_GameMode_C_HandleEndMatchForQuests::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'B_GameMode_C_HandleEndMatchForQuests::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_GameMode_C_HandleEndMatchForQuests::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, CallFunc_IsPlayerInWinnerTeam_InWinnerTeam) == 0x000029, "Member 'B_GameMode_C_HandleEndMatchForQuests::CallFunc_IsPlayerInWinnerTeam_InWinnerTeam' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, CallFunc_ShouldPostQuestProgressForPlayer_Result) == 0x00002A, "Member 'B_GameMode_C_HandleEndMatchForQuests::CallFunc_ShouldPostQuestProgressForPlayer_Result' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'B_GameMode_C_HandleEndMatchForQuests::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'B_GameMode_C_HandleEndMatchForQuests::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForQuests, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'B_GameMode_C_HandleEndMatchForQuests::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.Increase Quest Progress for Player Unchecked
// 0x0068 (0x0068 - 0x0000)
struct B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked final
{
public:
	class AB_PlayerState_C*                       Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         ObjectiveId;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Int64Int64_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked) == 0x000008, "Wrong alignment on B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked");
static_assert(sizeof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked) == 0x000068, "Wrong size on B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, Player) == 0x000000, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::Player' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, ObjectiveId) == 0x000008, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::ObjectiveId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, Value) == 0x000010, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::Value' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, CallFunc_GetGameInstance_ReturnValue) == 0x000018, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, K2Node_DynamicCast_AsB_Game_Instance) == 0x000028, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, CallFunc_Conv_IntToString_ReturnValue) == 0x000038, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, CallFunc_NotEqual_Int64Int64_ReturnValue) == 0x000048, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::CallFunc_NotEqual_Int64Int64_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000060, "Member 'B_GameMode_C_Increase_Quest_Progress_for_Player_Unchecked::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.PostQuestProgressForPlayer
// 0x0028 (0x0028 - 0x0000)
struct B_GameMode_C_PostQuestProgressForPlayer final
{
public:
	class AB_PlayerState_C*                       Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         ObjectiveId;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldPostQuestProgress_Result;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldPostQuestProgressForPlayer_Result;  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_PostQuestProgressForPlayer) == 0x000008, "Wrong alignment on B_GameMode_C_PostQuestProgressForPlayer");
static_assert(sizeof(B_GameMode_C_PostQuestProgressForPlayer) == 0x000028, "Wrong size on B_GameMode_C_PostQuestProgressForPlayer");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayer, Player) == 0x000000, "Member 'B_GameMode_C_PostQuestProgressForPlayer::Player' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayer, ObjectiveId) == 0x000008, "Member 'B_GameMode_C_PostQuestProgressForPlayer::ObjectiveId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayer, Value) == 0x000010, "Member 'B_GameMode_C_PostQuestProgressForPlayer::Value' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayer, CallFunc_ShouldPostQuestProgress_Result) == 0x000020, "Member 'B_GameMode_C_PostQuestProgressForPlayer::CallFunc_ShouldPostQuestProgress_Result' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayer, CallFunc_ShouldPostQuestProgressForPlayer_Result) == 0x000021, "Member 'B_GameMode_C_PostQuestProgressForPlayer::CallFunc_ShouldPostQuestProgressForPlayer_Result' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.PostQuestProgressForPlayerUnchecked
// 0x0040 (0x0040 - 0x0000)
struct B_GameMode_C_PostQuestProgressForPlayerUnchecked final
{
public:
	class AB_PlayerState_C*                       Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         ObjectiveId;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Int64Int64_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_PostQuestProgressForPlayerUnchecked) == 0x000008, "Wrong alignment on B_GameMode_C_PostQuestProgressForPlayerUnchecked");
static_assert(sizeof(B_GameMode_C_PostQuestProgressForPlayerUnchecked) == 0x000040, "Wrong size on B_GameMode_C_PostQuestProgressForPlayerUnchecked");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayerUnchecked, Player) == 0x000000, "Member 'B_GameMode_C_PostQuestProgressForPlayerUnchecked::Player' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayerUnchecked, ObjectiveId) == 0x000008, "Member 'B_GameMode_C_PostQuestProgressForPlayerUnchecked::ObjectiveId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayerUnchecked, Value) == 0x000010, "Member 'B_GameMode_C_PostQuestProgressForPlayerUnchecked::Value' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayerUnchecked, CallFunc_GetGameInstance_ReturnValue) == 0x000020, "Member 'B_GameMode_C_PostQuestProgressForPlayerUnchecked::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayerUnchecked, CallFunc_NotEqual_Int64Int64_ReturnValue) == 0x000028, "Member 'B_GameMode_C_PostQuestProgressForPlayerUnchecked::CallFunc_NotEqual_Int64Int64_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayerUnchecked, K2Node_DynamicCast_AsB_Game_Instance) == 0x000030, "Member 'B_GameMode_C_PostQuestProgressForPlayerUnchecked::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayerUnchecked, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_GameMode_C_PostQuestProgressForPlayerUnchecked::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostQuestProgressForPlayerUnchecked, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000039, "Member 'B_GameMode_C_PostQuestProgressForPlayerUnchecked::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.ShouldPostQuestProgressForPlayer
// 0x0010 (0x0010 - 0x0000)
struct B_GameMode_C_ShouldPostQuestProgressForPlayer final
{
public:
	class AB_PlayerState_C*                       Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_ShouldPostQuestProgressForPlayer) == 0x000008, "Wrong alignment on B_GameMode_C_ShouldPostQuestProgressForPlayer");
static_assert(sizeof(B_GameMode_C_ShouldPostQuestProgressForPlayer) == 0x000010, "Wrong size on B_GameMode_C_ShouldPostQuestProgressForPlayer");
static_assert(offsetof(B_GameMode_C_ShouldPostQuestProgressForPlayer, Player) == 0x000000, "Member 'B_GameMode_C_ShouldPostQuestProgressForPlayer::Player' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ShouldPostQuestProgressForPlayer, Result) == 0x000008, "Member 'B_GameMode_C_ShouldPostQuestProgressForPlayer::Result' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.ShouldPostQuestProgress
// 0x0020 (0x0020 - 0x0000)
struct B_GameMode_C_ShouldPostQuestProgress final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDeveloperModeSubsystem*                CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_ShouldPostQuestProgress) == 0x000008, "Wrong alignment on B_GameMode_C_ShouldPostQuestProgress");
static_assert(sizeof(B_GameMode_C_ShouldPostQuestProgress) == 0x000020, "Wrong size on B_GameMode_C_ShouldPostQuestProgress");
static_assert(offsetof(B_GameMode_C_ShouldPostQuestProgress, Result) == 0x000000, "Member 'B_GameMode_C_ShouldPostQuestProgress::Result' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ShouldPostQuestProgress, CallFunc_IsDedicatedServer_ReturnValue) == 0x000001, "Member 'B_GameMode_C_ShouldPostQuestProgress::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ShouldPostQuestProgress, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_ShouldPostQuestProgress::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ShouldPostQuestProgress, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'B_GameMode_C_ShouldPostQuestProgress::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ShouldPostQuestProgress, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000014, "Member 'B_GameMode_C_ShouldPostQuestProgress::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ShouldPostQuestProgress, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000018, "Member 'B_GameMode_C_ShouldPostQuestProgress::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.PostWinObjectiveForPlayer
// 0x0030 (0x0030 - 0x0000)
struct B_GameMode_C_PostWinObjectiveForPlayer final
{
public:
	class AB_PlayerState_C*                       Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_GetWinObjectiveId_ObjectiveId;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Int64Int64_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_PostWinObjectiveForPlayer) == 0x000008, "Wrong alignment on B_GameMode_C_PostWinObjectiveForPlayer");
static_assert(sizeof(B_GameMode_C_PostWinObjectiveForPlayer) == 0x000030, "Wrong size on B_GameMode_C_PostWinObjectiveForPlayer");
static_assert(offsetof(B_GameMode_C_PostWinObjectiveForPlayer, Player) == 0x000000, "Member 'B_GameMode_C_PostWinObjectiveForPlayer::Player' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostWinObjectiveForPlayer, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_GameMode_C_PostWinObjectiveForPlayer::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostWinObjectiveForPlayer, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_GameMode_C_PostWinObjectiveForPlayer::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostWinObjectiveForPlayer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_PostWinObjectiveForPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostWinObjectiveForPlayer, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000019, "Member 'B_GameMode_C_PostWinObjectiveForPlayer::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostWinObjectiveForPlayer, CallFunc_GetWinObjectiveId_ObjectiveId) == 0x000020, "Member 'B_GameMode_C_PostWinObjectiveForPlayer::CallFunc_GetWinObjectiveId_ObjectiveId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostWinObjectiveForPlayer, CallFunc_NotEqual_Int64Int64_ReturnValue) == 0x000028, "Member 'B_GameMode_C_PostWinObjectiveForPlayer::CallFunc_NotEqual_Int64Int64_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.PostPlayObjectiveForPlayer
// 0x0030 (0x0030 - 0x0000)
struct B_GameMode_C_PostPlayObjectiveForPlayer final
{
public:
	class AB_PlayerState_C*                       Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_GetPlayObjectiveId_ObjectiveId;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_Int64Int64_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_PostPlayObjectiveForPlayer) == 0x000008, "Wrong alignment on B_GameMode_C_PostPlayObjectiveForPlayer");
static_assert(sizeof(B_GameMode_C_PostPlayObjectiveForPlayer) == 0x000030, "Wrong size on B_GameMode_C_PostPlayObjectiveForPlayer");
static_assert(offsetof(B_GameMode_C_PostPlayObjectiveForPlayer, Player) == 0x000000, "Member 'B_GameMode_C_PostPlayObjectiveForPlayer::Player' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostPlayObjectiveForPlayer, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'B_GameMode_C_PostPlayObjectiveForPlayer::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostPlayObjectiveForPlayer, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_GameMode_C_PostPlayObjectiveForPlayer::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostPlayObjectiveForPlayer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_PostPlayObjectiveForPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostPlayObjectiveForPlayer, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000019, "Member 'B_GameMode_C_PostPlayObjectiveForPlayer::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostPlayObjectiveForPlayer, CallFunc_GetPlayObjectiveId_ObjectiveId) == 0x000020, "Member 'B_GameMode_C_PostPlayObjectiveForPlayer::CallFunc_GetPlayObjectiveId_ObjectiveId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_PostPlayObjectiveForPlayer, CallFunc_NotEqual_Int64Int64_ReturnValue) == 0x000028, "Member 'B_GameMode_C_PostPlayObjectiveForPlayer::CallFunc_NotEqual_Int64Int64_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SetAccountIdForProductUserId
// 0x0080 (0x0080 - 0x0000)
struct B_GameMode_C_SetAccountIdForProductUserId final
{
public:
	int32                                         AccountId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProductUserId;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UB_ServerClientConfig_C*                AccountClientConfig;                               // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         AccountState;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetProductUserId_ProductUserId;           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetProductUserId_PlatformType;            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SetAccountIdForProductUserId) == 0x000008, "Wrong alignment on B_GameMode_C_SetAccountIdForProductUserId");
static_assert(sizeof(B_GameMode_C_SetAccountIdForProductUserId) == 0x000080, "Wrong size on B_GameMode_C_SetAccountIdForProductUserId");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, AccountId) == 0x000000, "Member 'B_GameMode_C_SetAccountIdForProductUserId::AccountId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, ProductUserId) == 0x000008, "Member 'B_GameMode_C_SetAccountIdForProductUserId::ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, AccountClientConfig) == 0x000018, "Member 'B_GameMode_C_SetAccountIdForProductUserId::AccountClientConfig' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, AccountState) == 0x000020, "Member 'B_GameMode_C_SetAccountIdForProductUserId::AccountState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, Temp_int_Array_Index_Variable) == 0x000024, "Member 'B_GameMode_C_SetAccountIdForProductUserId::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'B_GameMode_C_SetAccountIdForProductUserId::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'B_GameMode_C_SetAccountIdForProductUserId::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_GameMode_C_SetAccountIdForProductUserId::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, K2Node_DynamicCast_AsB_Player_State) == 0x000040, "Member 'B_GameMode_C_SetAccountIdForProductUserId::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_GameMode_C_SetAccountIdForProductUserId::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'B_GameMode_C_SetAccountIdForProductUserId::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, CallFunc_GetProductUserId_ProductUserId) == 0x000050, "Member 'B_GameMode_C_SetAccountIdForProductUserId::CallFunc_GetProductUserId_ProductUserId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, CallFunc_GetProductUserId_PlatformType) == 0x000060, "Member 'B_GameMode_C_SetAccountIdForProductUserId::CallFunc_GetProductUserId_PlatformType' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x000070, "Member 'B_GameMode_C_SetAccountIdForProductUserId::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'B_GameMode_C_SetAccountIdForProductUserId::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetAccountIdForProductUserId, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'B_GameMode_C_SetAccountIdForProductUserId::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetAntiBotTravelRequirement
// 0x0050 (0x0050 - 0x0000)
struct B_GameMode_C_GetAntiBotTravelRequirement final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Distance;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDistance;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetAntiBotTravelRequirement) == 0x000008, "Wrong alignment on B_GameMode_C_GetAntiBotTravelRequirement");
static_assert(sizeof(B_GameMode_C_GetAntiBotTravelRequirement) == 0x000050, "Wrong size on B_GameMode_C_GetAntiBotTravelRequirement");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, PlayerState) == 0x000000, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, Distance) == 0x000008, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::Distance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, MaxDistance) == 0x000010, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::MaxDistance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000018, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, CallFunc_Now_ReturnValue) == 0x000020, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000028, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, CallFunc_GetTotalSeconds_ReturnValue) == 0x000030, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAntiBotTravelRequirement, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000048, "Member 'B_GameMode_C_GetAntiBotTravelRequirement::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnNewPlayerPawn
// 0x01F0 (0x01F0 - 0x0000)
struct B_GameMode_C_SpawnNewPlayerPawn final
{
public:
	ETeamID                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            PlayerController;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PlayerPawn;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_JoinAsHunterStates                          JoinAsHunterState;                                 // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlayerStartTransform;                              // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetNewPlayerStartTransform_StartTransform; // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanJoinAsMidgameHunter_JoinAsHunter;      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ClassClass_ReturnValue;          // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0103(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Spectator_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0170(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetNewPlayerPawnByTeam_Player_Pawn;       // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnNewPlayerPawn) == 0x000010, "Wrong alignment on B_GameMode_C_SpawnNewPlayerPawn");
static_assert(sizeof(B_GameMode_C_SpawnNewPlayerPawn) == 0x0001F0, "Wrong size on B_GameMode_C_SpawnNewPlayerPawn");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, Team) == 0x000000, "Member 'B_GameMode_C_SpawnNewPlayerPawn::Team' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, PlayerController) == 0x000008, "Member 'B_GameMode_C_SpawnNewPlayerPawn::PlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, PlayerPawn) == 0x000010, "Member 'B_GameMode_C_SpawnNewPlayerPawn::PlayerPawn' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, JoinAsHunterState) == 0x000018, "Member 'B_GameMode_C_SpawnNewPlayerPawn::JoinAsHunterState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, PlayerStartTransform) == 0x000020, "Member 'B_GameMode_C_SpawnNewPlayerPawn::PlayerStartTransform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_IsDedicatedServer_ReturnValue) == 0x000080, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_GetNewPlayerStartTransform_StartTransform) == 0x000090, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_GetNewPlayerStartTransform_StartTransform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_CanJoinAsMidgameHunter_JoinAsHunter) == 0x0000F0, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_CanJoinAsMidgameHunter_JoinAsHunter' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, K2Node_DynamicCast_AsB_Player_State) == 0x0000F8, "Member 'B_GameMode_C_SpawnNewPlayerPawn::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'B_GameMode_C_SpawnNewPlayerPawn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_NotEqual_ClassClass_ReturnValue) == 0x000101, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_NotEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_Array_Contains_ReturnValue) == 0x000102, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000103, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000108, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, K2Node_SwitchEnum_CmpSuccess) == 0x000110, "Member 'B_GameMode_C_SpawnNewPlayerPawn::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_FinishSpawningActor_ReturnValue) == 0x000118, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_BreakTransform_Location) == 0x000120, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_BreakTransform_Rotation) == 0x000138, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_BreakTransform_Scale) == 0x000150, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_MakeTransform_ReturnValue) == 0x000170, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_GetNewPlayerPawnByTeam_Player_Pawn) == 0x0001D0, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_GetNewPlayerPawnByTeam_Player_Pawn' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x0001D8, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnNewPlayerPawn, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x0001E0, "Member 'B_GameMode_C_SpawnNewPlayerPawn::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetNewPlayerPawnByTeam
// 0x0020 (0x0020 - 0x0000)
struct B_GameMode_C_GetNewPlayerPawnByTeam final
{
public:
	ETeamID                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Player_Pawn;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Pawn_Type;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetNewPlayerPawnByTeam) == 0x000008, "Wrong alignment on B_GameMode_C_GetNewPlayerPawnByTeam");
static_assert(sizeof(B_GameMode_C_GetNewPlayerPawnByTeam) == 0x000020, "Wrong size on B_GameMode_C_GetNewPlayerPawnByTeam");
static_assert(offsetof(B_GameMode_C_GetNewPlayerPawnByTeam, Team) == 0x000000, "Member 'B_GameMode_C_GetNewPlayerPawnByTeam::Team' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerPawnByTeam, Player_Pawn) == 0x000008, "Member 'B_GameMode_C_GetNewPlayerPawnByTeam::Player_Pawn' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerPawnByTeam, Pawn_Type) == 0x000010, "Member 'B_GameMode_C_GetNewPlayerPawnByTeam::Pawn_Type' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerPawnByTeam, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'B_GameMode_C_GetNewPlayerPawnByTeam::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SortTournamentPlayers
// 0x0038 (0x0038 - 0x0000)
struct B_GameMode_C_SortTournamentPlayers final
{
public:
	class UObject*                                ObjectA;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ObjectB;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  K2Node_DynamicCast_AsB_Tournament_Player;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_TournamentPlayer_C*                  K2Node_DynamicCast_AsB_Tournament_Player_1;        // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SortTournamentPlayers) == 0x000008, "Wrong alignment on B_GameMode_C_SortTournamentPlayers");
static_assert(sizeof(B_GameMode_C_SortTournamentPlayers) == 0x000038, "Wrong size on B_GameMode_C_SortTournamentPlayers");
static_assert(offsetof(B_GameMode_C_SortTournamentPlayers, ObjectA) == 0x000000, "Member 'B_GameMode_C_SortTournamentPlayers::ObjectA' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortTournamentPlayers, ObjectB) == 0x000008, "Member 'B_GameMode_C_SortTournamentPlayers::ObjectB' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortTournamentPlayers, Result) == 0x000010, "Member 'B_GameMode_C_SortTournamentPlayers::Result' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortTournamentPlayers, K2Node_DynamicCast_AsB_Tournament_Player) == 0x000018, "Member 'B_GameMode_C_SortTournamentPlayers::K2Node_DynamicCast_AsB_Tournament_Player' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortTournamentPlayers, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_GameMode_C_SortTournamentPlayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortTournamentPlayers, K2Node_DynamicCast_AsB_Tournament_Player_1) == 0x000028, "Member 'B_GameMode_C_SortTournamentPlayers::K2Node_DynamicCast_AsB_Tournament_Player_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortTournamentPlayers, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_GameMode_C_SortTournamentPlayers::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortTournamentPlayers, CallFunc_Greater_IntInt_ReturnValue) == 0x000031, "Member 'B_GameMode_C_SortTournamentPlayers::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetPlaytimeFitsDatetime
// 0x0050 (0x0050 - 0x0000)
struct B_GameMode_C_GetPlaytimeFitsDatetime final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WithEditor_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetPlaytimeFitsDatetime) == 0x000008, "Wrong alignment on B_GameMode_C_GetPlaytimeFitsDatetime");
static_assert(sizeof(B_GameMode_C_GetPlaytimeFitsDatetime) == 0x000050, "Wrong size on B_GameMode_C_GetPlaytimeFitsDatetime");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, PlayerState) == 0x000000, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, ReturnValue) == 0x000008, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_WithEditor_ReturnValue) == 0x000009, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_WithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x000010, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_Now_ReturnValue) == 0x000018, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000028, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_GetTotalSeconds_ReturnValue) == 0x000030, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000038, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000040, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000041, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_BooleanOR_ReturnValue) == 0x000042, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_Not_PreBool_ReturnValue) == 0x000043, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_BooleanOR_ReturnValue_1) == 0x000044, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlaytimeFitsDatetime, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000048, "Member 'B_GameMode_C_GetPlaytimeFitsDatetime::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnDefaultPawnFor
// 0x0030 (0x0030 - 0x0000)
struct B_GameMode_C_SpawnDefaultPawnFor final
{
public:
	class AController*                            NewPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 StartSpot;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_SpawnNewPlayerPawn_PlayerPawn;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnDefaultPawnFor) == 0x000008, "Wrong alignment on B_GameMode_C_SpawnDefaultPawnFor");
static_assert(sizeof(B_GameMode_C_SpawnDefaultPawnFor) == 0x000030, "Wrong size on B_GameMode_C_SpawnDefaultPawnFor");
static_assert(offsetof(B_GameMode_C_SpawnDefaultPawnFor, NewPlayer) == 0x000000, "Member 'B_GameMode_C_SpawnDefaultPawnFor::NewPlayer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnDefaultPawnFor, StartSpot) == 0x000008, "Member 'B_GameMode_C_SpawnDefaultPawnFor::StartSpot' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnDefaultPawnFor, ReturnValue) == 0x000010, "Member 'B_GameMode_C_SpawnDefaultPawnFor::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnDefaultPawnFor, K2Node_DynamicCast_AsB_Player_State) == 0x000018, "Member 'B_GameMode_C_SpawnDefaultPawnFor::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnDefaultPawnFor, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_GameMode_C_SpawnDefaultPawnFor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnDefaultPawnFor, CallFunc_SpawnNewPlayerPawn_PlayerPawn) == 0x000028, "Member 'B_GameMode_C_SpawnDefaultPawnFor::CallFunc_SpawnNewPlayerPawn_PlayerPawn' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetNewPlayerStartTransform
// 0x03E0 (0x03E0 - 0x0000)
struct B_GameMode_C_GetNewPlayerStartTransform final
{
public:
	ETeamID                                       Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceablePlayerStart_C*             CurrentCustomPlayerStart;                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlaceablePlayerStart_C*>     Custom_Player_Starts;                              // 0x0078(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class APlayerStart*                           CurrentPlayerStart;                                // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerStart*>                   PlayerStarts;                                      // 0x0090(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         AvailableStartsAmount;                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0xC];                                       // 0x00A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlayerStartTransform;                              // 0x00B0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetOccupied_Occupied;                     // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceablePlayerStart_C*             CallFunc_Array_Get_Item;                           // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerStart*                           CallFunc_Array_Get_Item_1;                         // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0140(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0xC];                                      // 0x0234(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0240(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_2;              // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaceablePlayerStart_C*             CallFunc_Array_Get_Item_2;                         // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlaceablePlayerStart_C*>     CallFunc_GetAllActorsOfClass_OutActors;            // 0x02B8(0x0010)(ReferenceParm)
	TArray<class ABP_HunterPlayerStart_C*>        CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x02C8(0x0010)(ReferenceParm)
	TArray<class ABP_WitchPlayerStart_C*>         CallFunc_GetAllActorsOfClass_OutActors_2;          // 0x02D8(0x0010)(ReferenceParm)
	TScriptInterface<class IIPlayerStart_C>       K2Node_DynamicCast_AsIPlayer_Start;                // 0x02E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetOccupied_Occupied_1;                   // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0302(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303[0x5];                                      // 0x0303(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPlayerStart_C>       K2Node_DynamicCast_AsIPlayer_Start_1;              // 0x0308(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0320(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_6;               // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_7;               // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x0391(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AB_WitchPlayerStart_C*>          CallFunc_GetAllActorsOfClass_OutActors_3;          // 0x0398(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_8;               // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_3;              // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_HunterPlayerStart_C*>         CallFunc_GetAllActorsOfClass_OutActors_4;          // 0x03B0(0x0010)(ReferenceParm)
	class APlayerStart*                           CallFunc_Array_Get_Item_3;                         // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerStart*>                   CallFunc_GetAllActorsOfClass_OutActors_5;          // 0x03C8(0x0010)(ReferenceParm)
};
static_assert(alignof(B_GameMode_C_GetNewPlayerStartTransform) == 0x000010, "Wrong alignment on B_GameMode_C_GetNewPlayerStartTransform");
static_assert(sizeof(B_GameMode_C_GetNewPlayerStartTransform) == 0x0003E0, "Wrong size on B_GameMode_C_GetNewPlayerStartTransform");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, Team) == 0x000000, "Member 'B_GameMode_C_GetNewPlayerStartTransform::Team' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, StartTransform) == 0x000010, "Member 'B_GameMode_C_GetNewPlayerStartTransform::StartTransform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CurrentCustomPlayerStart) == 0x000070, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CurrentCustomPlayerStart' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, Custom_Player_Starts) == 0x000078, "Member 'B_GameMode_C_GetNewPlayerStartTransform::Custom_Player_Starts' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CurrentPlayerStart) == 0x000088, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CurrentPlayerStart' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, PlayerStarts) == 0x000090, "Member 'B_GameMode_C_GetNewPlayerStartTransform::PlayerStarts' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, AvailableStartsAmount) == 0x0000A0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::AvailableStartsAmount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, PlayerStartTransform) == 0x0000B0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::PlayerStartTransform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, K2Node_SwitchEnum_CmpSuccess) == 0x000110, "Member 'B_GameMode_C_GetNewPlayerStartTransform::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetOccupied_Occupied) == 0x000111, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetOccupied_Occupied' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, Temp_int_Variable) == 0x000114, "Member 'B_GameMode_C_GetNewPlayerStartTransform::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Not_PreBool_ReturnValue) == 0x000118, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Greater_IntInt_ReturnValue) == 0x000119, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue) == 0x00011C, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000120, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_RandomInteger_ReturnValue) == 0x000124, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Get_Item) == 0x000128, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue_1) == 0x000130, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_RandomInteger_ReturnValue_1) == 0x000134, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Get_Item_1) == 0x000138, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetTransform_ReturnValue) == 0x000140, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, Temp_int_Variable_1) == 0x0001A0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_BreakTransform_Location) == 0x0001A8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_BreakTransform_Rotation) == 0x0001C0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_BreakTransform_Scale) == 0x0001D8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0001F0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_BreakVector_X) == 0x0001F8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_BreakVector_Y) == 0x000200, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_BreakVector_Z) == 0x000208, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000210, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_MakeVector_ReturnValue) == 0x000218, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue_2) == 0x000230, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_MakeTransform_ReturnValue) == 0x000240, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_RandomInteger_ReturnValue_2) == 0x0002A0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_RandomInteger_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Get_Item_2) == 0x0002A8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Subtract_IntInt_ReturnValue) == 0x0002B0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue_3) == 0x0002B4, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetAllActorsOfClass_OutActors) == 0x0002B8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x0002C8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetAllActorsOfClass_OutActors_2) == 0x0002D8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetAllActorsOfClass_OutActors_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, K2Node_DynamicCast_AsIPlayer_Start) == 0x0002E8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::K2Node_DynamicCast_AsIPlayer_Start' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, K2Node_DynamicCast_bSuccess) == 0x0002F8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue_4) == 0x0002FC, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetOccupied_Occupied_1) == 0x000300, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetOccupied_Occupied_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000301, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Not_PreBool_ReturnValue_1) == 0x000302, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, K2Node_DynamicCast_AsIPlayer_Start_1) == 0x000308, "Member 'B_GameMode_C_GetNewPlayerStartTransform::K2Node_DynamicCast_AsIPlayer_Start_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, K2Node_DynamicCast_bSuccess_1) == 0x000318, "Member 'B_GameMode_C_GetNewPlayerStartTransform::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetTransform_ReturnValue_1) == 0x000320, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue_5) == 0x000380, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000384, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue_6) == 0x000388, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue_7) == 0x00038C, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000390, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x000391, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetAllActorsOfClass_OutActors_3) == 0x000398, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetAllActorsOfClass_OutActors_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Length_ReturnValue_8) == 0x0003A8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Length_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_RandomInteger_ReturnValue_3) == 0x0003AC, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_RandomInteger_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetAllActorsOfClass_OutActors_4) == 0x0003B0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetAllActorsOfClass_OutActors_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_Array_Get_Item_3) == 0x0003C0, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNewPlayerStartTransform, CallFunc_GetAllActorsOfClass_OutActors_5) == 0x0003C8, "Member 'B_GameMode_C_GetNewPlayerStartTransform::CallFunc_GetAllActorsOfClass_OutActors_5' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetLastSurvivingWitch
// 0x0088 (0x0088 - 0x0000)
struct B_GameMode_C_GetLastSurvivingWitch final
{
public:
	bool                                          LastWitchExists;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       LastWitchPlayer;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       LastWitch;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         SurvivingWitches;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       PlayerUnderTest;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetLastSurvivingWitch) == 0x000008, "Wrong alignment on B_GameMode_C_GetLastSurvivingWitch");
static_assert(sizeof(B_GameMode_C_GetLastSurvivingWitch) == 0x000088, "Wrong size on B_GameMode_C_GetLastSurvivingWitch");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, LastWitchExists) == 0x000000, "Member 'B_GameMode_C_GetLastSurvivingWitch::LastWitchExists' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, LastWitchPlayer) == 0x000008, "Member 'B_GameMode_C_GetLastSurvivingWitch::LastWitchPlayer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, LastWitch) == 0x000010, "Member 'B_GameMode_C_GetLastSurvivingWitch::LastWitch' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, SurvivingWitches) == 0x000018, "Member 'B_GameMode_C_GetLastSurvivingWitch::SurvivingWitches' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, PlayerUnderTest) == 0x000020, "Member 'B_GameMode_C_GetLastSurvivingWitch::PlayerUnderTest' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, Temp_int_Array_Index_Variable) == 0x000028, "Member 'B_GameMode_C_GetLastSurvivingWitch::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_GetGameState_ReturnValue) == 0x000030, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_GetGameState_ReturnValue_1) == 0x000038, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, K2Node_DynamicCast_AsB_Game_State) == 0x000040, "Member 'B_GameMode_C_GetLastSurvivingWitch::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_GameMode_C_GetLastSurvivingWitch::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_Array_Get_Item) == 0x000050, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000058, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, K2Node_DynamicCast_AsB_Player_State) == 0x000060, "Member 'B_GameMode_C_GetLastSurvivingWitch::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'B_GameMode_C_GetLastSurvivingWitch::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_Greater_IntInt_ReturnValue) == 0x000069, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'B_GameMode_C_GetLastSurvivingWitch::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_Less_IntInt_ReturnValue) == 0x000074, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00007C, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, K2Node_SwitchEnum_CmpSuccess) == 0x00007D, "Member 'B_GameMode_C_GetLastSurvivingWitch::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_Not_PreBool_ReturnValue) == 0x00007E, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetLastSurvivingWitch, CallFunc_Add_IntInt_ReturnValue_1) == 0x000080, "Member 'B_GameMode_C_GetLastSurvivingWitch::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetNumberOfActivePlayers
// 0x0050 (0x0050 - 0x0000)
struct B_GameMode_C_GetNumberOfActivePlayers final
{
public:
	int32                                         ActiveCount;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActivePlayerCount;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetWitchesCount_WitchesCount;             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetHuntersCount_HuntersCount;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetNumberOfActivePlayers) == 0x000008, "Wrong alignment on B_GameMode_C_GetNumberOfActivePlayers");
static_assert(sizeof(B_GameMode_C_GetNumberOfActivePlayers) == 0x000050, "Wrong size on B_GameMode_C_GetNumberOfActivePlayers");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, ActiveCount) == 0x000000, "Member 'B_GameMode_C_GetNumberOfActivePlayers::ActiveCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, ActivePlayerCount) == 0x000004, "Member 'B_GameMode_C_GetNumberOfActivePlayers::ActivePlayerCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_GameMode_C_GetNumberOfActivePlayers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'B_GameMode_C_GetNumberOfActivePlayers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, Temp_int_Variable) == 0x000010, "Member 'B_GameMode_C_GetNumberOfActivePlayers::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, K2Node_DynamicCast_AsB_Player_State) == 0x000030, "Member 'B_GameMode_C_GetNumberOfActivePlayers::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_GameMode_C_GetNumberOfActivePlayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_GetWitchesCount_WitchesCount) == 0x00003A, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_GetWitchesCount_WitchesCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_GetHuntersCount_HuntersCount) == 0x000044, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_GetHuntersCount_HuntersCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000048, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetNumberOfActivePlayers, CallFunc_Add_IntInt_ReturnValue_2) == 0x00004C, "Member 'B_GameMode_C_GetNumberOfActivePlayers::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.LoadPropLayoutFromSaveGame
// 0x0110 (0x0110 - 0x0000)
struct B_GameMode_C_LoadPropLayoutFromSaveGame final
{
public:
	TArray<struct FPropToSave>                    PropsToLoad;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FPlaceableStaticToSave>         PlaceableStaticsToLoad;                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FPlaceableLightToSave>          PlaceableLightsToLoad;                             // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FSwitchToSave>                  SwitchesToLoad;                                    // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FPrefabToSave>                  PrefabsToLoad;                                     // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         LoadedPropsCount;                                  // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoadedPlaceableStaticsCount;                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class AActor*>                    SwitchIdMap;                                       // 0x0058(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TScriptInterface<class IIMapLayoutLoading_C>  CallFunc_LoadMapLayout_Target_CastInput;           // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_StaticMeshProp_C*>            CallFunc_LoadMapLayout_LoadedProps;                // 0x00B8(0x0010)(ReferenceParm)
	TArray<class ABP_PlaceableStaticProp_C*>      CallFunc_LoadMapLayout_LoadedStatics;              // 0x00C8(0x0010)(ReferenceParm)
	TArray<class ABP_PlaceableLight_C*>           CallFunc_LoadMapLayout_LoadedLights;               // 0x00D8(0x0010)(ReferenceParm)
	TArray<class ABP_Switch_C*>                   CallFunc_LoadMapLayout_LoadedSwitches;             // 0x00E8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_LoadPropLayoutFromSaveGame) == 0x000008, "Wrong alignment on B_GameMode_C_LoadPropLayoutFromSaveGame");
static_assert(sizeof(B_GameMode_C_LoadPropLayoutFromSaveGame) == 0x000110, "Wrong size on B_GameMode_C_LoadPropLayoutFromSaveGame");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, PropsToLoad) == 0x000000, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::PropsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, PlaceableStaticsToLoad) == 0x000010, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::PlaceableStaticsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, PlaceableLightsToLoad) == 0x000020, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::PlaceableLightsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, SwitchesToLoad) == 0x000030, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::SwitchesToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, PrefabsToLoad) == 0x000040, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::PrefabsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, LoadedPropsCount) == 0x000050, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::LoadedPropsCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, LoadedPlaceableStaticsCount) == 0x000054, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::LoadedPlaceableStaticsCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, SwitchIdMap) == 0x000058, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::SwitchIdMap' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_LoadMapLayout_Target_CastInput) == 0x0000A8, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_LoadMapLayout_Target_CastInput' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_LoadMapLayout_LoadedProps) == 0x0000B8, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_LoadMapLayout_LoadedProps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_LoadMapLayout_LoadedStatics) == 0x0000C8, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_LoadMapLayout_LoadedStatics' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_LoadMapLayout_LoadedLights) == 0x0000D8, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_LoadMapLayout_LoadedLights' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_LoadMapLayout_LoadedSwitches) == 0x0000E8, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_LoadMapLayout_LoadedSwitches' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_Array_Length_ReturnValue) == 0x0000F8, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_Array_Length_ReturnValue_1) == 0x0000FC, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_Array_Length_ReturnValue_2) == 0x000100, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_Array_Length_ReturnValue_3) == 0x000104, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_Add_IntInt_ReturnValue) == 0x000108, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayoutFromSaveGame, CallFunc_Add_IntInt_ReturnValue_1) == 0x00010C, "Member 'B_GameMode_C_LoadPropLayoutFromSaveGame::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.LoadPropLayout
// 0x0348 (0x0348 - 0x0000)
struct B_GameMode_C_LoadPropLayout final
{
public:
	struct FS_PropLayoutData                      Layout;                                            // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          UseCompression;                                    // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WorkshopID;                                        // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         AmountOfProps;                                     // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountOfPlaceableStatics;                          // 0x0064(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPrefabToSave>                  PrefabsToLoad;                                     // 0x0068(0x0010)(Edit, BlueprintVisible)
	TArray<struct FSwitchToSave>                  SwitchesToLoad;                                    // 0x0078(0x0010)(Edit, BlueprintVisible)
	TArray<struct FPlaceableLightToSave>          PlaceableLightsToLoad;                             // 0x0088(0x0010)(Edit, BlueprintVisible)
	class FString                                 ReturnWorkshopId;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsSuccess;                                         // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPlaceableStaticToSave>         PlaceableStaticsToLoad;                            // 0x00B0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FPropToSave>                    PropsToLoad;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible)
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_LoadPropLayoutFromSaveGame_LoadedPropsCount; // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoadPropLayoutFromSaveGame_LoadedPlaceableStaticsCount; // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_StrStr_ReturnValue;              // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              CallFunc_GetSpecificMapFromLevelName_MapData;      // 0x0120(0x0040)(HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoadPropLayoutFromSaveGame_LoadedPropsCount_1; // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_LoadPropLayoutFromSaveGame_LoadedPlaceableStaticsCount_1; // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPropToSave>                    CallFunc_LoadPropLayoutFromFileCompressed_PropsToLoad; // 0x0190(0x0010)(ReferenceParm)
	class FString                                 CallFunc_LoadPropLayoutFromFileCompressed_WorkshopId; // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FPlaceableStaticToSave>         CallFunc_LoadPropLayoutFromFileCompressed_PlaceableStaticsToLoad; // 0x01B0(0x0010)(ReferenceParm)
	TArray<struct FPlaceableLightToSave>          CallFunc_LoadPropLayoutFromFileCompressed_PlaceableLightsToLoad; // 0x01C0(0x0010)(ReferenceParm)
	TArray<struct FSwitchToSave>                  CallFunc_LoadPropLayoutFromFileCompressed_SwitchesToLoad; // 0x01D0(0x0010)(ReferenceParm)
	TArray<struct FPrefabToSave>                  CallFunc_LoadPropLayoutFromFileCompressed_PrefabsToLoad; // 0x01E0(0x0010)(ReferenceParm)
	bool                                          CallFunc_LoadPropLayoutFromFileCompressed_ReturnValue; // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPropToSave>                    CallFunc_LoadPropLayoutFromFileCompressed_PropsToLoad_1; // 0x01F8(0x0010)(ReferenceParm)
	class FString                                 CallFunc_LoadPropLayoutFromFileCompressed_WorkshopId_1; // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FPlaceableStaticToSave>         CallFunc_LoadPropLayoutFromFileCompressed_PlaceableStaticsToLoad_1; // 0x0218(0x0010)(ReferenceParm)
	TArray<struct FPlaceableLightToSave>          CallFunc_LoadPropLayoutFromFileCompressed_PlaceableLightsToLoad_1; // 0x0228(0x0010)(ReferenceParm)
	TArray<struct FSwitchToSave>                  CallFunc_LoadPropLayoutFromFileCompressed_SwitchesToLoad_1; // 0x0238(0x0010)(ReferenceParm)
	TArray<struct FPrefabToSave>                  CallFunc_LoadPropLayoutFromFileCompressed_PrefabsToLoad_1; // 0x0248(0x0010)(ReferenceParm)
	bool                                          CallFunc_LoadPropLayoutFromFileCompressed_ReturnValue_1; // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPropToSave>                    CallFunc_LoadPropLayoutFromFile_PropsToLoad;       // 0x0260(0x0010)(ReferenceParm)
	class FString                                 CallFunc_LoadPropLayoutFromFile_WorkshopId;        // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FPlaceableStaticToSave>         CallFunc_LoadPropLayoutFromFile_PlaceableStaticsToLoad; // 0x0280(0x0010)(ReferenceParm)
	TArray<struct FPlaceableLightToSave>          CallFunc_LoadPropLayoutFromFile_PlaceableLightsToLoad; // 0x0290(0x0010)(ReferenceParm)
	TArray<struct FSwitchToSave>                  CallFunc_LoadPropLayoutFromFile_SwitchesToLoad;    // 0x02A0(0x0010)(ReferenceParm)
	TArray<struct FPrefabToSave>                  CallFunc_LoadPropLayoutFromFile_PrefabsToLoad;     // 0x02B0(0x0010)(ReferenceParm)
	bool                                          CallFunc_LoadPropLayoutFromFile_ReturnValue;       // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPropToSave>                    CallFunc_LoadPropLayoutFromFile_PropsToLoad_1;     // 0x02C8(0x0010)(ReferenceParm)
	class FString                                 CallFunc_LoadPropLayoutFromFile_WorkshopId_1;      // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FPlaceableStaticToSave>         CallFunc_LoadPropLayoutFromFile_PlaceableStaticsToLoad_1; // 0x02E8(0x0010)(ReferenceParm)
	TArray<struct FPlaceableLightToSave>          CallFunc_LoadPropLayoutFromFile_PlaceableLightsToLoad_1; // 0x02F8(0x0010)(ReferenceParm)
	TArray<struct FSwitchToSave>                  CallFunc_LoadPropLayoutFromFile_SwitchesToLoad_1;  // 0x0308(0x0010)(ReferenceParm)
	TArray<struct FPrefabToSave>                  CallFunc_LoadPropLayoutFromFile_PrefabsToLoad_1;   // 0x0318(0x0010)(ReferenceParm)
	bool                                          CallFunc_LoadPropLayoutFromFile_ReturnValue_1;     // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_LoadPropLayout) == 0x000008, "Wrong alignment on B_GameMode_C_LoadPropLayout");
static_assert(sizeof(B_GameMode_C_LoadPropLayout) == 0x000348, "Wrong size on B_GameMode_C_LoadPropLayout");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, Layout) == 0x000000, "Member 'B_GameMode_C_LoadPropLayout::Layout' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, UseCompression) == 0x000048, "Member 'B_GameMode_C_LoadPropLayout::UseCompression' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, WorkshopID) == 0x000050, "Member 'B_GameMode_C_LoadPropLayout::WorkshopID' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, AmountOfProps) == 0x000060, "Member 'B_GameMode_C_LoadPropLayout::AmountOfProps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, AmountOfPlaceableStatics) == 0x000064, "Member 'B_GameMode_C_LoadPropLayout::AmountOfPlaceableStatics' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, PrefabsToLoad) == 0x000068, "Member 'B_GameMode_C_LoadPropLayout::PrefabsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, SwitchesToLoad) == 0x000078, "Member 'B_GameMode_C_LoadPropLayout::SwitchesToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, PlaceableLightsToLoad) == 0x000088, "Member 'B_GameMode_C_LoadPropLayout::PlaceableLightsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, ReturnWorkshopId) == 0x000098, "Member 'B_GameMode_C_LoadPropLayout::ReturnWorkshopId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, IsSuccess) == 0x0000A8, "Member 'B_GameMode_C_LoadPropLayout::IsSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, PlaceableStaticsToLoad) == 0x0000B0, "Member 'B_GameMode_C_LoadPropLayout::PlaceableStaticsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, PropsToLoad) == 0x0000C0, "Member 'B_GameMode_C_LoadPropLayout::PropsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_GetCurrentLevelName_ReturnValue) == 0x0000D0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, K2Node_SwitchEnum_CmpSuccess) == 0x0000E0, "Member 'B_GameMode_C_LoadPropLayout::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromSaveGame_LoadedPropsCount) == 0x0000E4, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromSaveGame_LoadedPropsCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromSaveGame_LoadedPlaceableStaticsCount) == 0x0000E8, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromSaveGame_LoadedPlaceableStaticsCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_NotEqual_StrStr_ReturnValue) == 0x0000EC, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_NotEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_GetGameInstance_ReturnValue) == 0x0000F0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000F8, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, K2Node_DynamicCast_AsB_Game_Instance) == 0x000100, "Member 'B_GameMode_C_LoadPropLayout::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'B_GameMode_C_LoadPropLayout::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000110, "Member 'B_GameMode_C_LoadPropLayout::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, K2Node_DynamicCast_bSuccess_1) == 0x000118, "Member 'B_GameMode_C_LoadPropLayout::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_GetSpecificMapFromLevelName_MapData) == 0x000120, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_GetSpecificMapFromLevelName_MapData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_Conv_NameToString_ReturnValue) == 0x000160, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_Concat_StrStr_ReturnValue) == 0x000170, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromSaveGame_LoadedPropsCount_1) == 0x000180, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromSaveGame_LoadedPropsCount_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromSaveGame_LoadedPlaceableStaticsCount_1) == 0x000184, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromSaveGame_LoadedPlaceableStaticsCount_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_Not_PreBool_ReturnValue) == 0x000188, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_Not_PreBool_ReturnValue_1) == 0x000189, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_PropsToLoad) == 0x000190, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_PropsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_WorkshopId) == 0x0001A0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_WorkshopId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_PlaceableStaticsToLoad) == 0x0001B0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_PlaceableStaticsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_PlaceableLightsToLoad) == 0x0001C0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_PlaceableLightsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_SwitchesToLoad) == 0x0001D0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_SwitchesToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_PrefabsToLoad) == 0x0001E0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_PrefabsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_ReturnValue) == 0x0001F0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_PropsToLoad_1) == 0x0001F8, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_PropsToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_WorkshopId_1) == 0x000208, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_WorkshopId_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_PlaceableStaticsToLoad_1) == 0x000218, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_PlaceableStaticsToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_PlaceableLightsToLoad_1) == 0x000228, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_PlaceableLightsToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_SwitchesToLoad_1) == 0x000238, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_SwitchesToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_PrefabsToLoad_1) == 0x000248, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_PrefabsToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFileCompressed_ReturnValue_1) == 0x000258, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFileCompressed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_PropsToLoad) == 0x000260, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_PropsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_WorkshopId) == 0x000270, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_WorkshopId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_PlaceableStaticsToLoad) == 0x000280, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_PlaceableStaticsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_PlaceableLightsToLoad) == 0x000290, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_PlaceableLightsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_SwitchesToLoad) == 0x0002A0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_SwitchesToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_PrefabsToLoad) == 0x0002B0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_PrefabsToLoad' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_ReturnValue) == 0x0002C0, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_PropsToLoad_1) == 0x0002C8, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_PropsToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_WorkshopId_1) == 0x0002D8, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_WorkshopId_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_PlaceableStaticsToLoad_1) == 0x0002E8, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_PlaceableStaticsToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_PlaceableLightsToLoad_1) == 0x0002F8, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_PlaceableLightsToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_SwitchesToLoad_1) == 0x000308, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_SwitchesToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_PrefabsToLoad_1) == 0x000318, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_PrefabsToLoad_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_LoadPropLayoutFromFile_ReturnValue_1) == 0x000328, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_LoadPropLayoutFromFile_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, CallFunc_GetGameInstance_ReturnValue_2) == 0x000330, "Member 'B_GameMode_C_LoadPropLayout::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000338, "Member 'B_GameMode_C_LoadPropLayout::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_LoadPropLayout, K2Node_DynamicCast_bSuccess_2) == 0x000340, "Member 'B_GameMode_C_LoadPropLayout::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.RemoveAllProps
// 0x0110 (0x0110 - 0x0000)
struct B_GameMode_C_RemoveAllProps final
{
public:
	TArray<class AB_SnowRenderTarget_C*>          SnowRenderTargets;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ABP_PlaceableActor_C*>           PlaceableStaticsToDelete;                          // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AB_StaticMeshProp_C*>            PropsToDelete;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaceableActor_C*                   CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    CallFunc_Array_Get_Item_1;                         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_SnowRenderTarget_C*>          CallFunc_GetAllActorsOfClass_OutActors;            // 0x00B0(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item_2;                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlaceableActor_C*>           CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x00E0(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_SnowRenderTarget_C*                  CallFunc_Array_Get_Item_3;                         // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_StaticMeshProp_C*>            CallFunc_GetAllActorsOfClass_OutActors_2;          // 0x0100(0x0010)(ReferenceParm)
};
static_assert(alignof(B_GameMode_C_RemoveAllProps) == 0x000008, "Wrong alignment on B_GameMode_C_RemoveAllProps");
static_assert(sizeof(B_GameMode_C_RemoveAllProps) == 0x000110, "Wrong size on B_GameMode_C_RemoveAllProps");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, SnowRenderTargets) == 0x000000, "Member 'B_GameMode_C_RemoveAllProps::SnowRenderTargets' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, PlaceableStaticsToDelete) == 0x000010, "Member 'B_GameMode_C_RemoveAllProps::PlaceableStaticsToDelete' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, PropsToDelete) == 0x000020, "Member 'B_GameMode_C_RemoveAllProps::PropsToDelete' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, Temp_int_Array_Index_Variable) == 0x000030, "Member 'B_GameMode_C_RemoveAllProps::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'B_GameMode_C_RemoveAllProps::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Array_Get_Item) == 0x000040, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_GetGameState_ReturnValue) == 0x000050, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Array_Length_ReturnValue_2) == 0x000058, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Array_Length_ReturnValue_3) == 0x00005C, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'B_GameMode_C_RemoveAllProps::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_GetGameState_ReturnValue_1) == 0x000068, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Less_IntInt_ReturnValue_1) == 0x000070, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, K2Node_DynamicCast_AsB_Game_State) == 0x000078, "Member 'B_GameMode_C_RemoveAllProps::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, K2Node_DynamicCast_bSuccess) == 0x000080, "Member 'B_GameMode_C_RemoveAllProps::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Add_IntInt_ReturnValue_1) == 0x000084, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, Temp_int_Loop_Counter_Variable_2) == 0x000088, "Member 'B_GameMode_C_RemoveAllProps::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Less_IntInt_ReturnValue_2) == 0x00008C, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Add_IntInt_ReturnValue_2) == 0x000090, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, Temp_int_Loop_Counter_Variable_3) == 0x000094, "Member 'B_GameMode_C_RemoveAllProps::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Less_IntInt_ReturnValue_3) == 0x000098, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Add_IntInt_ReturnValue_3) == 0x00009C, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, Temp_int_Array_Index_Variable_1) == 0x0000A0, "Member 'B_GameMode_C_RemoveAllProps::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Array_Get_Item_1) == 0x0000A8, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_GetAllActorsOfClass_OutActors) == 0x0000B0, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, Temp_int_Array_Index_Variable_2) == 0x0000C0, "Member 'B_GameMode_C_RemoveAllProps::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Array_Get_Item_2) == 0x0000C8, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, K2Node_DynamicCast_AsB_Player_State) == 0x0000D0, "Member 'B_GameMode_C_RemoveAllProps::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'B_GameMode_C_RemoveAllProps::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_IsValid_ReturnValue) == 0x0000D9, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x0000E0, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, Temp_int_Array_Index_Variable_3) == 0x0000F0, "Member 'B_GameMode_C_RemoveAllProps::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_Array_Get_Item_3) == 0x0000F8, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveAllProps, CallFunc_GetAllActorsOfClass_OutActors_2) == 0x000100, "Member 'B_GameMode_C_RemoveAllProps::CallFunc_GetAllActorsOfClass_OutActors_2' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandlePlayerLeft
// 0x0078 (0x0078 - 0x0000)
struct B_GameMode_C_HandlePlayerLeft final
{
public:
	class AController*                            PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            LeavingPlayerController;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_PlayerName;                 // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0050(0x0010)()
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandlePlayerLeft) == 0x000008, "Wrong alignment on B_GameMode_C_HandlePlayerLeft");
static_assert(sizeof(B_GameMode_C_HandlePlayerLeft) == 0x000078, "Wrong size on B_GameMode_C_HandlePlayerLeft");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, PlayerController) == 0x000000, "Member 'B_GameMode_C_HandlePlayerLeft::PlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, LeavingPlayerController) == 0x000008, "Member 'B_GameMode_C_HandlePlayerLeft::LeavingPlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'B_GameMode_C_HandlePlayerLeft::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'B_GameMode_C_HandlePlayerLeft::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, K2Node_DynamicCast_AsB_Game_State) == 0x000020, "Member 'B_GameMode_C_HandlePlayerLeft::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_GameMode_C_HandlePlayerLeft::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, K2Node_DynamicCast_AsPlayer_Controller) == 0x000030, "Member 'B_GameMode_C_HandlePlayerLeft::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_GameMode_C_HandlePlayerLeft::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, CallFunc_GetPlayerName_PlayerName) == 0x000040, "Member 'B_GameMode_C_HandlePlayerLeft::CallFunc_GetPlayerName_PlayerName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, CallFunc_Conv_StringToText_ReturnValue) == 0x000050, "Member 'B_GameMode_C_HandlePlayerLeft::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, CallFunc_GetGameState_ReturnValue_1) == 0x000060, "Member 'B_GameMode_C_HandlePlayerLeft::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, K2Node_DynamicCast_AsB_Game_State_1) == 0x000068, "Member 'B_GameMode_C_HandlePlayerLeft::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandlePlayerLeft, K2Node_DynamicCast_bSuccess_2) == 0x000070, "Member 'B_GameMode_C_HandlePlayerLeft::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.Handle Player Join
// 0x02F0 (0x02F0 - 0x0000)
struct B_GameMode_C_Handle_Player_Join final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      JoiningPlayerController;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumPlayers_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_PlayerName;                 // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0040(0x0010)()
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPUniqueNetId                         CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId; // 0x0068(0x0020)()
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_UniqueNetIdToString_String;               // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x00B0(0x0010)()
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller_1;        // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UB_TournamentPlayer_C*>          CallFunc_GetTournamentPlayers_ReturnValue;         // 0x00E8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DevelopmentBuild_ReturnValue;             // 0x00FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF[0x1];                                       // 0x00FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Contains_ReturnValue;                 // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UOnlineSessionSubsystem*                CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNamedOnlineSession*                    CallFunc_GetNamedSession_ReturnValue;              // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOnlineSessionSettings*                 CallFunc_GetSessionSettings_ReturnValue;           // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FOnlineSessionSettingsBP               CallFunc_GetValue_ReturnValue;                     // 0x0198(0x0150)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_Handle_Player_Join) == 0x000008, "Wrong alignment on B_GameMode_C_Handle_Player_Join");
static_assert(sizeof(B_GameMode_C_Handle_Player_Join) == 0x0002F0, "Wrong size on B_GameMode_C_Handle_Player_Join");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, PlayerController) == 0x000000, "Member 'B_GameMode_C_Handle_Player_Join::PlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, JoiningPlayerController) == 0x000008, "Member 'B_GameMode_C_Handle_Player_Join::JoiningPlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetNumPlayers_ReturnValue) == 0x000010, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetNumPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetPlayerName_PlayerName) == 0x000018, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetPlayerName_PlayerName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_HasAuthority_ReturnValue) == 0x000028, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Player_Controller) == 0x000030, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_MakeLiteralText_ReturnValue) == 0x000040, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetGameInstance_ReturnValue) == 0x000050, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Game_Instance) == 0x000058, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_IsDedicatedServer_ReturnValue) == 0x000061, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId) == 0x000068, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetUniqueNetIDFromPlayerState_UniqueNetId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetGameState_ReturnValue) == 0x000088, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_UniqueNetIdToString_String) == 0x000090, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_UniqueNetIdToString_String' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Game_State) == 0x0000A0, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_MakeLiteralText_ReturnValue_1) == 0x0000B0, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000C0, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000C8, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess_3) == 0x0000D0, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Player_Controller_1) == 0x0000D8, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess_4) == 0x0000E0, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetTournamentPlayers_ReturnValue) == 0x0000E8, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetTournamentPlayers_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_Array_Length_ReturnValue) == 0x0000F8, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_Greater_IntInt_ReturnValue) == 0x0000FC, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_BooleanAND_ReturnValue) == 0x0000FD, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_DevelopmentBuild_ReturnValue) == 0x0000FE, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_DevelopmentBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetGameInstance_ReturnValue_2) == 0x000100, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_Not_PreBool_ReturnValue) == 0x000108, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000110, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess_5) == 0x000118, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetGameInstance_ReturnValue_3) == 0x000120, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x000128, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess_6) == 0x000130, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_Map_Contains_ReturnValue) == 0x000131, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_Map_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_Not_PreBool_ReturnValue_1) == 0x000132, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetGameInstance_ReturnValue_4) == 0x000138, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_BooleanAND_ReturnValue_1) == 0x000140, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000148, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess_7) == 0x000150, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetGameState_ReturnValue_1) == 0x000158, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_AsB_Game_State_1) == 0x000160, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, K2Node_DynamicCast_bSuccess_8) == 0x000168, "Member 'B_GameMode_C_Handle_Player_Join::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_HasRoundStarted_RoundHasStarted) == 0x000169, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000170, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_BooleanAND_ReturnValue_2) == 0x000178, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetNamedSession_ReturnValue) == 0x000180, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetNamedSession_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_IsValid_ReturnValue) == 0x000188, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetSessionSettings_ReturnValue) == 0x000190, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetSessionSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_GetValue_ReturnValue) == 0x000198, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_Handle_Player_Join, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0002E8, "Member 'B_GameMode_C_Handle_Player_Join::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.UpdateSessionProperties
// 0x00F8 (0x00F8 - 0x0000)
struct B_GameMode_C_UpdateSessionProperties final
{
public:
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomLogSubsystem*                    CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0080(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D8(0x0010)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_UpdateSessionProperties) == 0x000008, "Wrong alignment on B_GameMode_C_UpdateSessionProperties");
static_assert(sizeof(B_GameMode_C_UpdateSessionProperties) == 0x0000F8, "Wrong size on B_GameMode_C_UpdateSessionProperties");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_GetGameInstance_ReturnValue) == 0x000000, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_GetGameInstance_ReturnValue_1) == 0x000008, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_DynamicCast_AsB_Game_Instance) == 0x000010, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000020, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_GetGameInstance_ReturnValue_2) == 0x000030, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x000038, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_GetGameInstance_ReturnValue_3) == 0x000048, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x000050, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_DynamicCast_bSuccess_3) == 0x000058, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000060, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_GetGameState_ReturnValue) == 0x000068, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000078, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_MakeStruct_FormatArgumentData) == 0x000080, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, K2Node_MakeArray_Array) == 0x0000C8, "Member 'B_GameMode_C_UpdateSessionProperties::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_Format_ReturnValue) == 0x0000D8, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_UpdateSessionProperties, CallFunc_Conv_TextToString_ReturnValue) == 0x0000E8, "Member 'B_GameMode_C_UpdateSessionProperties::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.TimerTick
// 0x0018 (0x0018 - 0x0000)
struct B_GameMode_C_TimerTick final
{
public:
	double                                        Temp_real_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_TimerTick) == 0x000008, "Wrong alignment on B_GameMode_C_TimerTick");
static_assert(sizeof(B_GameMode_C_TimerTick) == 0x000018, "Wrong size on B_GameMode_C_TimerTick");
static_assert(offsetof(B_GameMode_C_TimerTick, Temp_real_Variable) == 0x000000, "Member 'B_GameMode_C_TimerTick::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerTick, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'B_GameMode_C_TimerTick::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerTick, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'B_GameMode_C_TimerTick::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerTick, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'B_GameMode_C_TimerTick::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.TimerStart
// 0x0010 (0x0010 - 0x0000)
struct B_GameMode_C_TimerStart final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_TimerStart) == 0x000008, "Wrong alignment on B_GameMode_C_TimerStart");
static_assert(sizeof(B_GameMode_C_TimerStart) == 0x000010, "Wrong size on B_GameMode_C_TimerStart");
static_assert(offsetof(B_GameMode_C_TimerStart, Time) == 0x000000, "Member 'B_GameMode_C_TimerStart::Time' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TimerStart, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000008, "Member 'B_GameMode_C_TimerStart::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.RemoveActiveBuffs
// 0x0018 (0x0018 - 0x0000)
struct B_GameMode_C_RemoveActiveBuffs final
{
public:
	class APlayerController*                      KilledWitchController;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_RemoveActiveBuffs) == 0x000008, "Wrong alignment on B_GameMode_C_RemoveActiveBuffs");
static_assert(sizeof(B_GameMode_C_RemoveActiveBuffs) == 0x000018, "Wrong size on B_GameMode_C_RemoveActiveBuffs");
static_assert(offsetof(B_GameMode_C_RemoveActiveBuffs, KilledWitchController) == 0x000000, "Member 'B_GameMode_C_RemoveActiveBuffs::KilledWitchController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveActiveBuffs, K2Node_DynamicCast_AsB_Player_State) == 0x000008, "Member 'B_GameMode_C_RemoveActiveBuffs::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RemoveActiveBuffs, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_GameMode_C_RemoveActiveBuffs::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetPickupSpawnDelay
// 0x0018 (0x0018 - 0x0000)
struct B_GameMode_C_GetPickupSpawnDelay final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetPickupSpawnDelay) == 0x000008, "Wrong alignment on B_GameMode_C_GetPickupSpawnDelay");
static_assert(sizeof(B_GameMode_C_GetPickupSpawnDelay) == 0x000018, "Wrong size on B_GameMode_C_GetPickupSpawnDelay");
static_assert(offsetof(B_GameMode_C_GetPickupSpawnDelay, ReturnValue) == 0x000000, "Member 'B_GameMode_C_GetPickupSpawnDelay::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPickupSpawnDelay, CallFunc_RandomInteger_ReturnValue) == 0x000008, "Member 'B_GameMode_C_GetPickupSpawnDelay::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPickupSpawnDelay, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'B_GameMode_C_GetPickupSpawnDelay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPickupSpawnDelay, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'B_GameMode_C_GetPickupSpawnDelay::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetPlayersWhoWantsToPlayCount
// 0x0040 (0x0040 - 0x0000)
struct B_GameMode_C_GetPlayersWhoWantsToPlayCount final
{
public:
	int32                                         PlayersWhoWantsToPlayCount;                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerCount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetPlayersWhoWantsToPlayCount) == 0x000008, "Wrong alignment on B_GameMode_C_GetPlayersWhoWantsToPlayCount");
static_assert(sizeof(B_GameMode_C_GetPlayersWhoWantsToPlayCount) == 0x000040, "Wrong size on B_GameMode_C_GetPlayersWhoWantsToPlayCount");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, PlayersWhoWantsToPlayCount) == 0x000000, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::PlayersWhoWantsToPlayCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, PlayerCount) == 0x000004, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::PlayerCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, Temp_int_Variable) == 0x000010, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, CallFunc_Array_Get_Item) == 0x000020, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, K2Node_DynamicCast_AsB_Player_State) == 0x000030, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, CallFunc_Not_PreBool_ReturnValue) == 0x00003A, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetPlayersWhoWantsToPlayCount, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'B_GameMode_C_GetPlayersWhoWantsToPlayCount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.DetermineNextMapFromVotes
// 0x0228 (0x0228 - 0x0000)
struct B_GameMode_C_DetermineNextMapFromVotes final
{
public:
	int32                                         MapIndex;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VotedMapIndex;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentVotedMapIndex;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HighestVotedIndices;                               // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         HighestVote;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            CollectedVotes;                                    // 0x0028(0x0050)(Edit, BlueprintVisible)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              CallFunc_Array_Get_Item_1;                         // 0x0130(0x0040)(HasGetValueTypeHash)
	TMap<int32, int32>                            K2Node_MakeMap_Map;                                // 0x0170(0x0050)()
	TArray<int32>                                 CallFunc_Map_Values_Values;                        // 0x01C0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item_3;                         // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_Map_Keys_Keys;                            // 0x01E8(0x0010)(ReferenceParm)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_212[0x2];                                      // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21A[0x2];                                      // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value_1;                         // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_DetermineNextMapFromVotes) == 0x000008, "Wrong alignment on B_GameMode_C_DetermineNextMapFromVotes");
static_assert(sizeof(B_GameMode_C_DetermineNextMapFromVotes) == 0x000228, "Wrong size on B_GameMode_C_DetermineNextMapFromVotes");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, MapIndex) == 0x000000, "Member 'B_GameMode_C_DetermineNextMapFromVotes::MapIndex' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, VotedMapIndex) == 0x000004, "Member 'B_GameMode_C_DetermineNextMapFromVotes::VotedMapIndex' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CurrentVotedMapIndex) == 0x000008, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CurrentVotedMapIndex' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, HighestVotedIndices) == 0x000010, "Member 'B_GameMode_C_DetermineNextMapFromVotes::HighestVotedIndices' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, HighestVote) == 0x000020, "Member 'B_GameMode_C_DetermineNextMapFromVotes::HighestVote' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CollectedVotes) == 0x000028, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CollectedVotes' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_GetGameInstance_ReturnValue) == 0x000078, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_GetGameInstance_ReturnValue_1) == 0x000080, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_AsB_Game_Instance) == 0x000088, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000098, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_bSuccess_1) == 0x0000A0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000A8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000B0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_bSuccess_2) == 0x0000B8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, Temp_int_Loop_Counter_Variable) == 0x0000BC, "Member 'B_GameMode_C_DetermineNextMapFromVotes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Add_IntInt_ReturnValue) == 0x0000C0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, Temp_int_Array_Index_Variable) == 0x0000C4, "Member 'B_GameMode_C_DetermineNextMapFromVotes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, Temp_int_Loop_Counter_Variable_1) == 0x0000C8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000CC, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_GetGameInstance_ReturnValue_3) == 0x0000D0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000D8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x0000E0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_bSuccess_3) == 0x0000E8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000E9, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, Temp_int_Loop_Counter_Variable_2) == 0x0000EC, "Member 'B_GameMode_C_DetermineNextMapFromVotes::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000F0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, Temp_int_Array_Index_Variable_1) == 0x0000F4, "Member 'B_GameMode_C_DetermineNextMapFromVotes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_GetGameState_ReturnValue) == 0x0000F8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Length_ReturnValue) == 0x000100, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Less_IntInt_ReturnValue) == 0x000104, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Greater_IntInt_ReturnValue) == 0x000105, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Length_ReturnValue_1) == 0x000108, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_RandomInteger_ReturnValue) == 0x00010C, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_GetGameState_ReturnValue_1) == 0x000110, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Get_Item) == 0x000118, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_AsB_Game_State) == 0x000120, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_bSuccess_4) == 0x000128, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Get_Item_1) == 0x000130, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_MakeMap_Map) == 0x000170, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Map_Values_Values) == 0x0001C0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Get_Item_2) == 0x0001D0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Length_ReturnValue_2) == 0x0001D4, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001D8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, Temp_int_Array_Index_Variable_2) == 0x0001DC, "Member 'B_GameMode_C_DetermineNextMapFromVotes::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Get_Item_3) == 0x0001E0, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Map_Keys_Keys) == 0x0001E8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_AsB_Player_State) == 0x0001F8, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, K2Node_DynamicCast_bSuccess_5) == 0x000200, "Member 'B_GameMode_C_DetermineNextMapFromVotes::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Get_Item_4) == 0x000204, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Add_ReturnValue) == 0x000208, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Map_Find_Value) == 0x00020C, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Map_Find_ReturnValue) == 0x000210, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000211, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Array_Length_ReturnValue_3) == 0x000214, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Less_IntInt_ReturnValue_2) == 0x000218, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000219, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Map_Find_Value_1) == 0x00021C, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Map_Find_ReturnValue_1) == 0x000220, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNextMapFromVotes, CallFunc_Add_IntInt_ReturnValue_3) == 0x000224, "Member 'B_GameMode_C_DetermineNextMapFromVotes::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleEndMatchForPlayers
// 0x0108 (0x0108 - 0x0000)
struct B_GameMode_C_HandleEndMatchForPlayers final
{
public:
	double                                        MinimumTrackTime;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       CurrentPlayerState;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIdleKickEnabled_bIsEnabled;             // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasPlayerBotBehaviour_IsProbablyBot;      // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_4;               // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item_1;                         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetWitchesCount_WitchesCount;             // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Find_Value;                           // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerInWinnerTeam_InWinnerTeam;        // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_HandleGrantExp_TotalGrantedXp;            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DevelopmentBuild_ReturnValue;             // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDeveloperModeSubsystem*                CallFunc_GetEngineSubsystem_ReturnValue;           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WithEditor_ReturnValue;                   // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF[0x1];                                       // 0x00EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleEndMatchForPlayers) == 0x000008, "Wrong alignment on B_GameMode_C_HandleEndMatchForPlayers");
static_assert(sizeof(B_GameMode_C_HandleEndMatchForPlayers) == 0x000108, "Wrong size on B_GameMode_C_HandleEndMatchForPlayers");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, MinimumTrackTime) == 0x000000, "Member 'B_GameMode_C_HandleEndMatchForPlayers::MinimumTrackTime' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CurrentPlayerState) == 0x000008, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CurrentPlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'B_GameMode_C_HandleEndMatchForPlayers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_AsB_Game_State) == 0x000020, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GetGameState_ReturnValue_1) == 0x000030, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, Temp_int_Array_Index_Variable) == 0x000038, "Member 'B_GameMode_C_HandleEndMatchForPlayers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_AsB_Game_State_1) == 0x000040, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'B_GameMode_C_HandleEndMatchForPlayers::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000054, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GetGameState_ReturnValue_2) == 0x000060, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GetGameState_ReturnValue_3) == 0x000068, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_AsB_Game_State_2) == 0x000070, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_bSuccess_2) == 0x000078, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_IsIdleKickEnabled_bIsEnabled) == 0x000079, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_IsIdleKickEnabled_bIsEnabled' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Array_Get_Item) == 0x000080, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_AsB_Player_State) == 0x000090, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_bSuccess_3) == 0x000098, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Less_IntInt_ReturnValue) == 0x000099, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_IsValid_ReturnValue) == 0x00009A, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_HasPlayerBotBehaviour_IsProbablyBot) == 0x00009B, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_HasPlayerBotBehaviour_IsProbablyBot' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, Temp_int_Array_Index_Variable_1) == 0x00009C, "Member 'B_GameMode_C_HandleEndMatchForPlayers::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GetGameState_ReturnValue_4) == 0x0000A0, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GetGameState_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Array_Get_Item_1) == 0x0000A8, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Array_Length_ReturnValue_2) == 0x0000B0, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_AsB_Player_State_1) == 0x0000B8, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_bSuccess_4) == 0x0000C0, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C1, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GetWitchesCount_WitchesCount) == 0x0000C2, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GetWitchesCount_WitchesCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Map_Find_Value) == 0x0000C4, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Map_Find_ReturnValue) == 0x0000C8, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_IsPlayerInWinnerTeam_InWinnerTeam) == 0x0000C9, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_IsPlayerInWinnerTeam_InWinnerTeam' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000CC, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_BooleanAND_ReturnValue) == 0x0000D0, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_HandleGrantExp_TotalGrantedXp) == 0x0000D4, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_HandleGrantExp_TotalGrantedXp' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000D8, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_DevelopmentBuild_ReturnValue) == 0x0000D9, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_DevelopmentBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GetEngineSubsystem_ReturnValue) == 0x0000E0, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_BooleanAND_ReturnValue_1) == 0x0000E8, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_WithEditor_ReturnValue) == 0x0000E9, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_WithEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_BooleanOR_ReturnValue) == 0x0000EA, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000EB, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_BooleanOR_ReturnValue_1) == 0x0000EC, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_BooleanAND_ReturnValue_2) == 0x0000ED, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_BooleanOR_ReturnValue_2) == 0x0000EE, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, CallFunc_GetGameInstance_ReturnValue) == 0x0000F0, "Member 'B_GameMode_C_HandleEndMatchForPlayers::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_AsB_Game_Instance) == 0x0000F8, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleEndMatchForPlayers, K2Node_DynamicCast_bSuccess_5) == 0x000100, "Member 'B_GameMode_C_HandleEndMatchForPlayers::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.DetermineNewMapsForVote
// 0x0180 (0x0180 - 0x0000)
struct B_GameMode_C_DetermineNewMapsForVote final
{
public:
	bool                                          NewMapsNeeded;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerAmount;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CurrentMapIsCustom;                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              CurrentOpenedMap;                                  // 0x0010(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSMapData                              RandomMap;                                         // 0x0050(0x0040)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FSMapData>                      Maps;                                              // 0x0090(0x0010)(Edit, BlueprintVisible)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLevelName_ReturnValue;          // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FSMapData                              CallFunc_GetSpecificMapFromLevelName_MapData;      // 0x0110(0x0040)(HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MapCycleIsEmpty_IsEmpty;                  // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x017B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_DetermineNewMapsForVote) == 0x000008, "Wrong alignment on B_GameMode_C_DetermineNewMapsForVote");
static_assert(sizeof(B_GameMode_C_DetermineNewMapsForVote) == 0x000180, "Wrong size on B_GameMode_C_DetermineNewMapsForVote");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, NewMapsNeeded) == 0x000000, "Member 'B_GameMode_C_DetermineNewMapsForVote::NewMapsNeeded' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, PlayerAmount) == 0x000004, "Member 'B_GameMode_C_DetermineNewMapsForVote::PlayerAmount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CurrentMapIsCustom) == 0x000008, "Member 'B_GameMode_C_DetermineNewMapsForVote::CurrentMapIsCustom' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CurrentOpenedMap) == 0x000010, "Member 'B_GameMode_C_DetermineNewMapsForVote::CurrentOpenedMap' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, RandomMap) == 0x000050, "Member 'B_GameMode_C_DetermineNewMapsForVote::RandomMap' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, Maps) == 0x000090, "Member 'B_GameMode_C_DetermineNewMapsForVote::Maps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_GetGameInstance_ReturnValue) == 0x0000A0, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_GetGameInstance_ReturnValue_1) == 0x0000A8, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_AsB_Game_Instance) == 0x0000B0, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x0000C0, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_bSuccess_1) == 0x0000C8, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_Not_PreBool_ReturnValue) == 0x0000C9, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0000CA, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000D0, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000D8, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_bSuccess_2) == 0x0000E0, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x0000E1, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_GetGameState_ReturnValue) == 0x0000E8, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_AsB_Game_State) == 0x0000F0, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_bSuccess_3) == 0x0000F8, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_GetCurrentLevelName_ReturnValue) == 0x000100, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_GetCurrentLevelName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_GetSpecificMapFromLevelName_MapData) == 0x000110, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_GetSpecificMapFromLevelName_MapData' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_GetGameInstance_ReturnValue_3) == 0x000150, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_GetGameInstance_ReturnValue_4) == 0x000158, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x000160, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_bSuccess_4) == 0x000168, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000170, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, K2Node_DynamicCast_bSuccess_5) == 0x000178, "Member 'B_GameMode_C_DetermineNewMapsForVote::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_MapCycleIsEmpty_IsEmpty) == 0x000179, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_MapCycleIsEmpty_IsEmpty' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_BooleanAND_ReturnValue) == 0x00017A, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_BooleanAND_ReturnValue_1) == 0x00017B, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_DetermineNewMapsForVote, CallFunc_Array_Add_ReturnValue) == 0x00017C, "Member 'B_GameMode_C_DetermineNewMapsForVote::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnAMagicRelict
// 0x0190 (0x0190 - 0x0000)
struct B_GameMode_C_SpawnAMagicRelict final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       RelevantToTeam;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         HunterPowerups;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UClass*>                         WitchPowerups;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_PowerupParametersSubsystem_C*        CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       Temp_byte_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item_2;                         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPowerupParameters*                     CallFunc_GetPowerupParameters_PowerupParameters;   // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_MatchParametersSubsystem_C*          CallFunc_GetWorldSubsystem_ReturnValue_1;          // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_3;                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_PowerupParametersSubsystem_C*        CallFunc_GetWorldSubsystem_ReturnValue_2;          // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_Select_Default;                             // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPowerupParameters*                     CallFunc_GetPowerupParameters_PowerupParameters_1; // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0120(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnAMagicRelict) == 0x000010, "Wrong alignment on B_GameMode_C_SpawnAMagicRelict");
static_assert(sizeof(B_GameMode_C_SpawnAMagicRelict) == 0x000190, "Wrong size on B_GameMode_C_SpawnAMagicRelict");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, Location) == 0x000000, "Member 'B_GameMode_C_SpawnAMagicRelict::Location' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, RelevantToTeam) == 0x000018, "Member 'B_GameMode_C_SpawnAMagicRelict::RelevantToTeam' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, HunterPowerups) == 0x000020, "Member 'B_GameMode_C_SpawnAMagicRelict::HunterPowerups' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, WitchPowerups) == 0x000030, "Member 'B_GameMode_C_SpawnAMagicRelict::WitchPowerups' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'B_GameMode_C_SpawnAMagicRelict::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000048, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, Temp_int_Array_Index_Variable) == 0x000054, "Member 'B_GameMode_C_SpawnAMagicRelict::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, Temp_int_Loop_Counter_Variable_1) == 0x000058, "Member 'B_GameMode_C_SpawnAMagicRelict::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, Temp_int_Array_Index_Variable_1) == 0x000060, "Member 'B_GameMode_C_SpawnAMagicRelict::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, Temp_class_Variable) == 0x000068, "Member 'B_GameMode_C_SpawnAMagicRelict::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_RandomInteger_ReturnValue) == 0x000074, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Get_Item) == 0x000080, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_RandomInteger_ReturnValue_1) == 0x000088, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, Temp_byte_Variable) == 0x000098, "Member 'B_GameMode_C_SpawnAMagicRelict::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Get_Item_2) == 0x0000A0, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Length_ReturnValue_2) == 0x0000A8, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Add_ReturnValue) == 0x0000AC, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_GetPowerupParameters_PowerupParameters) == 0x0000B8, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_GetPowerupParameters_PowerupParameters' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_GetWorldSubsystem_ReturnValue_1) == 0x0000C0, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_GetWorldSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Get_Item_3) == 0x0000C8, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Length_ReturnValue_3) == 0x0000D0, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Array_Add_ReturnValue_1) == 0x0000D4, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000D8, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_GetWorldSubsystem_ReturnValue_2) == 0x0000E0, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_GetWorldSubsystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, K2Node_Select_Default) == 0x0000E8, "Member 'B_GameMode_C_SpawnAMagicRelict::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_GetPowerupParameters_PowerupParameters_1) == 0x0000F0, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_GetPowerupParameters_PowerupParameters_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_IsValidClass_ReturnValue) == 0x0000F8, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_Add_VectorVector_ReturnValue) == 0x000100, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_MakeTransform_ReturnValue) == 0x000120, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000180, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnAMagicRelict, CallFunc_FinishSpawningActor_ReturnValue) == 0x000188, "Member 'B_GameMode_C_SpawnAMagicRelict::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SpawnMagicRelict
// 0x00B0 (0x00B0 - 0x0000)
struct B_GameMode_C_SpawnMagicRelict final
{
public:
	TArray<struct FVector>                        PossibleRelictPositions;                           // 0x0000(0x0010)(Edit, BlueprintVisible)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Hunter_C*                            K2Node_DynamicCast_AsB_Hunter;                     // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SpawnMagicRelict) == 0x000008, "Wrong alignment on B_GameMode_C_SpawnMagicRelict");
static_assert(sizeof(B_GameMode_C_SpawnMagicRelict) == 0x0000B0, "Wrong size on B_GameMode_C_SpawnMagicRelict");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, PossibleRelictPositions) == 0x000000, "Member 'B_GameMode_C_SpawnMagicRelict::PossibleRelictPositions' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Array_Length_ReturnValue_1) == 0x00001C, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, Temp_int_Array_Index_Variable) == 0x000024, "Member 'B_GameMode_C_SpawnMagicRelict::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, K2Node_DynamicCast_AsB_Player_State) == 0x000030, "Member 'B_GameMode_C_SpawnMagicRelict::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_GameMode_C_SpawnMagicRelict::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_K2_GetPawn_ReturnValue) == 0x000040, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000049, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, K2Node_DynamicCast_AsB_Hunter) == 0x000050, "Member 'B_GameMode_C_SpawnMagicRelict::K2Node_DynamicCast_AsB_Hunter' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'B_GameMode_C_SpawnMagicRelict::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000078, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, Temp_int_Loop_Counter_Variable) == 0x00007C, "Member 'B_GameMode_C_SpawnMagicRelict::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Array_Length_ReturnValue_2) == 0x000080, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_RandomInteger_ReturnValue) == 0x000088, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Add_IntInt_ReturnValue) == 0x0000A8, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SpawnMagicRelict, CallFunc_Array_Add_ReturnValue) == 0x0000AC, "Member 'B_GameMode_C_SpawnMagicRelict::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HasPlayerBotBehaviour
// 0x00D8 (0x00D8 - 0x0000)
struct B_GameMode_C_HasPlayerBotBehaviour final
{
public:
	class AB_PlayerState_C*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsProbablyBot;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinimumSeconds;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Participation;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       CurrentPlayerState;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_Now_ReturnValue;                          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWitchScoreStat_Stat;                   // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetAntiBotTravelRequirement_Distance;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHunterScoreStat_Stat;                  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHunterScoreStat_Stat_1;                // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetHunterScoreStat_Stat_2;                // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetHunterScoreStat_Stat_3;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HasPlayerBotBehaviour) == 0x000008, "Wrong alignment on B_GameMode_C_HasPlayerBotBehaviour");
static_assert(sizeof(B_GameMode_C_HasPlayerBotBehaviour) == 0x0000D8, "Wrong size on B_GameMode_C_HasPlayerBotBehaviour");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, PlayerState) == 0x000000, "Member 'B_GameMode_C_HasPlayerBotBehaviour::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, IsProbablyBot) == 0x000008, "Member 'B_GameMode_C_HasPlayerBotBehaviour::IsProbablyBot' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, MinimumSeconds) == 0x000010, "Member 'B_GameMode_C_HasPlayerBotBehaviour::MinimumSeconds' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, Participation) == 0x000018, "Member 'B_GameMode_C_HasPlayerBotBehaviour::Participation' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CurrentPlayerState) == 0x000020, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CurrentPlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Now_ReturnValue) == 0x000028, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Now_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000038, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GetTotalSeconds_ReturnValue) == 0x000040, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000044, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GetWitchScoreStat_Stat) == 0x000048, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GetWitchScoreStat_Stat' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000050, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GetAntiBotTravelRequirement_Distance) == 0x000058, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GetAntiBotTravelRequirement_Distance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GetHunterScoreStat_Stat) == 0x000060, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GetHunterScoreStat_Stat' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000068, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000070, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GetHunterScoreStat_Stat_1) == 0x000088, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GetHunterScoreStat_Stat_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GetHunterScoreStat_Stat_2) == 0x000090, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GetHunterScoreStat_Stat_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000099, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GetHunterScoreStat_Stat_3) == 0x0000A0, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GetHunterScoreStat_Stat_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x0000A8, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_BooleanOR_ReturnValue) == 0x0000A9, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_BooleanOR_ReturnValue_1) == 0x0000B8, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000C0, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000C8, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HasPlayerBotBehaviour, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x0000D0, "Member 'B_GameMode_C_HasPlayerBotBehaviour::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.TickRetryStartNewGameCountdown
// 0x0020 (0x0020 - 0x0000)
struct B_GameMode_C_TickRetryStartNewGameCountdown final
{
public:
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_TickRetryStartNewGameCountdown) == 0x000008, "Wrong alignment on B_GameMode_C_TickRetryStartNewGameCountdown");
static_assert(sizeof(B_GameMode_C_TickRetryStartNewGameCountdown) == 0x000020, "Wrong size on B_GameMode_C_TickRetryStartNewGameCountdown");
static_assert(offsetof(B_GameMode_C_TickRetryStartNewGameCountdown, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000000, "Member 'B_GameMode_C_TickRetryStartNewGameCountdown::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickRetryStartNewGameCountdown, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'B_GameMode_C_TickRetryStartNewGameCountdown::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickRetryStartNewGameCountdown, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'B_GameMode_C_TickRetryStartNewGameCountdown::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickRetryStartNewGameCountdown, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'B_GameMode_C_TickRetryStartNewGameCountdown::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.TickKickVote
// 0x01C0 (0x01C0 - 0x0000)
struct B_GameMode_C_TickKickVote final
{
public:
	int32                                         NoVotes;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         YesVotes;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountKickVotes;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountKickVoting;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_2;               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerController_C*                  K2Node_DynamicCast_AsB_Player_Controller;          // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_3;               // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_4;               // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_3;               // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_5;               // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_6;               // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_4;               // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_5;               // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FMax_ReturnValue;                         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_7;               // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item_1;                         // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12B[0x1];                                      // 0x012B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_8;               // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_6;               // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue_1;                       // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_193[0x1];                                      // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x01A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A7[0x1];                                      // 0x01A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B2[0x2];                                      // 0x01B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_TickKickVote) == 0x000008, "Wrong alignment on B_GameMode_C_TickKickVote");
static_assert(sizeof(B_GameMode_C_TickKickVote) == 0x0001C0, "Wrong size on B_GameMode_C_TickKickVote");
static_assert(offsetof(B_GameMode_C_TickKickVote, NoVotes) == 0x000000, "Member 'B_GameMode_C_TickKickVote::NoVotes' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, YesVotes) == 0x000004, "Member 'B_GameMode_C_TickKickVote::YesVotes' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CountKickVotes) == 0x000008, "Member 'B_GameMode_C_TickKickVote::CountKickVotes' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CountKickVoting) == 0x00000C, "Member 'B_GameMode_C_TickKickVote::CountKickVoting' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue) == 0x000010, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue_1) == 0x000018, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Game_State) == 0x000020, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Game_State_1) == 0x000030, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Variable) == 0x00003C, "Member 'B_GameMode_C_TickKickVote::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Variable_1) == 0x000040, "Member 'B_GameMode_C_TickKickVote::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Array_Index_Variable) == 0x000044, "Member 'B_GameMode_C_TickKickVote::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue_2) == 0x000048, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Game_State_2) == 0x000050, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Game_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Variable_2) == 0x00005C, "Member 'B_GameMode_C_TickKickVote::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Player_Controller) == 0x000060, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_3) == 0x000068, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue_3) == 0x000070, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Array_Index_Variable_1) == 0x000078, "Member 'B_GameMode_C_TickKickVote::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'B_GameMode_C_TickKickVote::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Array_Get_Item) == 0x000080, "Member 'B_GameMode_C_TickKickVote::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Player_State) == 0x000088, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_4) == 0x000090, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue_4) == 0x000098, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Game_State_3) == 0x0000A0, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Game_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_5) == 0x0000A8, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue_5) == 0x0000B0, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue_6) == 0x0000B8, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Game_State_4) == 0x0000C0, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Game_State_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_6) == 0x0000C8, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Game_State_5) == 0x0000D0, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Game_State_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_7) == 0x0000D8, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000D9, "Member 'B_GameMode_C_TickKickVote::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'B_GameMode_C_TickKickVote::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Loop_Counter_Variable) == 0x0000E8, "Member 'B_GameMode_C_TickKickVote::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_FMax_ReturnValue) == 0x0000F0, "Member 'B_GameMode_C_TickKickVote::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Add_IntInt_ReturnValue) == 0x0000F8, "Member 'B_GameMode_C_TickKickVote::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Variable_3) == 0x0000FC, "Member 'B_GameMode_C_TickKickVote::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue_7) == 0x000100, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Loop_Counter_Variable_1) == 0x000108, "Member 'B_GameMode_C_TickKickVote::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Array_Get_Item_1) == 0x000110, "Member 'B_GameMode_C_TickKickVote::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Array_Length_ReturnValue_1) == 0x000118, "Member 'B_GameMode_C_TickKickVote::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Player_State_1) == 0x000120, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_8) == 0x000128, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Less_IntInt_ReturnValue) == 0x000129, "Member 'B_GameMode_C_TickKickVote::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Less_IntInt_ReturnValue_1) == 0x00012A, "Member 'B_GameMode_C_TickKickVote::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Add_IntInt_ReturnValue_1) == 0x00012C, "Member 'B_GameMode_C_TickKickVote::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameState_ReturnValue_8) == 0x000130, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameState_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_real_Variable) == 0x000138, "Member 'B_GameMode_C_TickKickVote::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_AsB_Game_State_6) == 0x000140, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_AsB_Game_State_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_DynamicCast_bSuccess_9) == 0x000148, "Member 'B_GameMode_C_TickKickVote::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000150, "Member 'B_GameMode_C_TickKickVote::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_FMax_ReturnValue_1) == 0x000158, "Member 'B_GameMode_C_TickKickVote::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Divide_IntInt_ReturnValue) == 0x000160, "Member 'B_GameMode_C_TickKickVote::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000164, "Member 'B_GameMode_C_TickKickVote::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Greater_IntInt_ReturnValue) == 0x000168, "Member 'B_GameMode_C_TickKickVote::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Add_IntInt_ReturnValue_2) == 0x00016C, "Member 'B_GameMode_C_TickKickVote::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000170, "Member 'B_GameMode_C_TickKickVote::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_real_Variable_1) == 0x000178, "Member 'B_GameMode_C_TickKickVote::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Add_IntInt_ReturnValue_3) == 0x000180, "Member 'B_GameMode_C_TickKickVote::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GetGameMode_ReturnValue) == 0x000188, "Member 'B_GameMode_C_TickKickVote::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000190, "Member 'B_GameMode_C_TickKickVote::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000191, "Member 'B_GameMode_C_TickKickVote::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_BooleanAND_ReturnValue) == 0x000192, "Member 'B_GameMode_C_TickKickVote::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Add_IntInt_ReturnValue_4) == 0x000194, "Member 'B_GameMode_C_TickKickVote::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Variable_4) == 0x000198, "Member 'B_GameMode_C_TickKickVote::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Add_IntInt_ReturnValue_5) == 0x00019C, "Member 'B_GameMode_C_TickKickVote::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_int_Variable_5) == 0x0001A0, "Member 'B_GameMode_C_TickKickVote::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, Temp_bool_Variable) == 0x0001A4, "Member 'B_GameMode_C_TickKickVote::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0001A5, "Member 'B_GameMode_C_TickKickVote::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_BooleanOR_ReturnValue) == 0x0001A6, "Member 'B_GameMode_C_TickKickVote::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, K2Node_Select_Default) == 0x0001A8, "Member 'B_GameMode_C_TickKickVote::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_BooleanOR_ReturnValue_1) == 0x0001B0, "Member 'B_GameMode_C_TickKickVote::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_BooleanOR_ReturnValue_2) == 0x0001B1, "Member 'B_GameMode_C_TickKickVote::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Add_IntInt_ReturnValue_6) == 0x0001B4, "Member 'B_GameMode_C_TickKickVote::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_TickKickVote, CallFunc_Add_IntInt_ReturnValue_7) == 0x0001B8, "Member 'B_GameMode_C_TickKickVote::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.CheckRandomTimerForWaitState
// 0x0078 (0x0078 - 0x0000)
struct B_GameMode_C_CheckRandomTimerForWaitState final
{
public:
	bool                                          IsRandom;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerCount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_2;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_CheckRandomTimerForWaitState) == 0x000008, "Wrong alignment on B_GameMode_C_CheckRandomTimerForWaitState");
static_assert(sizeof(B_GameMode_C_CheckRandomTimerForWaitState) == 0x000078, "Wrong size on B_GameMode_C_CheckRandomTimerForWaitState");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, IsRandom) == 0x000000, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::IsRandom' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, PlayerCount) == 0x000004, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::PlayerCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_GetGameInstance_ReturnValue) == 0x000010, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_DynamicCast_AsB_Game_State) == 0x000018, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_DynamicCast_AsB_Game_Instance) == 0x000028, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_GetGameState_ReturnValue_1) == 0x000038, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_GetGameState_ReturnValue_2) == 0x000040, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_GetGameState_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_DynamicCast_AsB_Game_State_1) == 0x000048, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_HasRoundStarted_RoundHasStarted) == 0x000058, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_BooleanOR_ReturnValue) == 0x000059, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_BooleanOR_ReturnValue_1) == 0x00005A, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_GetGameInstance_ReturnValue_1) == 0x000060, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000068, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_DynamicCast_bSuccess_3) == 0x000070, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, CallFunc_Greater_IntInt_ReturnValue) == 0x000071, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckRandomTimerForWaitState, K2Node_SwitchEnum_CmpSuccess) == 0x000072, "Member 'B_GameMode_C_CheckRandomTimerForWaitState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.CalculateAndReplicateBestMedals
// 0x0070 (0x0070 - 0x0000)
struct B_GameMode_C_CalculateAndReplicateBestMedals final
{
public:
	TArray<struct FSCalculatedScoreStat>          ScoreStatMedals;                                   // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<class UB_CalculatedScoreStatToSort_C*> AllScoreStatsSorted;                               // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_CalculatedScoreStatToSort_C*         CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UB_CalculatedScoreStatToSort_C*> CallFunc_GetAllScoreStatsSorted_SortedCalculatedScoreStats; // 0x0060(0x0010)(ReferenceParm)
};
static_assert(alignof(B_GameMode_C_CalculateAndReplicateBestMedals) == 0x000008, "Wrong alignment on B_GameMode_C_CalculateAndReplicateBestMedals");
static_assert(sizeof(B_GameMode_C_CalculateAndReplicateBestMedals) == 0x000070, "Wrong size on B_GameMode_C_CalculateAndReplicateBestMedals");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, ScoreStatMedals) == 0x000000, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::ScoreStatMedals' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, AllScoreStatsSorted) == 0x000010, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::AllScoreStatsSorted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, Temp_int_Variable) == 0x000020, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_GetGameState_ReturnValue) == 0x000028, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, K2Node_DynamicCast_AsB_Game_State) == 0x000030, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_Subtract_IntInt_ReturnValue) == 0x00003C, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000040, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_Array_Get_Item) == 0x000048, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_Greater_IntInt_ReturnValue) == 0x000054, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CalculateAndReplicateBestMedals, CallFunc_GetAllScoreStatsSorted_SortedCalculatedScoreStats) == 0x000060, "Member 'B_GameMode_C_CalculateAndReplicateBestMedals::CallFunc_GetAllScoreStatsSorted_SortedCalculatedScoreStats' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SortScoreStat
// 0x0048 (0x0048 - 0x0000)
struct B_GameMode_C_SortScoreStat final
{
public:
	class UObject*                                A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                B;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_CalculatedScoreStatToSort_C*         K2Node_DynamicCast_AsB_Calculated_Score_Stat_to_Sort; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_CalculatedScoreStatToSort_C*         K2Node_DynamicCast_AsB_Calculated_Score_Stat_to_Sort_1; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SortScoreStat) == 0x000008, "Wrong alignment on B_GameMode_C_SortScoreStat");
static_assert(sizeof(B_GameMode_C_SortScoreStat) == 0x000048, "Wrong size on B_GameMode_C_SortScoreStat");
static_assert(offsetof(B_GameMode_C_SortScoreStat, A) == 0x000000, "Member 'B_GameMode_C_SortScoreStat::A' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, B) == 0x000008, "Member 'B_GameMode_C_SortScoreStat::B' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, Return) == 0x000010, "Member 'B_GameMode_C_SortScoreStat::Return' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, K2Node_DynamicCast_AsB_Calculated_Score_Stat_to_Sort) == 0x000018, "Member 'B_GameMode_C_SortScoreStat::K2Node_DynamicCast_AsB_Calculated_Score_Stat_to_Sort' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_GameMode_C_SortScoreStat::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, K2Node_DynamicCast_AsB_Calculated_Score_Stat_to_Sort_1) == 0x000028, "Member 'B_GameMode_C_SortScoreStat::K2Node_DynamicCast_AsB_Calculated_Score_Stat_to_Sort_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_GameMode_C_SortScoreStat::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000031, "Member 'B_GameMode_C_SortScoreStat::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000038, "Member 'B_GameMode_C_SortScoreStat::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SortScoreStat, CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast) == 0x000040, "Member 'B_GameMode_C_SortScoreStat::CallFunc_GreaterEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetAllScoreStatsSorted
// 0x00B8 (0x00B8 - 0x0000)
struct B_GameMode_C_GetAllScoreStatsSorted final
{
public:
	TArray<class UB_CalculatedScoreStatToSort_C*> SortedCalculatedScoreStats;                        // 0x0000(0x0010)(Parm, OutParm)
	TArray<class UB_CalculatedScoreStatToSort_C*> CalculatedStatsToSort;                             // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB, bool* Result)> K2Node_CreateDelegate_OutputDelegate;              // 0x0054(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSCalculatedScoreStat>          CallFunc_GetAllCalculatedStats_CalculatedScoreStats; // 0x0068(0x0010)(ReferenceParm)
	struct FSCalculatedScoreStat                  CallFunc_Array_Get_Item_1;                         // 0x0078(0x0018)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMedalDisqualified_IsDisqualified;       // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_CalculatedScoreStatToSort_C*         CallFunc_CreateObject_Object;                      // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UB_CalculatedScoreStatToSort_C*         CallFunc_Array_Get_Item_2;                         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetAllScoreStatsSorted) == 0x000008, "Wrong alignment on B_GameMode_C_GetAllScoreStatsSorted");
static_assert(sizeof(B_GameMode_C_GetAllScoreStatsSorted) == 0x0000B8, "Wrong size on B_GameMode_C_GetAllScoreStatsSorted");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, SortedCalculatedScoreStats) == 0x000000, "Member 'B_GameMode_C_GetAllScoreStatsSorted::SortedCalculatedScoreStats' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CalculatedStatsToSort) == 0x000010, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CalculatedStatsToSort' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, Temp_int_Array_Index_Variable) == 0x000020, "Member 'B_GameMode_C_GetAllScoreStatsSorted::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'B_GameMode_C_GetAllScoreStatsSorted::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'B_GameMode_C_GetAllScoreStatsSorted::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_GetGameState_ReturnValue) == 0x000030, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Array_Get_Item) == 0x000038, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, K2Node_DynamicCast_AsB_Player_State) == 0x000048, "Member 'B_GameMode_C_GetAllScoreStatsSorted::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_GameMode_C_GetAllScoreStatsSorted::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, K2Node_CreateDelegate_OutputDelegate) == 0x000054, "Member 'B_GameMode_C_GetAllScoreStatsSorted::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_GetAllCalculatedStats_CalculatedScoreStats) == 0x000068, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_GetAllCalculatedStats_CalculatedScoreStats' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Array_Length_ReturnValue_1) == 0x000090, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_IsMedalDisqualified_IsDisqualified) == 0x000094, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_IsMedalDisqualified_IsDisqualified' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Less_IntInt_ReturnValue) == 0x000095, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_CreateObject_Object) == 0x000098, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_CreateObject_Object' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, Temp_int_Loop_Counter_Variable_1) == 0x0000A0, "Member 'B_GameMode_C_GetAllScoreStatsSorted::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Array_Add_ReturnValue) == 0x0000A4, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Array_Get_Item_2) == 0x0000A8, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B0, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetAllScoreStatsSorted, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B4, "Member 'B_GameMode_C_GetAllScoreStatsSorted::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.ReplicateSleepingProps
// 0x00E0 (0x00E0 - 0x0000)
struct B_GameMode_C_ReplicateSleepingProps final
{
public:
	class AB_PlayerController_C*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_StaticMeshProp_C*>            AllProps;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class AB_PlayerController_C*                  CurrentPlayerController;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRotator>                       SleepingRotations;                                 // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        SleepingLocations;                                 // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<class AActor*>                         SleepingProps;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop_1;         // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingPropReplicationOptimization_ReturnValue; // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_ReplicateSleepingProps) == 0x000008, "Wrong alignment on B_GameMode_C_ReplicateSleepingProps");
static_assert(sizeof(B_GameMode_C_ReplicateSleepingProps) == 0x0000E0, "Wrong size on B_GameMode_C_ReplicateSleepingProps");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, PlayerController) == 0x000000, "Member 'B_GameMode_C_ReplicateSleepingProps::PlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, AllProps) == 0x000008, "Member 'B_GameMode_C_ReplicateSleepingProps::AllProps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CurrentPlayerController) == 0x000018, "Member 'B_GameMode_C_ReplicateSleepingProps::CurrentPlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, SleepingRotations) == 0x000020, "Member 'B_GameMode_C_ReplicateSleepingProps::SleepingRotations' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, SleepingLocations) == 0x000030, "Member 'B_GameMode_C_ReplicateSleepingProps::SleepingLocations' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, SleepingProps) == 0x000040, "Member 'B_GameMode_C_ReplicateSleepingProps::SleepingProps' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, Temp_int_Array_Index_Variable) == 0x000050, "Member 'B_GameMode_C_ReplicateSleepingProps::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'B_GameMode_C_ReplicateSleepingProps::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, Temp_int_Array_Index_Variable_1) == 0x00005C, "Member 'B_GameMode_C_ReplicateSleepingProps::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_GetGameState_ReturnValue) == 0x000060, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, K2Node_DynamicCast_AsB_Game_State) == 0x000068, "Member 'B_GameMode_C_ReplicateSleepingProps::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'B_GameMode_C_ReplicateSleepingProps::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_GetGameState_ReturnValue_1) == 0x000078, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Array_Get_Item) == 0x000080, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, K2Node_DynamicCast_AsB_Game_State_1) == 0x000088, "Member 'B_GameMode_C_ReplicateSleepingProps::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'B_GameMode_C_ReplicateSleepingProps::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000098, "Member 'B_GameMode_C_ReplicateSleepingProps::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, K2Node_DynamicCast_bSuccess_2) == 0x0000A0, "Member 'B_GameMode_C_ReplicateSleepingProps::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Not_PreBool_ReturnValue) == 0x0000A1, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000A2, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Array_Contains_ReturnValue) == 0x0000A3, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Array_Get_Item_1) == 0x0000A8, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000B0, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Array_Contains_ReturnValue_1) == 0x0000B1, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_BooleanAND_ReturnValue) == 0x0000B2, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Not_PreBool_ReturnValue_3) == 0x0000B3, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B4, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, K2Node_DynamicCast_AsB_Static_Mesh_Prop_1) == 0x0000B8, "Member 'B_GameMode_C_ReplicateSleepingProps::K2Node_DynamicCast_AsB_Static_Mesh_Prop_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, K2Node_DynamicCast_bSuccess_3) == 0x0000C0, "Member 'B_GameMode_C_ReplicateSleepingProps::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Not_PreBool_ReturnValue_4) == 0x0000C1, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_BooleanAND_ReturnValue_2) == 0x0000C2, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Array_Length_ReturnValue) == 0x0000C4, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_BooleanAND_ReturnValue_3) == 0x0000C8, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Less_IntInt_ReturnValue) == 0x0000C9, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Array_Length_ReturnValue_1) == 0x0000CC, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_IsUsingPropReplicationOptimization_ReturnValue) == 0x0000D0, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_IsUsingPropReplicationOptimization_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, Temp_int_Loop_Counter_Variable_1) == 0x0000D4, "Member 'B_GameMode_C_ReplicateSleepingProps::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000D8, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_ReplicateSleepingProps, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000DC, "Member 'B_GameMode_C_ReplicateSleepingProps::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SetKilledWitchToSpectator
// 0x0260 (0x0260 - 0x0000)
struct B_GameMode_C_SetKilledWitchToSpectator final
{
public:
	class AActor*                                 WitchActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           Killer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnAtPlayerStart;                                // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CurrentPawn;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetNewPlayerStartTransform_StartTransform; // 0x00A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0110(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01D0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Spectator_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SetKilledWitchToSpectator) == 0x000010, "Wrong alignment on B_GameMode_C_SetKilledWitchToSpectator");
static_assert(sizeof(B_GameMode_C_SetKilledWitchToSpectator) == 0x000260, "Wrong size on B_GameMode_C_SetKilledWitchToSpectator");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, WitchActor) == 0x000000, "Member 'B_GameMode_C_SetKilledWitchToSpectator::WitchActor' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, Killer) == 0x000008, "Member 'B_GameMode_C_SetKilledWitchToSpectator::Killer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, SpawnAtPlayerStart) == 0x000010, "Member 'B_GameMode_C_SetKilledWitchToSpectator::SpawnAtPlayerStart' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CurrentPawn) == 0x000018, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CurrentPawn' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, SpawnTransform) == 0x000020, "Member 'B_GameMode_C_SetKilledWitchToSpectator::SpawnTransform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, K2Node_DynamicCast_AsPawn) == 0x000080, "Member 'B_GameMode_C_SetKilledWitchToSpectator::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'B_GameMode_C_SetKilledWitchToSpectator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_GetObjectClass_ReturnValue) == 0x000090, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_ClassIsChildOf_ReturnValue) == 0x000098, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_GetNewPlayerStartTransform_StartTransform) == 0x0000A0, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_GetNewPlayerStartTransform_StartTransform' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_GetController_ReturnValue) == 0x000100, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_GetController_ReturnValue_1) == 0x000108, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_GetTransform_ReturnValue) == 0x000110, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_GetControlRotation_ReturnValue) == 0x000170, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_BreakTransform_Location) == 0x000188, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_BreakTransform_Rotation) == 0x0001A0, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_BreakTransform_Scale) == 0x0001B8, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_MakeTransform_ReturnValue) == 0x0001D0, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, K2Node_DynamicCast_AsB_Player_State) == 0x000230, "Member 'B_GameMode_C_SetKilledWitchToSpectator::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, K2Node_DynamicCast_bSuccess_1) == 0x000238, "Member 'B_GameMode_C_SetKilledWitchToSpectator::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000240, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_FinishSpawningActor_ReturnValue) == 0x000248, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SetKilledWitchToSpectator, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000250, "Member 'B_GameMode_C_SetKilledWitchToSpectator::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.CheckEndMatchHuntersDead
// 0x0018 (0x0018 - 0x0000)
struct B_GameMode_C_CheckEndMatchHuntersDead final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetHuntersCount_HuntersCount;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_ByteByte_ReturnValue;           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsRoundEnd_RoundIsEnd;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_CheckEndMatchHuntersDead) == 0x000008, "Wrong alignment on B_GameMode_C_CheckEndMatchHuntersDead");
static_assert(sizeof(B_GameMode_C_CheckEndMatchHuntersDead) == 0x000018, "Wrong size on B_GameMode_C_CheckEndMatchHuntersDead");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, K2Node_DynamicCast_AsB_Game_State) == 0x000008, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, CallFunc_GetHuntersCount_HuntersCount) == 0x000011, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::CallFunc_GetHuntersCount_HuntersCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, CallFunc_HasRoundStarted_RoundHasStarted) == 0x000012, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, CallFunc_LessEqual_ByteByte_ReturnValue) == 0x000013, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::CallFunc_LessEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, CallFunc_IsRoundEnd_RoundIsEnd) == 0x000014, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::CallFunc_IsRoundEnd_RoundIsEnd' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckEndMatchHuntersDead, CallFunc_BooleanAND_ReturnValue_1) == 0x000017, "Member 'B_GameMode_C_CheckEndMatchHuntersDead::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetHuntersCount
// 0x0040 (0x0040 - 0x0000)
struct B_GameMode_C_GetHuntersCount final
{
public:
	uint8                                         HuntersCount;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NumOfHunters;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetHuntersCount) == 0x000008, "Wrong alignment on B_GameMode_C_GetHuntersCount");
static_assert(sizeof(B_GameMode_C_GetHuntersCount) == 0x000040, "Wrong size on B_GameMode_C_GetHuntersCount");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, HuntersCount) == 0x000000, "Member 'B_GameMode_C_GetHuntersCount::HuntersCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, NumOfHunters) == 0x000001, "Member 'B_GameMode_C_GetHuntersCount::NumOfHunters' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, Temp_int_Array_Index_Variable) == 0x000004, "Member 'B_GameMode_C_GetHuntersCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_GetHuntersCount::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_GameMode_C_GetHuntersCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_GameMode_C_GetHuntersCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'B_GameMode_C_GetHuntersCount::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_GameMode_C_GetHuntersCount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'B_GameMode_C_GetHuntersCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'B_GameMode_C_GetHuntersCount::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'B_GameMode_C_GetHuntersCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'B_GameMode_C_GetHuntersCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetHuntersCount, CallFunc_Add_ByteByte_ReturnValue) == 0x000039, "Member 'B_GameMode_C_GetHuntersCount::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.CheckTimerForWaitState
// 0x0048 (0x0048 - 0x0000)
struct B_GameMode_C_CheckTimerForWaitState final
{
public:
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRandomTimerForWaitState_IsRandom;    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetHuntersCount_HuntersCount;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetWitchesCount_WitchesCount;             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue_1;           // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_CheckTimerForWaitState) == 0x000008, "Wrong alignment on B_GameMode_C_CheckTimerForWaitState");
static_assert(sizeof(B_GameMode_C_CheckTimerForWaitState) == 0x000048, "Wrong size on B_GameMode_C_CheckTimerForWaitState");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_GetGameState_ReturnValue) == 0x000000, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_GetGameState_ReturnValue_1) == 0x000008, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, K2Node_DynamicCast_AsB_Game_State) == 0x000010, "Member 'B_GameMode_C_CheckTimerForWaitState::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'B_GameMode_C_CheckTimerForWaitState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, K2Node_DynamicCast_AsB_Game_State_1) == 0x000020, "Member 'B_GameMode_C_CheckTimerForWaitState::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'B_GameMode_C_CheckTimerForWaitState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_HasRoundStarted_RoundHasStarted) == 0x000029, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_GetGameInstance_ReturnValue) == 0x000030, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, K2Node_DynamicCast_AsB_Game_Instance) == 0x000038, "Member 'B_GameMode_C_CheckTimerForWaitState::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, K2Node_DynamicCast_bSuccess_2) == 0x000040, "Member 'B_GameMode_C_CheckTimerForWaitState::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_CheckRandomTimerForWaitState_IsRandom) == 0x000041, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_CheckRandomTimerForWaitState_IsRandom' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_BooleanOR_ReturnValue) == 0x000042, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_BooleanOR_ReturnValue_1) == 0x000043, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_GetHuntersCount_HuntersCount) == 0x000044, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_GetHuntersCount_HuntersCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_Greater_ByteByte_ReturnValue) == 0x000045, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_GetWitchesCount_WitchesCount) == 0x000046, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_GetWitchesCount_WitchesCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckTimerForWaitState, CallFunc_Greater_ByteByte_ReturnValue_1) == 0x000047, "Member 'B_GameMode_C_CheckTimerForWaitState::CallFunc_Greater_ByteByte_ReturnValue_1' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.RandomizeTeamSelection
// 0x02A0 (0x02A0 - 0x0000)
struct B_GameMode_C_RandomizeTeamSelection final
{
public:
	class AB_PlayerState_C*                       CurrentPlayer;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerState*>                   ElectedPlayers;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         AmountOfHunters;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       RandomPlayer;                                      // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class AB_PlayerState_C*>               PendingPlayerTeamChoice;                           // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_1;            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_ByteToDouble_ReturnValue;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_2;            // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_2;            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_3;            // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_3;            // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_4;            // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_4;            // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_5;            // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_5;            // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item_1;                         // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_1;             // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   CallFunc_GetHuntersToSpawn_ReturnValue;            // 0x0160(0x0010)(ReferenceParm)
	TArray<class FString>                         CallFunc_GetHuntersToSpawn_EllectedTests;          // 0x0170(0x0010)(ReferenceParm)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_6;            // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_6;            // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayersWhoWantsToPlayCount_PlayersWhoWantsToPlayCount; // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item_2;                         // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_2;             // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_7;            // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance_7;            // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Max_ReturnValue;                          // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerState*>                   CallFunc_GetHunterPlayersByChance_Players;         // 0x0210(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetPlayersWhoWantsToPlayCount_PlayersWhoWantsToPlayCount_1; // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue_1;                        // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item_3;                         // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State_3;             // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0288(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_RandomizeTeamSelection) == 0x000008, "Wrong alignment on B_GameMode_C_RandomizeTeamSelection");
static_assert(sizeof(B_GameMode_C_RandomizeTeamSelection) == 0x0002A0, "Wrong size on B_GameMode_C_RandomizeTeamSelection");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CurrentPlayer) == 0x000000, "Member 'B_GameMode_C_RandomizeTeamSelection::CurrentPlayer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, ElectedPlayers) == 0x000008, "Member 'B_GameMode_C_RandomizeTeamSelection::ElectedPlayers' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, AmountOfHunters) == 0x000018, "Member 'B_GameMode_C_RandomizeTeamSelection::AmountOfHunters' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, RandomPlayer) == 0x000020, "Member 'B_GameMode_C_RandomizeTeamSelection::RandomPlayer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, PendingPlayerTeamChoice) == 0x000028, "Member 'B_GameMode_C_RandomizeTeamSelection::PendingPlayerTeamChoice' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, Temp_int_Array_Index_Variable) == 0x000038, "Member 'B_GameMode_C_RandomizeTeamSelection::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameInstance_ReturnValue) == 0x000040, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Game_Instance) == 0x000048, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'B_GameMode_C_RandomizeTeamSelection::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_IsDedicatedServer_ReturnValue) == 0x000058, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameState_ReturnValue) == 0x000060, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameInstance_ReturnValue_1) == 0x000068, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Get_Item) == 0x000070, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Game_Instance_1) == 0x000078, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Player_State) == 0x000088, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_2) == 0x000090, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Conv_ByteToDouble_ReturnValue) == 0x000098, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Conv_ByteToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameInstance_ReturnValue_2) == 0x0000B0, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, Temp_int_Loop_Counter_Variable) == 0x0000B8, "Member 'B_GameMode_C_RandomizeTeamSelection::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Game_Instance_2) == 0x0000C0, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Game_Instance_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_3) == 0x0000C8, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Add_IntInt_ReturnValue) == 0x0000CC, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, Temp_int_Array_Index_Variable_2) == 0x0000D0, "Member 'B_GameMode_C_RandomizeTeamSelection::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameState_ReturnValue_1) == 0x0000D8, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Length_ReturnValue_1) == 0x0000E0, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameInstance_ReturnValue_3) == 0x0000E8, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameInstance_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, Temp_int_Loop_Counter_Variable_1) == 0x0000F0, "Member 'B_GameMode_C_RandomizeTeamSelection::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Game_Instance_3) == 0x0000F8, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Game_Instance_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_4) == 0x000100, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Add_IntInt_ReturnValue_1) == 0x000104, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, Temp_int_Loop_Counter_Variable_2) == 0x000108, "Member 'B_GameMode_C_RandomizeTeamSelection::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameInstance_ReturnValue_4) == 0x000110, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameInstance_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Game_Instance_4) == 0x000118, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Game_Instance_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_5) == 0x000120, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Less_IntInt_ReturnValue) == 0x000121, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Add_IntInt_ReturnValue_2) == 0x000124, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameInstance_ReturnValue_5) == 0x000128, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameInstance_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, Temp_int_Array_Index_Variable_3) == 0x000130, "Member 'B_GameMode_C_RandomizeTeamSelection::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Game_Instance_5) == 0x000138, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Game_Instance_5' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_6) == 0x000140, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Get_Item_1) == 0x000148, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Player_State_1) == 0x000150, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Player_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_7) == 0x000158, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetHuntersToSpawn_ReturnValue) == 0x000160, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetHuntersToSpawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetHuntersToSpawn_EllectedTests) == 0x000170, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetHuntersToSpawn_EllectedTests' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameInstance_ReturnValue_6) == 0x000180, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameInstance_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, Temp_int_Loop_Counter_Variable_3) == 0x000188, "Member 'B_GameMode_C_RandomizeTeamSelection::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Game_Instance_6) == 0x000190, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Game_Instance_6' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_8) == 0x000198, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Less_IntInt_ReturnValue_1) == 0x000199, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Conv_IntToString_ReturnValue) == 0x0001A0, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Add_IntInt_ReturnValue_3) == 0x0001B0, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Concat_StrStr_ReturnValue) == 0x0001B8, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetPlayersWhoWantsToPlayCount_PlayersWhoWantsToPlayCount) == 0x0001C8, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetPlayersWhoWantsToPlayCount_PlayersWhoWantsToPlayCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Get_Item_2) == 0x0001D0, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Length_ReturnValue_2) == 0x0001D8, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Player_State_2) == 0x0001E0, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Player_State_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_9) == 0x0001E8, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001E9, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetGameInstance_ReturnValue_7) == 0x0001F0, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetGameInstance_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Map_Find_Value) == 0x0001F8, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Map_Find_ReturnValue) == 0x0001FC, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Game_Instance_7) == 0x000200, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Game_Instance_7' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_10) == 0x000208, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Max_ReturnValue) == 0x00020C, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetHunterPlayersByChance_Players) == 0x000210, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetHunterPlayersByChance_Players' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetPlayersWhoWantsToPlayCount_PlayersWhoWantsToPlayCount_1) == 0x000220, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetPlayersWhoWantsToPlayCount_PlayersWhoWantsToPlayCount_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000228, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Not_PreBool_ReturnValue) == 0x000230, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000238, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_FTrunc_ReturnValue) == 0x000240, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Max_ReturnValue_1) == 0x000244, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Max_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Get_Item_3) == 0x000248, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_GetPlayerName_ReturnValue) == 0x000250, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_AsB_Player_State_3) == 0x000260, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_AsB_Player_State_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, K2Node_DynamicCast_bSuccess_11) == 0x000268, "Member 'B_GameMode_C_RandomizeTeamSelection::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Length_ReturnValue_3) == 0x00026C, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Length_ReturnValue_4) == 0x000270, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Less_IntInt_ReturnValue_3) == 0x000274, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000278, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000288, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RandomizeTeamSelection, CallFunc_Array_Add_ReturnValue) == 0x000298, "Member 'B_GameMode_C_RandomizeTeamSelection::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetWitchesCount
// 0x0040 (0x0040 - 0x0000)
struct B_GameMode_C_GetWitchesCount final
{
public:
	uint8                                         WitchesCount;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NumOfWitches;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetWitchesCount) == 0x000008, "Wrong alignment on B_GameMode_C_GetWitchesCount");
static_assert(sizeof(B_GameMode_C_GetWitchesCount) == 0x000040, "Wrong size on B_GameMode_C_GetWitchesCount");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, WitchesCount) == 0x000000, "Member 'B_GameMode_C_GetWitchesCount::WitchesCount' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, NumOfWitches) == 0x000001, "Member 'B_GameMode_C_GetWitchesCount::NumOfWitches' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, Temp_int_Array_Index_Variable) == 0x000004, "Member 'B_GameMode_C_GetWitchesCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_GetWitchesCount::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_GameMode_C_GetWitchesCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_GameMode_C_GetWitchesCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'B_GameMode_C_GetWitchesCount::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_GameMode_C_GetWitchesCount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'B_GameMode_C_GetWitchesCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'B_GameMode_C_GetWitchesCount::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'B_GameMode_C_GetWitchesCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'B_GameMode_C_GetWitchesCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetWitchesCount, CallFunc_Add_ByteByte_ReturnValue) == 0x000039, "Member 'B_GameMode_C_GetWitchesCount::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetTotalWitchCount
// 0x0038 (0x0038 - 0x0000)
struct B_GameMode_C_GetTotalWitchCount final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         NumOfWitches;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetTotalWitchCount) == 0x000008, "Wrong alignment on B_GameMode_C_GetTotalWitchCount");
static_assert(sizeof(B_GameMode_C_GetTotalWitchCount) == 0x000038, "Wrong size on B_GameMode_C_GetTotalWitchCount");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, ReturnValue) == 0x000000, "Member 'B_GameMode_C_GetTotalWitchCount::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, NumOfWitches) == 0x000001, "Member 'B_GameMode_C_GetTotalWitchCount::NumOfWitches' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, Temp_int_Array_Index_Variable) == 0x000004, "Member 'B_GameMode_C_GetTotalWitchCount::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_GetTotalWitchCount::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'B_GameMode_C_GetTotalWitchCount::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_GameMode_C_GetTotalWitchCount::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, K2Node_DynamicCast_AsB_Player_State) == 0x000020, "Member 'B_GameMode_C_GetTotalWitchCount::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_GameMode_C_GetTotalWitchCount::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'B_GameMode_C_GetTotalWitchCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'B_GameMode_C_GetTotalWitchCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'B_GameMode_C_GetTotalWitchCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_GetTotalWitchCount, CallFunc_Add_ByteByte_ReturnValue) == 0x000035, "Member 'B_GameMode_C_GetTotalWitchCount::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.KillPlayer
// 0x00F8 (0x00F8 - 0x0000)
struct B_GameMode_C_KillPlayer final
{
public:
	class AController*                            KilledController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            Killer;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETeamID                                       KilledPlayerTeam;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameMessageType                              MessageType;                                       // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayerKilledSomeoneElse;                          // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TargetPlayerName;                                  // 0x0018(0x0010)(Edit, BlueprintVisible)
	class FText                                   SourcePlayerName;                                  // 0x0028(0x0010)(Edit, BlueprintVisible)
	class APlayerController*                      KillerPC;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      KilledPC;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_PlayerName;                 // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0088(0x0010)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller_1;          // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_PlayerName_1;               // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x00C0(0x0010)()
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_PlayerName_2;               // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x00E8(0x0010)()
};
static_assert(alignof(B_GameMode_C_KillPlayer) == 0x000008, "Wrong alignment on B_GameMode_C_KillPlayer");
static_assert(sizeof(B_GameMode_C_KillPlayer) == 0x0000F8, "Wrong size on B_GameMode_C_KillPlayer");
static_assert(offsetof(B_GameMode_C_KillPlayer, KilledController) == 0x000000, "Member 'B_GameMode_C_KillPlayer::KilledController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, Killer) == 0x000008, "Member 'B_GameMode_C_KillPlayer::Killer' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, KilledPlayerTeam) == 0x000010, "Member 'B_GameMode_C_KillPlayer::KilledPlayerTeam' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, MessageType) == 0x000011, "Member 'B_GameMode_C_KillPlayer::MessageType' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, bPlayerKilledSomeoneElse) == 0x000012, "Member 'B_GameMode_C_KillPlayer::bPlayerKilledSomeoneElse' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, TargetPlayerName) == 0x000018, "Member 'B_GameMode_C_KillPlayer::TargetPlayerName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, SourcePlayerName) == 0x000028, "Member 'B_GameMode_C_KillPlayer::SourcePlayerName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, KillerPC) == 0x000038, "Member 'B_GameMode_C_KillPlayer::KillerPC' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, KilledPC) == 0x000040, "Member 'B_GameMode_C_KillPlayer::KilledPC' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'B_GameMode_C_KillPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, K2Node_DynamicCast_AsPlayer_Controller) == 0x000050, "Member 'B_GameMode_C_KillPlayer::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'B_GameMode_C_KillPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_GetGameState_ReturnValue) == 0x000060, "Member 'B_GameMode_C_KillPlayer::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, K2Node_DynamicCast_AsB_Game_State) == 0x000068, "Member 'B_GameMode_C_KillPlayer::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'B_GameMode_C_KillPlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_IsValid_ReturnValue_1) == 0x000071, "Member 'B_GameMode_C_KillPlayer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_GetPlayerName_PlayerName) == 0x000078, "Member 'B_GameMode_C_KillPlayer::CallFunc_GetPlayerName_PlayerName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_Conv_StringToText_ReturnValue) == 0x000088, "Member 'B_GameMode_C_KillPlayer::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, K2Node_SwitchEnum_CmpSuccess) == 0x000098, "Member 'B_GameMode_C_KillPlayer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, K2Node_SwitchEnum_CmpSuccess_1) == 0x000099, "Member 'B_GameMode_C_KillPlayer::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_IsValid_ReturnValue_2) == 0x00009A, "Member 'B_GameMode_C_KillPlayer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_IsValid_ReturnValue_3) == 0x00009B, "Member 'B_GameMode_C_KillPlayer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, K2Node_DynamicCast_AsPlayer_Controller_1) == 0x0000A0, "Member 'B_GameMode_C_KillPlayer::K2Node_DynamicCast_AsPlayer_Controller_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'B_GameMode_C_KillPlayer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_GetPlayerName_PlayerName_1) == 0x0000B0, "Member 'B_GameMode_C_KillPlayer::CallFunc_GetPlayerName_PlayerName_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0000C0, "Member 'B_GameMode_C_KillPlayer::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_IsValid_ReturnValue_4) == 0x0000D0, "Member 'B_GameMode_C_KillPlayer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_GetPlayerName_PlayerName_2) == 0x0000D8, "Member 'B_GameMode_C_KillPlayer::CallFunc_GetPlayerName_PlayerName_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_KillPlayer, CallFunc_Conv_StringToText_ReturnValue_2) == 0x0000E8, "Member 'B_GameMode_C_KillPlayer::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.RegisterPlayer
// 0x00A0 (0x00A0 - 0x0000)
struct B_GameMode_C_RegisterPlayer final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FUniqueNetIdRepl                       CallFunc_GetControllerUniqueNetId_ReturnValue;     // 0x0010(0x0030)(HasGetValueTypeHash)
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State;                 // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue_1;               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasRoundStarted_RoundHasStarted;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_GameState_C*                         K2Node_DynamicCast_AsB_Game_State_1;               // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_GameInstance_C*                      K2Node_DynamicCast_AsB_Game_Instance;              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_RegisterPlayer) == 0x000008, "Wrong alignment on B_GameMode_C_RegisterPlayer");
static_assert(sizeof(B_GameMode_C_RegisterPlayer) == 0x0000A0, "Wrong size on B_GameMode_C_RegisterPlayer");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, PlayerController) == 0x000000, "Member 'B_GameMode_C_RegisterPlayer::PlayerController' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_RegisterPlayer::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, CallFunc_GetControllerUniqueNetId_ReturnValue) == 0x000010, "Member 'B_GameMode_C_RegisterPlayer::CallFunc_GetControllerUniqueNetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, K2Node_DynamicCast_AsB_Game_State) == 0x000040, "Member 'B_GameMode_C_RegisterPlayer::K2Node_DynamicCast_AsB_Game_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'B_GameMode_C_RegisterPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, CallFunc_GetGameState_ReturnValue_1) == 0x000050, "Member 'B_GameMode_C_RegisterPlayer::CallFunc_GetGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, CallFunc_HasRoundStarted_RoundHasStarted) == 0x000058, "Member 'B_GameMode_C_RegisterPlayer::CallFunc_HasRoundStarted_RoundHasStarted' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, K2Node_DynamicCast_AsB_Game_State_1) == 0x000060, "Member 'B_GameMode_C_RegisterPlayer::K2Node_DynamicCast_AsB_Game_State_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'B_GameMode_C_RegisterPlayer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'B_GameMode_C_RegisterPlayer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000070, "Member 'B_GameMode_C_RegisterPlayer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, K2Node_DynamicCast_AsB_Player_State) == 0x000078, "Member 'B_GameMode_C_RegisterPlayer::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, K2Node_DynamicCast_bSuccess_2) == 0x000080, "Member 'B_GameMode_C_RegisterPlayer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, CallFunc_GetGameInstance_ReturnValue) == 0x000088, "Member 'B_GameMode_C_RegisterPlayer::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, K2Node_DynamicCast_AsB_Game_Instance) == 0x000090, "Member 'B_GameMode_C_RegisterPlayer::K2Node_DynamicCast_AsB_Game_Instance' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_RegisterPlayer, K2Node_DynamicCast_bSuccess_3) == 0x000098, "Member 'B_GameMode_C_RegisterPlayer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.CheckIfAllPlayersAreReady
// 0x0040 (0x0040 - 0x0000)
struct B_GameMode_C_CheckIfAllPlayersAreReady final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AtLeastOnePlayerThere;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPlayerId_ReturnValue;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_CheckIfAllPlayersAreReady) == 0x000008, "Wrong alignment on B_GameMode_C_CheckIfAllPlayersAreReady");
static_assert(sizeof(B_GameMode_C_CheckIfAllPlayersAreReady) == 0x000040, "Wrong size on B_GameMode_C_CheckIfAllPlayersAreReady");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, IsReady) == 0x000000, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::IsReady' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, AtLeastOnePlayerThere) == 0x000001, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::AtLeastOnePlayerThere' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, Temp_int_Array_Index_Variable) == 0x000004, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, K2Node_DynamicCast_AsB_Player_State) == 0x000018, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, CallFunc_GetPlayerId_ReturnValue) == 0x000028, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::CallFunc_GetPlayerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_CheckIfAllPlayersAreReady, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'B_GameMode_C_CheckIfAllPlayersAreReady::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2
// 0x000C (0x000C - 0x0000)
struct B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2 final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2) == 0x000004, "Wrong alignment on B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2");
static_assert(sizeof(B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2) == 0x00000C, "Wrong size on B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2");
static_assert(offsetof(B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2, SessionName) == 0x000000, "Member 'B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2::SessionName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2, bWasSuccessful) == 0x000008, "Member 'B_GameMode_C_OnDestroySessionComplete_BC6CE1BA4A9064285EE44985FF9B06B2::bWasSuccessful' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2
// 0x000C (0x000C - 0x0000)
struct B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2 final
{
public:
	class FName                                   SessionName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasSuccessful;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2) == 0x000004, "Wrong alignment on B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2");
static_assert(sizeof(B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2) == 0x00000C, "Wrong size on B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2");
static_assert(offsetof(B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2, SessionName) == 0x000000, "Member 'B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2::SessionName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2, bWasSuccessful) == 0x000008, "Member 'B_GameMode_C_OnCallFailed_BC6CE1BA4A9064285EE44985FF9B06B2::bWasSuccessful' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015
// 0x0018 (0x0018 - 0x0000)
struct B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015 final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SanitizedMessages;                                 // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015) == 0x000008, "Wrong alignment on B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015");
static_assert(sizeof(B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015) == 0x000018, "Wrong size on B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015");
static_assert(offsetof(B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015, bSuccess) == 0x000000, "Member 'B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015::bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015, SanitizedMessages) == 0x000008, "Member 'B_GameMode_C_OnMessageArrayProcessed_2F4EA87B48E126019BCA89A0AFF27015::SanitizedMessages' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015
// 0x0018 (0x0018 - 0x0000)
struct B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015 final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SanitizedMessages;                                 // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015) == 0x000008, "Wrong alignment on B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015");
static_assert(sizeof(B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015) == 0x000018, "Wrong size on B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015");
static_assert(offsetof(B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015, bSuccess) == 0x000000, "Member 'B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015::bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015, SanitizedMessages) == 0x000008, "Member 'B_GameMode_C_OnCallFailed_2F4EA87B48E126019BCA89A0AFF27015::SanitizedMessages' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.OnReceivedAccountIdForAccountName
// 0x0028 (0x0028 - 0x0000)
struct B_GameMode_C_OnReceivedAccountIdForAccountName final
{
public:
	int32                                         AccountId;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequestedAccountName;                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class UB_ServerClientConfig_C*                ClientConfig;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         AccountState;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_OnReceivedAccountIdForAccountName) == 0x000008, "Wrong alignment on B_GameMode_C_OnReceivedAccountIdForAccountName");
static_assert(sizeof(B_GameMode_C_OnReceivedAccountIdForAccountName) == 0x000028, "Wrong size on B_GameMode_C_OnReceivedAccountIdForAccountName");
static_assert(offsetof(B_GameMode_C_OnReceivedAccountIdForAccountName, AccountId) == 0x000000, "Member 'B_GameMode_C_OnReceivedAccountIdForAccountName::AccountId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_OnReceivedAccountIdForAccountName, RequestedAccountName) == 0x000008, "Member 'B_GameMode_C_OnReceivedAccountIdForAccountName::RequestedAccountName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_OnReceivedAccountIdForAccountName, ClientConfig) == 0x000018, "Member 'B_GameMode_C_OnReceivedAccountIdForAccountName::ClientConfig' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_OnReceivedAccountIdForAccountName, AccountState) == 0x000020, "Member 'B_GameMode_C_OnReceivedAccountIdForAccountName::AccountState' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct B_GameMode_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on B_GameMode_C_ReceiveEndPlay");
static_assert(sizeof(B_GameMode_C_ReceiveEndPlay) == 0x000001, "Wrong size on B_GameMode_C_ReceiveEndPlay");
static_assert(offsetof(B_GameMode_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'B_GameMode_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleShowSystemMessageCommand
// 0x0010 (0x0010 - 0x0000)
struct B_GameMode_C_HandleShowSystemMessageCommand final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleShowSystemMessageCommand) == 0x000008, "Wrong alignment on B_GameMode_C_HandleShowSystemMessageCommand");
static_assert(sizeof(B_GameMode_C_HandleShowSystemMessageCommand) == 0x000010, "Wrong size on B_GameMode_C_HandleShowSystemMessageCommand");
static_assert(offsetof(B_GameMode_C_HandleShowSystemMessageCommand, Message) == 0x000000, "Member 'B_GameMode_C_HandleShowSystemMessageCommand::Message' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.HandleKickPlayerCommand
// 0x0018 (0x0018 - 0x0000)
struct B_GameMode_C_HandleKickPlayerCommand final
{
public:
	int32                                         WitchItAccountId;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Code;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Message;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_HandleKickPlayerCommand) == 0x000008, "Wrong alignment on B_GameMode_C_HandleKickPlayerCommand");
static_assert(sizeof(B_GameMode_C_HandleKickPlayerCommand) == 0x000018, "Wrong size on B_GameMode_C_HandleKickPlayerCommand");
static_assert(offsetof(B_GameMode_C_HandleKickPlayerCommand, WitchItAccountId) == 0x000000, "Member 'B_GameMode_C_HandleKickPlayerCommand::WitchItAccountId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleKickPlayerCommand, Code) == 0x000004, "Member 'B_GameMode_C_HandleKickPlayerCommand::Code' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_HandleKickPlayerCommand, Message) == 0x000008, "Member 'B_GameMode_C_HandleKickPlayerCommand::Message' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.SendSanitizedGameMessageToAll
// 0x0020 (0x0020 - 0x0000)
struct B_GameMode_C_SendSanitizedGameMessageToAll final
{
public:
	class FString                                 SourcePlayerName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 TargetPlayerName;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_SendSanitizedGameMessageToAll) == 0x000008, "Wrong alignment on B_GameMode_C_SendSanitizedGameMessageToAll");
static_assert(sizeof(B_GameMode_C_SendSanitizedGameMessageToAll) == 0x000020, "Wrong size on B_GameMode_C_SendSanitizedGameMessageToAll");
static_assert(offsetof(B_GameMode_C_SendSanitizedGameMessageToAll, SourcePlayerName) == 0x000000, "Member 'B_GameMode_C_SendSanitizedGameMessageToAll::SourcePlayerName' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_SendSanitizedGameMessageToAll, TargetPlayerName) == 0x000010, "Member 'B_GameMode_C_SendSanitizedGameMessageToAll::TargetPlayerName' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetPlayObjectiveId
// 0x0008 (0x0008 - 0x0000)
struct B_GameMode_C_GetPlayObjectiveId final
{
public:
	int64                                         ObjectiveId;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetPlayObjectiveId) == 0x000008, "Wrong alignment on B_GameMode_C_GetPlayObjectiveId");
static_assert(sizeof(B_GameMode_C_GetPlayObjectiveId) == 0x000008, "Wrong size on B_GameMode_C_GetPlayObjectiveId");
static_assert(offsetof(B_GameMode_C_GetPlayObjectiveId, ObjectiveId) == 0x000000, "Member 'B_GameMode_C_GetPlayObjectiveId::ObjectiveId' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.GetWinObjectiveId
// 0x0008 (0x0008 - 0x0000)
struct B_GameMode_C_GetWinObjectiveId final
{
public:
	int64                                         ObjectiveId;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_GetWinObjectiveId) == 0x000008, "Wrong alignment on B_GameMode_C_GetWinObjectiveId");
static_assert(sizeof(B_GameMode_C_GetWinObjectiveId) == 0x000008, "Wrong size on B_GameMode_C_GetWinObjectiveId");
static_assert(offsetof(B_GameMode_C_GetWinObjectiveId, ObjectiveId) == 0x000000, "Member 'B_GameMode_C_GetWinObjectiveId::ObjectiveId' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.FindPlayerControllerByPlayerState
// 0x0040 (0x0040 - 0x0000)
struct B_GameMode_C_FindPlayerControllerByPlayerState final
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      Out;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              CallFunc_GetAllActorsOfClass_OutActors;            // 0x0020(0x0010)(ReferenceParm)
	class APlayerController*                      CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_FindPlayerControllerByPlayerState) == 0x000008, "Wrong alignment on B_GameMode_C_FindPlayerControllerByPlayerState");
static_assert(sizeof(B_GameMode_C_FindPlayerControllerByPlayerState) == 0x000040, "Wrong size on B_GameMode_C_FindPlayerControllerByPlayerState");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, PlayerState) == 0x000000, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, Out) == 0x000008, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::Out' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, Temp_int_Array_Index_Variable) == 0x000010, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, CallFunc_GetAllActorsOfClass_OutActors) == 0x000020, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, CallFunc_Array_Get_Item) == 0x000030, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerControllerByPlayerState, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00003D, "Member 'B_GameMode_C_FindPlayerControllerByPlayerState::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.FindPlayerStateByWitchItAccountId
// 0x0048 (0x0048 - 0x0000)
struct B_GameMode_C_FindPlayerStateByWitchItAccountId final
{
public:
	int32                                         WitchItAccountId;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           Out;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PlayerState_C*                       K2Node_DynamicCast_AsB_Player_State;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_FindPlayerStateByWitchItAccountId) == 0x000008, "Wrong alignment on B_GameMode_C_FindPlayerStateByWitchItAccountId");
static_assert(sizeof(B_GameMode_C_FindPlayerStateByWitchItAccountId) == 0x000048, "Wrong size on B_GameMode_C_FindPlayerStateByWitchItAccountId");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, WitchItAccountId) == 0x000000, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::WitchItAccountId' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, Out) == 0x000008, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::Out' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, Temp_int_Array_Index_Variable) == 0x000010, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, CallFunc_GetGameState_ReturnValue) == 0x000018, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, CallFunc_Array_Get_Item) == 0x000028, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, K2Node_DynamicCast_AsB_Player_State) == 0x000030, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::K2Node_DynamicCast_AsB_Player_State' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_FindPlayerStateByWitchItAccountId, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000045, "Member 'B_GameMode_C_FindPlayerStateByWitchItAccountId::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_GameMode.B_GameMode_C.IsTearingDown
// 0x0038 (0x0038 - 0x0000)
struct B_GameMode_C_IsTearingDown final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInstanceManagerConnSubsystem*          CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMasterServerSubsystem*                 CallFunc_GetEngineSubsystem_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UNewMasterServerManager*                CallFunc_GetNewMasterServerManager_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UInstanceManagerConnSubsystem*          CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTearingDown_ReturnValue;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTearingDown_ReturnValue_1;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_GameMode_C_IsTearingDown) == 0x000008, "Wrong alignment on B_GameMode_C_IsTearingDown");
static_assert(sizeof(B_GameMode_C_IsTearingDown) == 0x000038, "Wrong size on B_GameMode_C_IsTearingDown");
static_assert(offsetof(B_GameMode_C_IsTearingDown, Result) == 0x000000, "Member 'B_GameMode_C_IsTearingDown::Result' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsTearingDown, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'B_GameMode_C_IsTearingDown::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsTearingDown, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'B_GameMode_C_IsTearingDown::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsTearingDown, CallFunc_GetEngineSubsystem_ReturnValue) == 0x000018, "Member 'B_GameMode_C_IsTearingDown::CallFunc_GetEngineSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsTearingDown, CallFunc_GetNewMasterServerManager_ReturnValue) == 0x000020, "Member 'B_GameMode_C_IsTearingDown::CallFunc_GetNewMasterServerManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsTearingDown, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000028, "Member 'B_GameMode_C_IsTearingDown::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsTearingDown, CallFunc_IsTearingDown_ReturnValue) == 0x000030, "Member 'B_GameMode_C_IsTearingDown::CallFunc_IsTearingDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_GameMode_C_IsTearingDown, CallFunc_IsTearingDown_ReturnValue_1) == 0x000031, "Member 'B_GameMode_C_IsTearingDown::CallFunc_IsTearingDown_ReturnValue_1' has a wrong offset!");

}

