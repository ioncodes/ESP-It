#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WB_AnnouncementArea

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "ETeamID_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WB_AnnouncementArea.WB_AnnouncementArea_C
// 0x0028 (0x0308 - 0x02E0)
class UWB_AnnouncementArea_C final : public UUserWidget
{
public:
	class UVerticalBox*                           AnnouncementBox;                                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UB_AnnouncerSystem_C*                   AnnouncerSystem;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UWB_AnnouncementEntry_C*>        Queue;                                             // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UTexture2D*                             LastWitchIcon;                                     // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	class FText DetermineLastWitchText(const class FString& WitchName);
	void EVENT_OnAnnouncementAnimationFinished();
	void GetMyTeam(ETeamID* Team);
	void HandleLastWitchAnnouncement(const class FString& WitchName);
	bool IsAnAnnouncementQueued();
	bool IsAnAnnouncementShown();
	void QueueAnnouncement(const class UWB_AnnouncementEntry_C*& NewItem);
	void ShowAnnouncement(class UWB_AnnouncementEntry_C* Announcement);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WB_AnnouncementArea_C">();
	}
	static class UWB_AnnouncementArea_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWB_AnnouncementArea_C>();
	}
};
static_assert(alignof(UWB_AnnouncementArea_C) == 0x000008, "Wrong alignment on UWB_AnnouncementArea_C");
static_assert(sizeof(UWB_AnnouncementArea_C) == 0x000308, "Wrong size on UWB_AnnouncementArea_C");
static_assert(offsetof(UWB_AnnouncementArea_C, AnnouncementBox) == 0x0002E0, "Member 'UWB_AnnouncementArea_C::AnnouncementBox' has a wrong offset!");
static_assert(offsetof(UWB_AnnouncementArea_C, AnnouncerSystem) == 0x0002E8, "Member 'UWB_AnnouncementArea_C::AnnouncerSystem' has a wrong offset!");
static_assert(offsetof(UWB_AnnouncementArea_C, Queue) == 0x0002F0, "Member 'UWB_AnnouncementArea_C::Queue' has a wrong offset!");
static_assert(offsetof(UWB_AnnouncementArea_C, LastWitchIcon) == 0x000300, "Member 'UWB_AnnouncementArea_C::LastWitchIcon' has a wrong offset!");

}

