#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Indexer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Indexer.Indexer_C
// 0x0128 (0x03B8 - 0x0290)
class AIndexer_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         GameModes;                                         // 0x02A0(0x0010)(Edit, BlueprintVisible)
	TArray<class UClass*>                         Skills;                                            // 0x02B0(0x0010)(Edit, BlueprintVisible)
	TArray<class UObject*>                        Temp;                                              // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSet<class FString>                           BorkenPropNames;                                   // 0x02D0(0x0050)(Edit, BlueprintVisible)
	TArray<class AB_StaticMeshProp_C*>            WrongNames;                                        // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UClass*>                         AllProps;                                          // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           WorkingNames;                                      // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         PropNameDuplicates;                                // 0x0350(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 PropIds;                                           // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         PropIdDuplicates;                                  // 0x0370(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 EmptyIDs;                                          // 0x0380(0x0010)(Edit, BlueprintVisible)
	int32                                         LastID;                                            // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         StaticMeshProps;                                   // 0x0398(0x0010)(Edit, BlueprintVisible)
	int32                                         CertainItemIndex;                                  // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 InventoryManagerClass;                             // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveBeginPlay();
	void IndexActors();
	void FindRenamedProps();
	void FindCertainItem();
	void FindBrokenPropsFunction();
	void FindBrokenProps();
	void ExecuteUbergraph_Indexer(int32 EntryPoint);
	void ClearPropCheck();
	void CheckPropIDs();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Indexer_C">();
	}
	static class AIndexer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIndexer_C>();
	}
};
static_assert(alignof(AIndexer_C) == 0x000008, "Wrong alignment on AIndexer_C");
static_assert(sizeof(AIndexer_C) == 0x0003B8, "Wrong size on AIndexer_C");
static_assert(offsetof(AIndexer_C, UberGraphFrame) == 0x000290, "Member 'AIndexer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AIndexer_C, TextRender) == 0x000298, "Member 'AIndexer_C::TextRender' has a wrong offset!");
static_assert(offsetof(AIndexer_C, GameModes) == 0x0002A0, "Member 'AIndexer_C::GameModes' has a wrong offset!");
static_assert(offsetof(AIndexer_C, Skills) == 0x0002B0, "Member 'AIndexer_C::Skills' has a wrong offset!");
static_assert(offsetof(AIndexer_C, Temp) == 0x0002C0, "Member 'AIndexer_C::Temp' has a wrong offset!");
static_assert(offsetof(AIndexer_C, BorkenPropNames) == 0x0002D0, "Member 'AIndexer_C::BorkenPropNames' has a wrong offset!");
static_assert(offsetof(AIndexer_C, WrongNames) == 0x000320, "Member 'AIndexer_C::WrongNames' has a wrong offset!");
static_assert(offsetof(AIndexer_C, AllProps) == 0x000330, "Member 'AIndexer_C::AllProps' has a wrong offset!");
static_assert(offsetof(AIndexer_C, WorkingNames) == 0x000340, "Member 'AIndexer_C::WorkingNames' has a wrong offset!");
static_assert(offsetof(AIndexer_C, PropNameDuplicates) == 0x000350, "Member 'AIndexer_C::PropNameDuplicates' has a wrong offset!");
static_assert(offsetof(AIndexer_C, PropIds) == 0x000360, "Member 'AIndexer_C::PropIds' has a wrong offset!");
static_assert(offsetof(AIndexer_C, PropIdDuplicates) == 0x000370, "Member 'AIndexer_C::PropIdDuplicates' has a wrong offset!");
static_assert(offsetof(AIndexer_C, EmptyIDs) == 0x000380, "Member 'AIndexer_C::EmptyIDs' has a wrong offset!");
static_assert(offsetof(AIndexer_C, LastID) == 0x000390, "Member 'AIndexer_C::LastID' has a wrong offset!");
static_assert(offsetof(AIndexer_C, StaticMeshProps) == 0x000398, "Member 'AIndexer_C::StaticMeshProps' has a wrong offset!");
static_assert(offsetof(AIndexer_C, CertainItemIndex) == 0x0003A8, "Member 'AIndexer_C::CertainItemIndex' has a wrong offset!");
static_assert(offsetof(AIndexer_C, InventoryManagerClass) == 0x0003B0, "Member 'AIndexer_C::InventoryManagerClass' has a wrong offset!");

}

