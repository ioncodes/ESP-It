#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_CreativeGameState

#include "Basic.hpp"

#include "B_CreativeGameState_classes.hpp"
#include "B_CreativeGameState_parameters.hpp"


namespace SDK
{

// Function B_CreativeGameState.B_CreativeGameState_C.OnTogglePlayTest__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasPlayTestStarted                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::OnTogglePlayTest__DelegateSignature(bool HasPlayTestStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "OnTogglePlayTest__DelegateSignature");

	Params::B_CreativeGameState_C_OnTogglePlayTest__DelegateSignature Parms{};

	Parms.HasPlayTestStarted = HasPlayTestStarted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.ExecuteUbergraph_B_CreativeGameState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::ExecuteUbergraph_B_CreativeGameState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "ExecuteUbergraph_B_CreativeGameState");

	Params::B_CreativeGameState_C_ExecuteUbergraph_B_CreativeGameState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.HasRoundStarted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RoundHasStarted                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::HasRoundStarted(bool* RoundHasStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "HasRoundStarted");

	Params::B_CreativeGameState_C_HasRoundStarted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RoundHasStarted != nullptr)
		*RoundHasStarted = Parms.RoundHasStarted;
}


// Function B_CreativeGameState.B_CreativeGameState_C.HasTrackingStarted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_HasTrackingStarted_0                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::HasTrackingStarted(bool* Param_HasTrackingStarted_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "HasTrackingStarted");

	Params::B_CreativeGameState_C_HasTrackingStarted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_HasTrackingStarted_0 != nullptr)
		*Param_HasTrackingStarted_0 = Parms.Param_HasTrackingStarted_0;
}


// Function B_CreativeGameState.B_CreativeGameState_C.IsPhysicsEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AB_CreativeGameState_C::IsPhysicsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "IsPhysicsEnabled");

	Params::B_CreativeGameState_C_IsPhysicsEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function B_CreativeGameState.B_CreativeGameState_C.IsRoundEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RoundIsEnd                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::IsRoundEnd(bool* RoundIsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "IsRoundEnd");

	Params::B_CreativeGameState_C_IsRoundEnd Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RoundIsEnd != nullptr)
		*RoundIsEnd = Parms.RoundIsEnd;
}


// Function B_CreativeGameState.B_CreativeGameState_C.LoadLayoutMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LayoutName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::LoadLayoutMulticast(const class FString& LayoutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "LoadLayoutMulticast");

	Params::B_CreativeGameState_C_LoadLayoutMulticast Parms{};

	Parms.LayoutName = std::move(LayoutName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.OnRep_IsPlayTestMode
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_CreativeGameState_C::OnRep_IsPlayTestMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "OnRep_IsPlayTestMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_CreativeGameState.B_CreativeGameState_C.PlayerSelectActorMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Player_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::PlayerSelectActorMulticast(class AActor* Actor, class APlayerState* Player_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "PlayerSelectActorMulticast");

	Params::B_CreativeGameState_C_PlayerSelectActorMulticast Parms{};

	Parms.Actor = Actor;
	Parms.Player_State = Player_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.PlayerUnselectActorForEditingMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::PlayerUnselectActorForEditingMulticast(class AActor* Actor, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "PlayerUnselectActorForEditingMulticast");

	Params::B_CreativeGameState_C_PlayerUnselectActorForEditingMulticast Parms{};

	Parms.Actor = Actor;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.ResetSnow
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AB_CreativeGameState_C::ResetSnow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "ResetSnow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_CreativeGameState.B_CreativeGameState_C.SaveLayoutMulticast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           LayoutName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsAutoSave                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::SaveLayoutMulticast(const class FString& LayoutName, bool IsAutoSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "SaveLayoutMulticast");

	Params::B_CreativeGameState_C_SaveLayoutMulticast Parms{};

	Parms.LayoutName = std::move(LayoutName);
	Parms.IsAutoSave = IsAutoSave;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.TogglePlayTest
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasPlayTestStarted                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::TogglePlayTest(bool HasPlayTestStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "TogglePlayTest");

	Params::B_CreativeGameState_C_TogglePlayTest Parms{};

	Parms.HasPlayTestStarted = HasPlayTestStarted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.TogglePlayTestMultiCast
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasPlayTestStarted                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::TogglePlayTestMultiCast(bool HasPlayTestStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "TogglePlayTestMultiCast");

	Params::B_CreativeGameState_C_TogglePlayTestMultiCast Parms{};

	Parms.HasPlayTestStarted = HasPlayTestStarted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.UpdateActorTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       NewTransform                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::UpdateActorTransform(class AActor* Actor, const struct FTransform& NewTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "UpdateActorTransform");

	Params::B_CreativeGameState_C_UpdateActorTransform Parms{};

	Parms.Actor = Actor;
	Parms.NewTransform = std::move(NewTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.UpdateEditedActorTransform
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::UpdateEditedActorTransform(class AActor* Actor, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "UpdateEditedActorTransform");

	Params::B_CreativeGameState_C_UpdateEditedActorTransform Parms{};

	Parms.Actor = Actor;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_CreativeGameState.B_CreativeGameState_C.IsMapLayoutAlreadySaved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsAlreadySaved                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AB_CreativeGameState_C::IsMapLayoutAlreadySaved(bool* IsAlreadySaved) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_CreativeGameState_C", "IsMapLayoutAlreadySaved");

	Params::B_CreativeGameState_C_IsMapLayoutAlreadySaved Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAlreadySaved != nullptr)
		*IsAlreadySaved = Parms.IsAlreadySaved;
}

}

