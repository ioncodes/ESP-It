#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ImpostorGameMode

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "B_GameMode_classes.hpp"
#include "ETeamID_structs.hpp"
#include "E_TaskType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ImpostorGameMode.B_ImpostorGameMode_C
// 0x0078 (0x0620 - 0x05A8)
class AB_ImpostorGameMode_C final : public AB_GameMode_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_ImpostorGameMode_C;               // 0x05A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AB_ImpostorGameState_C*                 ImpostorGameState;                                 // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int32, int32>                            TasksPerPlayerCount;                               // 0x05B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EnableImposturousStartTimer;                       // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMatchStarted;                                    // 0x0610(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnMatchStarted__DelegateSignature();
	void AreEnoughPlayersReady(bool* AreReady);
	void CheckEndMatchWitchesDead();
	void CheckMeetingVotes();
	void CheckTeamWin();
	void ExecuteUbergraph_B_ImpostorGameMode(int32 EntryPoint);
	int32 GetTaskCount();
	int32 GetWitchCount();
	void HandleEndMatch(ETeamID WinnerTeam, bool ForceRegardlessOfEnd);
	void HandleGrantExp(class AB_PlayerState_C* CurrentPlayerState, int32* TotalGrantedXp);
	void HandleShouldGameStart(bool* IsReady);
	void HandleStartMatch();
	void IsPlayerInWinnerTeam(class AB_PlayerState_C* PlayerState, bool* InWinnerTeam);
	void RandomImpostorSelection();
	void RandomPlayerColors();
	void RandomTasksForPlayers();
	void ReceiveBeginPlay();
	void RemoveAllCorpses();
	void RespawnAllPlayers();
	void SpawnPlayer(const struct FTransform& Transform, class UClass* Class_0, class APlayerController* PlayerController);
	void StartMeeting(class AB_ImpostorPlayerState_C* FoundPlayerState, class AB_ImpostorPlayerState_C* ReporterPlayerState);
	void TimerFinished();
	void UnoccupyAllPlayerStarts();

	void GetPlayObjectiveId(int64* ObjectiveId) const;
	void GetWinObjectiveId(int64* ObjectiveId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ImpostorGameMode_C">();
	}
	static class AB_ImpostorGameMode_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_ImpostorGameMode_C>();
	}
};
static_assert(alignof(AB_ImpostorGameMode_C) == 0x000008, "Wrong alignment on AB_ImpostorGameMode_C");
static_assert(sizeof(AB_ImpostorGameMode_C) == 0x000620, "Wrong size on AB_ImpostorGameMode_C");
static_assert(offsetof(AB_ImpostorGameMode_C, UberGraphFrame_B_ImpostorGameMode_C) == 0x0005A8, "Member 'AB_ImpostorGameMode_C::UberGraphFrame_B_ImpostorGameMode_C' has a wrong offset!");
static_assert(offsetof(AB_ImpostorGameMode_C, ImpostorGameState) == 0x0005B0, "Member 'AB_ImpostorGameMode_C::ImpostorGameState' has a wrong offset!");
static_assert(offsetof(AB_ImpostorGameMode_C, TasksPerPlayerCount) == 0x0005B8, "Member 'AB_ImpostorGameMode_C::TasksPerPlayerCount' has a wrong offset!");
static_assert(offsetof(AB_ImpostorGameMode_C, EnableImposturousStartTimer) == 0x000608, "Member 'AB_ImpostorGameMode_C::EnableImposturousStartTimer' has a wrong offset!");
static_assert(offsetof(AB_ImpostorGameMode_C, OnMatchStarted) == 0x000610, "Member 'AB_ImpostorGameMode_C::OnMatchStarted' has a wrong offset!");

}

