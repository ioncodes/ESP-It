#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ShootingRangeShootActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "B_ShootActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ShootingRangeShootActor.B_ShootingRangeShootActor_C
// 0x0040 (0x0340 - 0x0300)
class AB_ShootingRangeShootActor_C final : public AB_ShootActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_ShootingRangeShootActor_C;        // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          ProjectileBlock;                                   // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BoardMesh;                                         // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Pivot;                                             // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeShot;                                         // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHit;                                             // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36FE[0x6];                                     // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DeltaRotation;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalRotation;                                     // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_ShootingRangeTask_C*                 OwnerTask;                                         // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CheckIfShot(class AActor* InActor);
	void ExecuteUbergraph_B_ShootingRangeShootActor(int32 EntryPoint);
	void Highlight();
	void MakeReady();
	void React();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveTargetAfterHit(double DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ShootingRangeShootActor_C">();
	}
	static class AB_ShootingRangeShootActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_ShootingRangeShootActor_C>();
	}
};
static_assert(alignof(AB_ShootingRangeShootActor_C) == 0x000008, "Wrong alignment on AB_ShootingRangeShootActor_C");
static_assert(sizeof(AB_ShootingRangeShootActor_C) == 0x000340, "Wrong size on AB_ShootingRangeShootActor_C");
static_assert(offsetof(AB_ShootingRangeShootActor_C, UberGraphFrame_B_ShootingRangeShootActor_C) == 0x000300, "Member 'AB_ShootingRangeShootActor_C::UberGraphFrame_B_ShootingRangeShootActor_C' has a wrong offset!");
static_assert(offsetof(AB_ShootingRangeShootActor_C, ProjectileBlock) == 0x000308, "Member 'AB_ShootingRangeShootActor_C::ProjectileBlock' has a wrong offset!");
static_assert(offsetof(AB_ShootingRangeShootActor_C, BoardMesh) == 0x000310, "Member 'AB_ShootingRangeShootActor_C::BoardMesh' has a wrong offset!");
static_assert(offsetof(AB_ShootingRangeShootActor_C, Pivot) == 0x000318, "Member 'AB_ShootingRangeShootActor_C::Pivot' has a wrong offset!");
static_assert(offsetof(AB_ShootingRangeShootActor_C, CanBeShot) == 0x000320, "Member 'AB_ShootingRangeShootActor_C::CanBeShot' has a wrong offset!");
static_assert(offsetof(AB_ShootingRangeShootActor_C, IsHit) == 0x000321, "Member 'AB_ShootingRangeShootActor_C::IsHit' has a wrong offset!");
static_assert(offsetof(AB_ShootingRangeShootActor_C, DeltaRotation) == 0x000328, "Member 'AB_ShootingRangeShootActor_C::DeltaRotation' has a wrong offset!");
static_assert(offsetof(AB_ShootingRangeShootActor_C, TotalRotation) == 0x000330, "Member 'AB_ShootingRangeShootActor_C::TotalRotation' has a wrong offset!");
static_assert(offsetof(AB_ShootingRangeShootActor_C, OwnerTask) == 0x000338, "Member 'AB_ShootingRangeShootActor_C::OwnerTask' has a wrong offset!");

}

