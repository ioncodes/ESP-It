#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_WhirlwindVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E3A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E3B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_WhirlwindVolume_C_BndEvt__B_WhirlwindVolume_InnerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.ExecuteUbergraph_B_WhirlwindVolume
// 0x0260 (0x0260 - 0x0000)
struct B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E3C[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0028(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E3D[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0130(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_CustomEvent_Actor_1;                        // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E3E[0x4];                                     // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0228(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0230(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x0238(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Actor;                          // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E3F[0x7];                                     // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_Map_Find_Value;                           // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue_1;                 // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume");
static_assert(sizeof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume) == 0x000260, "Wrong size on B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, EntryPoint) == 0x000000, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000008, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000010, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000018, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000020, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000024, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000028, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000110, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_OtherActor) == 0x000118, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_OtherComp) == 0x000120, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000128, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_bFromSweep) == 0x00012C, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_ComponentBoundEvent_SweepResult) == 0x000130, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_CustomEvent_Actor_1) == 0x000218, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_CustomEvent_Actor_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, CallFunc_Array_Add_ReturnValue) == 0x000220, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000228, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, Temp_real_Variable) == 0x000230, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, CallFunc_SpawnSystemAttached_ReturnValue) == 0x000238, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, K2Node_CustomEvent_Actor) == 0x000240, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::K2Node_CustomEvent_Actor' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, CallFunc_Map_Remove_ReturnValue) == 0x000248, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, CallFunc_Map_Find_Value) == 0x000250, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, CallFunc_Map_Find_ReturnValue) == 0x000258, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume, CallFunc_Map_Remove_ReturnValue_1) == 0x000259, "Member 'B_WhirlwindVolume_C_ExecuteUbergraph_B_WhirlwindVolume::CallFunc_Map_Remove_ReturnValue_1' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.HandleStartWhirling
// 0x0060 (0x0060 - 0x0000)
struct B_WhirlwindVolume_C_HandleStartWhirling final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          AddCharacter;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E40[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E41[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PowerBall_C*                         K2Node_DynamicCast_AsB_Power_Ball;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E42[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E43[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AB_StaticMeshProp_C* Prop, class AB_Witch_C* Witch)> K2Node_CreateDelegate_OutputDelegate;              // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E44[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_HandleStartWhirling) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_HandleStartWhirling");
static_assert(sizeof(B_WhirlwindVolume_C_HandleStartWhirling) == 0x000060, "Wrong size on B_WhirlwindVolume_C_HandleStartWhirling");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, Actor) == 0x000000, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::Actor' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, AddCharacter) == 0x000008, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::AddCharacter' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, CallFunc_GetObjectClass_ReturnValue) == 0x000010, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, CallFunc_ClassIsChildOf_ReturnValue) == 0x000018, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, K2Node_DynamicCast_AsB_Power_Ball) == 0x000020, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::K2Node_DynamicCast_AsB_Power_Ball' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000030, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, K2Node_CreateDelegate_OutputDelegate) == 0x00003C, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, CallFunc_HasAuthority_ReturnValue) == 0x00004C, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, K2Node_DynamicCast_AsCharacter) == 0x000050, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStartWhirling, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'B_WhirlwindVolume_C_HandleStartWhirling::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.HandleStopWhirling
// 0x0050 (0x0050 - 0x0000)
struct B_WhirlwindVolume_C_HandleStopWhirling final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          RemoveCharacter;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E45[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AB_StaticMeshProp_C* Prop, class AB_Witch_C* Witch)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E46[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_PowerBall_C*                         K2Node_DynamicCast_AsB_Power_Ball;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E47[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E48[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_HandleStopWhirling) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_HandleStopWhirling");
static_assert(sizeof(B_WhirlwindVolume_C_HandleStopWhirling) == 0x000050, "Wrong size on B_WhirlwindVolume_C_HandleStopWhirling");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, Actor) == 0x000000, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::Actor' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, RemoveCharacter) == 0x000008, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::RemoveCharacter' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, K2Node_DynamicCast_AsB_Power_Ball) == 0x000020, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::K2Node_DynamicCast_AsB_Power_Ball' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000030, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, K2Node_DynamicCast_AsCharacter) == 0x000040, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_HandleStopWhirling, CallFunc_HasAuthority_ReturnValue) == 0x000049, "Member 'B_WhirlwindVolume_C_HandleStopWhirling::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.PropTransformingIntoWitch
// 0x0028 (0x0028 - 0x0000)
struct B_WhirlwindVolume_C_PropTransformingIntoWitch final
{
public:
	class AB_StaticMeshProp_C*                    Prop;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_Witch_C*                             Witch;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        TempTime;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Map_Find_Value;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_PropTransformingIntoWitch) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_PropTransformingIntoWitch");
static_assert(sizeof(B_WhirlwindVolume_C_PropTransformingIntoWitch) == 0x000028, "Wrong size on B_WhirlwindVolume_C_PropTransformingIntoWitch");
static_assert(offsetof(B_WhirlwindVolume_C_PropTransformingIntoWitch, Prop) == 0x000000, "Member 'B_WhirlwindVolume_C_PropTransformingIntoWitch::Prop' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_PropTransformingIntoWitch, Witch) == 0x000008, "Member 'B_WhirlwindVolume_C_PropTransformingIntoWitch::Witch' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_PropTransformingIntoWitch, TempTime) == 0x000010, "Member 'B_WhirlwindVolume_C_PropTransformingIntoWitch::TempTime' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_PropTransformingIntoWitch, CallFunc_Map_Find_Value) == 0x000018, "Member 'B_WhirlwindVolume_C_PropTransformingIntoWitch::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_PropTransformingIntoWitch, CallFunc_Map_Find_ReturnValue) == 0x000020, "Member 'B_WhirlwindVolume_C_PropTransformingIntoWitch::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct B_WhirlwindVolume_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_ReceiveTick) == 0x000004, "Wrong alignment on B_WhirlwindVolume_C_ReceiveTick");
static_assert(sizeof(B_WhirlwindVolume_C_ReceiveTick) == 0x000004, "Wrong size on B_WhirlwindVolume_C_ReceiveTick");
static_assert(offsetof(B_WhirlwindVolume_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'B_WhirlwindVolume_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.StartWhirlingMulti
// 0x0008 (0x0008 - 0x0000)
struct B_WhirlwindVolume_C_StartWhirlingMulti final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_StartWhirlingMulti) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_StartWhirlingMulti");
static_assert(sizeof(B_WhirlwindVolume_C_StartWhirlingMulti) == 0x000008, "Wrong size on B_WhirlwindVolume_C_StartWhirlingMulti");
static_assert(offsetof(B_WhirlwindVolume_C_StartWhirlingMulti, Actor) == 0x000000, "Member 'B_WhirlwindVolume_C_StartWhirlingMulti::Actor' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.StopWhirlingMulti
// 0x0008 (0x0008 - 0x0000)
struct B_WhirlwindVolume_C_StopWhirlingMulti final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_StopWhirlingMulti) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_StopWhirlingMulti");
static_assert(sizeof(B_WhirlwindVolume_C_StopWhirlingMulti) == 0x000008, "Wrong size on B_WhirlwindVolume_C_StopWhirlingMulti");
static_assert(offsetof(B_WhirlwindVolume_C_StopWhirlingMulti, Actor) == 0x000000, "Member 'B_WhirlwindVolume_C_StopWhirlingMulti::Actor' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.TickActor
// 0x03B8 (0x03B8 - 0x0000)
struct B_WhirlwindVolume_C_TickActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UB_ManaComponent_C*                     ManaComponent;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityMultiplier;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentVelocity;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OutsideTime;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZDelta;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E49[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_Witch_C*                             K2Node_DynamicCast_AsB_Witch;                      // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4A[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_StaticMeshProp_C*                    K2Node_DynamicCast_AsB_Static_Mesh_Prop;           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4B[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetInstigator_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AB_PropPawnPhysics_C*                   K2Node_DynamicCast_AsB_Prop_Pawn_Physics;          // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4C[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0090(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4D[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter_1;                  // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4E[0x7];                                     // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Map_Find_Value;                           // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4F[0x7];                                     // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_2;       // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E50[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x02A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x02B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x02D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0300(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0320(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0338(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_4;                          // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_4;                          // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_4;                          // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0368(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0380(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0398(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_InterpSpeed_ImplicitCast;       // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_TickActor) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_TickActor");
static_assert(sizeof(B_WhirlwindVolume_C_TickActor) == 0x0003B8, "Wrong size on B_WhirlwindVolume_C_TickActor");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, Actor) == 0x000000, "Member 'B_WhirlwindVolume_C_TickActor::Actor' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, ManaComponent) == 0x000008, "Member 'B_WhirlwindVolume_C_TickActor::ManaComponent' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, VelocityMultiplier) == 0x000010, "Member 'B_WhirlwindVolume_C_TickActor::VelocityMultiplier' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CurrentVelocity) == 0x000018, "Member 'B_WhirlwindVolume_C_TickActor::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, OutsideTime) == 0x000030, "Member 'B_WhirlwindVolume_C_TickActor::OutsideTime' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, ZDelta) == 0x000038, "Member 'B_WhirlwindVolume_C_TickActor::ZDelta' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, Temp_int_Array_Index_Variable) == 0x000040, "Member 'B_WhirlwindVolume_C_TickActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_AsB_Witch) == 0x000048, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_AsB_Witch' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000058, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_AsB_Static_Mesh_Prop) == 0x000068, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_AsB_Static_Mesh_Prop' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'B_WhirlwindVolume_C_TickActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_GetInstigator_ReturnValue) == 0x000078, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_GetInstigator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_AsB_Prop_Pawn_Physics) == 0x000080, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_AsB_Prop_Pawn_Physics' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_bSuccess_2) == 0x000088, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Add_IntInt_ReturnValue) == 0x00008C, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000090, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x0000AC, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Less_IntInt_ReturnValue) == 0x0000AD, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Map_Remove_ReturnValue) == 0x0000AE, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_IsValid_ReturnValue_1) == 0x0000AF, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000B0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000C8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_X) == 0x0000E0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Y) == 0x0000E8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Z) == 0x0000F0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_AsCharacter) == 0x0000F8, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_bSuccess_3) == 0x000100, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_MakeVector_ReturnValue) == 0x000108, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_GetVelocity_ReturnValue) == 0x000120, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_AsCharacter_1) == 0x000138, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_AsCharacter_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, K2Node_DynamicCast_bSuccess_4) == 0x000140, "Member 'B_WhirlwindVolume_C_TickActor::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000148, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_X_1) == 0x000160, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Y_1) == 0x000168, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Z_1) == 0x000170, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000178, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000180, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_FClamp_ReturnValue) == 0x000188, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000190, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0001A8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001B0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_VSize_ReturnValue) == 0x0001C8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0001D0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0001D8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x0001E0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x0001E8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0001F0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_FClamp_ReturnValue_1) == 0x0001F8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000200, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Map_Find_Value) == 0x000208, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Map_Find_ReturnValue) == 0x000210, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000218, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000220, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_GetWorldDeltaSeconds_ReturnValue_2) == 0x000228, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_GetWorldDeltaSeconds_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000230, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000238, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_X_2) == 0x000250, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Y_2) == 0x000258, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Z_2) == 0x000260, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000268, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_MakeVector_ReturnValue_1) == 0x000270, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_FindLookAtRotation_ReturnValue) == 0x000288, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_GetForwardVector_ReturnValue) == 0x0002A0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x0002B8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0002D0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_X_3) == 0x0002E8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Y_3) == 0x0002F0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Z_3) == 0x0002F8, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_GetRightVector_ReturnValue) == 0x000300, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000318, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000320, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Add_VectorVector_ReturnValue) == 0x000338, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_X_4) == 0x000350, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Y_4) == 0x000358, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_BreakVector_Z_4) == 0x000360, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_MakeVector_ReturnValue_2) == 0x000368, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000380, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_VInterpTo_ReturnValue) == 0x000398, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_VInterpTo_InterpSpeed_ImplicitCast) == 0x0003B0, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_VInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickActor, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x0003B4, "Member 'B_WhirlwindVolume_C_TickActor::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function B_WhirlwindVolume.B_WhirlwindVolume_C.TickFunction
// 0x0060 (0x0060 - 0x0000)
struct B_WhirlwindVolume_C_TickFunction final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_Map_Values_Values;                        // 0x0020(0x0010)(ReferenceParm)
	TArray<class AActor*>                         CallFunc_Map_Keys_Keys;                            // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E51[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E52[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_WhirlwindVolume_C_TickFunction) == 0x000008, "Wrong alignment on B_WhirlwindVolume_C_TickFunction");
static_assert(sizeof(B_WhirlwindVolume_C_TickFunction) == 0x000060, "Wrong size on B_WhirlwindVolume_C_TickFunction");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'B_WhirlwindVolume_C_TickFunction::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, Temp_int_Array_Index_Variable) == 0x000008, "Member 'B_WhirlwindVolume_C_TickFunction::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'B_WhirlwindVolume_C_TickFunction::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'B_WhirlwindVolume_C_TickFunction::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Array_Get_Item) == 0x000018, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Map_Values_Values) == 0x000020, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Map_Keys_Keys) == 0x000030, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Map_Length_ReturnValue) == 0x000040, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_WhirlwindVolume_C_TickFunction, CallFunc_Less_IntInt_ReturnValue_1) == 0x000058, "Member 'B_WhirlwindVolume_C_TickFunction::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

}

