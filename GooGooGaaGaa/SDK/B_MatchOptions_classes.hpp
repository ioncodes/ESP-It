#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_MatchOptions

#include "Basic.hpp"

#include "SMapData_structs.hpp"
#include "ETeamSwitchingOption_structs.hpp"
#include "S_PropLayoutData_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_MatchOptions.B_MatchOptions_C
// 0x0118 (0x0140 - 0x0028)
class UB_MatchOptions_C final : public USaveGame
{
public:
	int32                                         MaxPlayers;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HideTime;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SeekTime;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPublic;                                          // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETeamSwitchingOption                          TeamSwitchingOption;                               // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPublicCreative;                                  // 0x0036(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46A9[0x1];                                     // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSMapData                              MapData;                                           // 0x0038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsRecordingMode;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         MaxRandomHuntersPercental;                         // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46AA[0x6];                                     // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GameMode;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowAllyWitches;                                   // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpectatorsCanSeeWitches;                           // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableIdleKick;                                    // 0x009A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableStamina;                                     // 0x009B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequiredPlayersPerTeam;                            // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WitchLives;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCustomLayouts;                                  // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46AB[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         DisabledPropLayouts;                               // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_PropLayoutData                      LayoutData;                                        // 0x00B8(0x0048)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          CustomMapSelected;                                 // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MapChangedAfterLoadingCustomLayout;                // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46AC[0x2];                                     // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MapSizeTimeOffset;                                 // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ImpostorTasks;                                     // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ImpostorWitchAmount;                               // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ImpostorTransformCooldown;                         // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTournamentMode;                                  // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46AD[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TournamentHuntersCount;                            // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableStartMatchTimer;                            // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46AE[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UB_GameRules_C*                         GameRules;                                         // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 GameRulesToLoad;                                   // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsCreativeMode;                                    // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingCustomRules;                                // 0x0139(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLiveGameRuleEditingAllowed;                      // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CopyMatchOptions(class UB_MatchOptions_C* OptionsToCopy);
	class UB_GameRules_C* GetGameRules();
	void SetGameMode(class UClass* GameModeClass);

	void IsSpecialGameModeSelected(bool* SpecialGameModeSelected) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_MatchOptions_C">();
	}
	static class UB_MatchOptions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UB_MatchOptions_C>();
	}
};
static_assert(alignof(UB_MatchOptions_C) == 0x000008, "Wrong alignment on UB_MatchOptions_C");
static_assert(sizeof(UB_MatchOptions_C) == 0x000140, "Wrong size on UB_MatchOptions_C");
static_assert(offsetof(UB_MatchOptions_C, MaxPlayers) == 0x000028, "Member 'UB_MatchOptions_C::MaxPlayers' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, HideTime) == 0x00002C, "Member 'UB_MatchOptions_C::HideTime' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, SeekTime) == 0x000030, "Member 'UB_MatchOptions_C::SeekTime' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, IsPublic) == 0x000034, "Member 'UB_MatchOptions_C::IsPublic' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, TeamSwitchingOption) == 0x000035, "Member 'UB_MatchOptions_C::TeamSwitchingOption' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, IsPublicCreative) == 0x000036, "Member 'UB_MatchOptions_C::IsPublicCreative' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, MapData) == 0x000038, "Member 'UB_MatchOptions_C::MapData' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, IsRecordingMode) == 0x000088, "Member 'UB_MatchOptions_C::IsRecordingMode' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, MaxRandomHuntersPercental) == 0x000089, "Member 'UB_MatchOptions_C::MaxRandomHuntersPercental' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, GameMode) == 0x000090, "Member 'UB_MatchOptions_C::GameMode' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, ShowAllyWitches) == 0x000098, "Member 'UB_MatchOptions_C::ShowAllyWitches' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, SpectatorsCanSeeWitches) == 0x000099, "Member 'UB_MatchOptions_C::SpectatorsCanSeeWitches' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, EnableIdleKick) == 0x00009A, "Member 'UB_MatchOptions_C::EnableIdleKick' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, EnableStamina) == 0x00009B, "Member 'UB_MatchOptions_C::EnableStamina' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, RequiredPlayersPerTeam) == 0x00009C, "Member 'UB_MatchOptions_C::RequiredPlayersPerTeam' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, WitchLives) == 0x0000A0, "Member 'UB_MatchOptions_C::WitchLives' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, UseCustomLayouts) == 0x0000A4, "Member 'UB_MatchOptions_C::UseCustomLayouts' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, DisabledPropLayouts) == 0x0000A8, "Member 'UB_MatchOptions_C::DisabledPropLayouts' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, LayoutData) == 0x0000B8, "Member 'UB_MatchOptions_C::LayoutData' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, CustomMapSelected) == 0x000100, "Member 'UB_MatchOptions_C::CustomMapSelected' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, MapChangedAfterLoadingCustomLayout) == 0x000101, "Member 'UB_MatchOptions_C::MapChangedAfterLoadingCustomLayout' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, MapSizeTimeOffset) == 0x000104, "Member 'UB_MatchOptions_C::MapSizeTimeOffset' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, ImpostorTasks) == 0x000108, "Member 'UB_MatchOptions_C::ImpostorTasks' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, ImpostorWitchAmount) == 0x00010C, "Member 'UB_MatchOptions_C::ImpostorWitchAmount' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, ImpostorTransformCooldown) == 0x000110, "Member 'UB_MatchOptions_C::ImpostorTransformCooldown' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, IsTournamentMode) == 0x000114, "Member 'UB_MatchOptions_C::IsTournamentMode' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, TournamentHuntersCount) == 0x000118, "Member 'UB_MatchOptions_C::TournamentHuntersCount' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, DisableStartMatchTimer) == 0x00011C, "Member 'UB_MatchOptions_C::DisableStartMatchTimer' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, GameRules) == 0x000120, "Member 'UB_MatchOptions_C::GameRules' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, GameRulesToLoad) == 0x000128, "Member 'UB_MatchOptions_C::GameRulesToLoad' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, IsCreativeMode) == 0x000138, "Member 'UB_MatchOptions_C::IsCreativeMode' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, IsUsingCustomRules) == 0x000139, "Member 'UB_MatchOptions_C::IsUsingCustomRules' has a wrong offset!");
static_assert(offsetof(UB_MatchOptions_C, IsLiveGameRuleEditingAllowed) == 0x00013A, "Member 'UB_MatchOptions_C::IsLiveGameRuleEditingAllowed' has a wrong offset!");

}

