#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Water

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Water.EBuoyancyEvent
// NumValues: 0x0003
enum class EBuoyancyEvent : uint8
{
	EnteredWaterBody                         = 0,
	ExitedWaterBody                          = 1,
	EBuoyancyEvent_MAX                       = 2,
};

// Enum Water.EWaveSpectrumType
// NumValues: 0x0004
enum class EWaveSpectrumType : uint8
{
	Phillips                                 = 0,
	PiersonMoskowitz                         = 1,
	JONSWAP                                  = 2,
	EWaveSpectrumType_MAX                    = 3,
};

// Enum Water.EWaterExclusionMode
// NumValues: 0x0003
enum class EWaterExclusionMode : uint32
{
	AddWaterBodiesListToExclusion            = 0,
	RemoveWaterBodiesListFromExclusion       = 1,
	EWaterExclusionMode_MAX                  = 2,
};

// Enum Water.EWaterBrushBlendType
// NumValues: 0x0004
enum class EWaterBrushBlendType : uint8
{
	AlphaBlend                               = 0,
	Min                                      = 1,
	Max                                      = 2,
	Additive                                 = 3,
};

// Enum Water.EWaterBodyType
// NumValues: 0x0006
enum class EWaterBodyType : uint8
{
	River                                    = 0,
	Lake                                     = 1,
	Ocean                                    = 2,
	Transition                               = 3,
	Num                                      = 4,
	EWaterBodyType_MAX                       = 5,
};

// Enum Water.EWaterBrushFalloffMode
// NumValues: 0x0003
enum class EWaterBrushFalloffMode : uint8
{
	Angle                                    = 0,
	Width                                    = 1,
	EWaterBrushFalloffMode_MAX               = 2,
};

// ScriptStruct Water.SphericalPontoon
// 0x02D0 (0x02D0 - 0x0000)
struct FSphericalPontoon final
{
public:
	class FName                                   CenterSocket;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFXEnabled;                                        // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocalForce;                                        // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CenterLocation;                                    // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  SocketRotation;                                    // 0x0060(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x4];                                       // 0x0098(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaterHeight;                                       // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDepth;                                        // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImmersionDepth;                                    // 0x00A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterPlaneLocation;                                // 0x00A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterPlaneNormal;                                  // 0x00C0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterSurfacePosition;                              // 0x00D8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterVelocity;                                     // 0x00F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterBodyIndex;                                    // 0x0108(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInWater;                                        // 0x010C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x1AB];                                    // 0x010D(0x01AB)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterBodyComponent*                    CurrentWaterBodyComponent;                         // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C0[0x10];                                     // 0x02C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSphericalPontoon) == 0x000010, "Wrong alignment on FSphericalPontoon");
static_assert(sizeof(FSphericalPontoon) == 0x0002D0, "Wrong size on FSphericalPontoon");
static_assert(offsetof(FSphericalPontoon, CenterSocket) == 0x000000, "Member 'FSphericalPontoon::CenterSocket' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, RelativeLocation) == 0x000008, "Member 'FSphericalPontoon::RelativeLocation' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, Radius) == 0x000020, "Member 'FSphericalPontoon::Radius' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, bFXEnabled) == 0x000024, "Member 'FSphericalPontoon::bFXEnabled' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, LocalForce) == 0x000028, "Member 'FSphericalPontoon::LocalForce' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, CenterLocation) == 0x000040, "Member 'FSphericalPontoon::CenterLocation' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, SocketRotation) == 0x000060, "Member 'FSphericalPontoon::SocketRotation' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, Offset) == 0x000080, "Member 'FSphericalPontoon::Offset' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, WaterHeight) == 0x00009C, "Member 'FSphericalPontoon::WaterHeight' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, WaterDepth) == 0x0000A0, "Member 'FSphericalPontoon::WaterDepth' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, ImmersionDepth) == 0x0000A4, "Member 'FSphericalPontoon::ImmersionDepth' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, WaterPlaneLocation) == 0x0000A8, "Member 'FSphericalPontoon::WaterPlaneLocation' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, WaterPlaneNormal) == 0x0000C0, "Member 'FSphericalPontoon::WaterPlaneNormal' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, WaterSurfacePosition) == 0x0000D8, "Member 'FSphericalPontoon::WaterSurfacePosition' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, WaterVelocity) == 0x0000F0, "Member 'FSphericalPontoon::WaterVelocity' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, WaterBodyIndex) == 0x000108, "Member 'FSphericalPontoon::WaterBodyIndex' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, bIsInWater) == 0x00010C, "Member 'FSphericalPontoon::bIsInWater' has a wrong offset!");
static_assert(offsetof(FSphericalPontoon, CurrentWaterBodyComponent) == 0x0002B8, "Member 'FSphericalPontoon::CurrentWaterBodyComponent' has a wrong offset!");

// ScriptStruct Water.BuoyancyData
// 0x0090 (0x0090 - 0x0000)
struct FBuoyancyData final
{
public:
	TArray<struct FSphericalPontoon>              Pontoons;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bCenterPontoonsOnCOM;                              // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BuoyancyCoefficient;                               // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuoyancyDamp;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuoyancyDamp2;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuoyancyRampMinVelocity;                           // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuoyancyRampMaxVelocity;                           // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuoyancyRampMax;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBuoyantForce;                                   // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDragForcesInWater;                           // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DragCoefficient;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient2;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDragCoefficient;                            // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDragSpeed;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyRiverForces;                                 // 0x0044(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RiverPontoonIndex;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterShorePushFactor;                              // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiverTraversalPathWidth;                           // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShorePushForce;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterVelocityStrength;                             // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWaterForce;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAllowLateralPush;                           // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowCurrentWhenMovingFastUpstream;               // 0x0061(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDownstreamAngularRotation;                   // 0x0062(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DownstreamAxisOfRotation;                          // 0x0068(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownstreamRotationStrength;                        // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownstreamRotationStiffness;                       // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownstreamRotationAngularDamping;                  // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownstreamMaxAcceleration;                         // 0x008C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuoyancyData) == 0x000008, "Wrong alignment on FBuoyancyData");
static_assert(sizeof(FBuoyancyData) == 0x000090, "Wrong size on FBuoyancyData");
static_assert(offsetof(FBuoyancyData, Pontoons) == 0x000000, "Member 'FBuoyancyData::Pontoons' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, bCenterPontoonsOnCOM) == 0x000010, "Member 'FBuoyancyData::bCenterPontoonsOnCOM' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, BuoyancyCoefficient) == 0x000014, "Member 'FBuoyancyData::BuoyancyCoefficient' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, BuoyancyDamp) == 0x000018, "Member 'FBuoyancyData::BuoyancyDamp' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, BuoyancyDamp2) == 0x00001C, "Member 'FBuoyancyData::BuoyancyDamp2' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, BuoyancyRampMinVelocity) == 0x000020, "Member 'FBuoyancyData::BuoyancyRampMinVelocity' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, BuoyancyRampMaxVelocity) == 0x000024, "Member 'FBuoyancyData::BuoyancyRampMaxVelocity' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, BuoyancyRampMax) == 0x000028, "Member 'FBuoyancyData::BuoyancyRampMax' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, MaxBuoyantForce) == 0x00002C, "Member 'FBuoyancyData::MaxBuoyantForce' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, bApplyDragForcesInWater) == 0x000030, "Member 'FBuoyancyData::bApplyDragForcesInWater' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, DragCoefficient) == 0x000034, "Member 'FBuoyancyData::DragCoefficient' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, DragCoefficient2) == 0x000038, "Member 'FBuoyancyData::DragCoefficient2' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, AngularDragCoefficient) == 0x00003C, "Member 'FBuoyancyData::AngularDragCoefficient' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, MaxDragSpeed) == 0x000040, "Member 'FBuoyancyData::MaxDragSpeed' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, bApplyRiverForces) == 0x000044, "Member 'FBuoyancyData::bApplyRiverForces' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, RiverPontoonIndex) == 0x000048, "Member 'FBuoyancyData::RiverPontoonIndex' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, WaterShorePushFactor) == 0x00004C, "Member 'FBuoyancyData::WaterShorePushFactor' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, RiverTraversalPathWidth) == 0x000050, "Member 'FBuoyancyData::RiverTraversalPathWidth' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, MaxShorePushForce) == 0x000054, "Member 'FBuoyancyData::MaxShorePushForce' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, WaterVelocityStrength) == 0x000058, "Member 'FBuoyancyData::WaterVelocityStrength' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, MaxWaterForce) == 0x00005C, "Member 'FBuoyancyData::MaxWaterForce' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, bAlwaysAllowLateralPush) == 0x000060, "Member 'FBuoyancyData::bAlwaysAllowLateralPush' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, bAllowCurrentWhenMovingFastUpstream) == 0x000061, "Member 'FBuoyancyData::bAllowCurrentWhenMovingFastUpstream' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, bApplyDownstreamAngularRotation) == 0x000062, "Member 'FBuoyancyData::bApplyDownstreamAngularRotation' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, DownstreamAxisOfRotation) == 0x000068, "Member 'FBuoyancyData::DownstreamAxisOfRotation' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, DownstreamRotationStrength) == 0x000080, "Member 'FBuoyancyData::DownstreamRotationStrength' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, DownstreamRotationStiffness) == 0x000084, "Member 'FBuoyancyData::DownstreamRotationStiffness' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, DownstreamRotationAngularDamping) == 0x000088, "Member 'FBuoyancyData::DownstreamRotationAngularDamping' has a wrong offset!");
static_assert(offsetof(FBuoyancyData, DownstreamMaxAcceleration) == 0x00008C, "Member 'FBuoyancyData::DownstreamMaxAcceleration' has a wrong offset!");

// ScriptStruct Water.WaterBrushEffectBlurring
// 0x0008 (0x0008 - 0x0000)
struct FWaterBrushEffectBlurring final
{
public:
	bool                                          bBlurShape;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Radius;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterBrushEffectBlurring) == 0x000004, "Wrong alignment on FWaterBrushEffectBlurring");
static_assert(sizeof(FWaterBrushEffectBlurring) == 0x000008, "Wrong size on FWaterBrushEffectBlurring");
static_assert(offsetof(FWaterBrushEffectBlurring, bBlurShape) == 0x000000, "Member 'FWaterBrushEffectBlurring::bBlurShape' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectBlurring, Radius) == 0x000004, "Member 'FWaterBrushEffectBlurring::Radius' has a wrong offset!");

// ScriptStruct Water.WaterBrushEffectCurlNoise
// 0x0010 (0x0010 - 0x0000)
struct FWaterBrushEffectCurlNoise final
{
public:
	float                                         Curl1Amount;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Curl2Amount;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Curl1Tiling;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Curl2Tiling;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterBrushEffectCurlNoise) == 0x000004, "Wrong alignment on FWaterBrushEffectCurlNoise");
static_assert(sizeof(FWaterBrushEffectCurlNoise) == 0x000010, "Wrong size on FWaterBrushEffectCurlNoise");
static_assert(offsetof(FWaterBrushEffectCurlNoise, Curl1Amount) == 0x000000, "Member 'FWaterBrushEffectCurlNoise::Curl1Amount' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectCurlNoise, Curl2Amount) == 0x000004, "Member 'FWaterBrushEffectCurlNoise::Curl2Amount' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectCurlNoise, Curl1Tiling) == 0x000008, "Member 'FWaterBrushEffectCurlNoise::Curl1Tiling' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectCurlNoise, Curl2Tiling) == 0x00000C, "Member 'FWaterBrushEffectCurlNoise::Curl2Tiling' has a wrong offset!");

// ScriptStruct Water.WaterBrushEffectDisplacement
// 0x0028 (0x0028 - 0x0000)
struct FWaterBrushEffectDisplacement final
{
public:
	float                                         DisplacementHeight;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplacementTiling;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Midpoint;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Channel;                                           // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightmapInfluence;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterBrushEffectDisplacement) == 0x000008, "Wrong alignment on FWaterBrushEffectDisplacement");
static_assert(sizeof(FWaterBrushEffectDisplacement) == 0x000028, "Wrong size on FWaterBrushEffectDisplacement");
static_assert(offsetof(FWaterBrushEffectDisplacement, DisplacementHeight) == 0x000000, "Member 'FWaterBrushEffectDisplacement::DisplacementHeight' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectDisplacement, DisplacementTiling) == 0x000004, "Member 'FWaterBrushEffectDisplacement::DisplacementTiling' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectDisplacement, Texture) == 0x000008, "Member 'FWaterBrushEffectDisplacement::Texture' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectDisplacement, Midpoint) == 0x000010, "Member 'FWaterBrushEffectDisplacement::Midpoint' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectDisplacement, Channel) == 0x000014, "Member 'FWaterBrushEffectDisplacement::Channel' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectDisplacement, WeightmapInfluence) == 0x000024, "Member 'FWaterBrushEffectDisplacement::WeightmapInfluence' has a wrong offset!");

// ScriptStruct Water.WaterBrushEffectSmoothBlending
// 0x0008 (0x0008 - 0x0000)
struct FWaterBrushEffectSmoothBlending final
{
public:
	float                                         InnerSmoothDistance;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterSmoothDistance;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterBrushEffectSmoothBlending) == 0x000004, "Wrong alignment on FWaterBrushEffectSmoothBlending");
static_assert(sizeof(FWaterBrushEffectSmoothBlending) == 0x000008, "Wrong size on FWaterBrushEffectSmoothBlending");
static_assert(offsetof(FWaterBrushEffectSmoothBlending, InnerSmoothDistance) == 0x000000, "Member 'FWaterBrushEffectSmoothBlending::InnerSmoothDistance' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectSmoothBlending, OuterSmoothDistance) == 0x000004, "Member 'FWaterBrushEffectSmoothBlending::OuterSmoothDistance' has a wrong offset!");

// ScriptStruct Water.WaterBrushEffectTerracing
// 0x0014 (0x0014 - 0x0000)
struct FWaterBrushEffectTerracing final
{
public:
	float                                         TerraceAlpha;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TerraceSpacing;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TerraceSmoothness;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskLength;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskStartOffset;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterBrushEffectTerracing) == 0x000004, "Wrong alignment on FWaterBrushEffectTerracing");
static_assert(sizeof(FWaterBrushEffectTerracing) == 0x000014, "Wrong size on FWaterBrushEffectTerracing");
static_assert(offsetof(FWaterBrushEffectTerracing, TerraceAlpha) == 0x000000, "Member 'FWaterBrushEffectTerracing::TerraceAlpha' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectTerracing, TerraceSpacing) == 0x000004, "Member 'FWaterBrushEffectTerracing::TerraceSpacing' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectTerracing, TerraceSmoothness) == 0x000008, "Member 'FWaterBrushEffectTerracing::TerraceSmoothness' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectTerracing, MaskLength) == 0x00000C, "Member 'FWaterBrushEffectTerracing::MaskLength' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectTerracing, MaskStartOffset) == 0x000010, "Member 'FWaterBrushEffectTerracing::MaskStartOffset' has a wrong offset!");

// ScriptStruct Water.WaterBrushEffects
// 0x0060 (0x0060 - 0x0000)
struct FWaterBrushEffects final
{
public:
	struct FWaterBrushEffectBlurring              Blurring;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterBrushEffectCurlNoise             CurlNoise;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterBrushEffectDisplacement          Displacement;                                      // 0x0018(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterBrushEffectSmoothBlending        SmoothBlending;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterBrushEffectTerracing             Terracing;                                         // 0x0048(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaterBrushEffects) == 0x000008, "Wrong alignment on FWaterBrushEffects");
static_assert(sizeof(FWaterBrushEffects) == 0x000060, "Wrong size on FWaterBrushEffects");
static_assert(offsetof(FWaterBrushEffects, Blurring) == 0x000000, "Member 'FWaterBrushEffects::Blurring' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffects, CurlNoise) == 0x000008, "Member 'FWaterBrushEffects::CurlNoise' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffects, Displacement) == 0x000018, "Member 'FWaterBrushEffects::Displacement' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffects, SmoothBlending) == 0x000040, "Member 'FWaterBrushEffects::SmoothBlending' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffects, Terracing) == 0x000048, "Member 'FWaterBrushEffects::Terracing' has a wrong offset!");

// ScriptStruct Water.WaterBodyStaticMeshSettings
// 0x0010 (0x0010 - 0x0000)
struct FWaterBodyStaticMeshSettings final
{
public:
	bool                                          bEnableWaterBodyStaticMesh;                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSectionWaterBodyStaticMesh;                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SectionSize;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterBodyStaticMeshSettings) == 0x000008, "Wrong alignment on FWaterBodyStaticMeshSettings");
static_assert(sizeof(FWaterBodyStaticMeshSettings) == 0x000010, "Wrong size on FWaterBodyStaticMeshSettings");
static_assert(offsetof(FWaterBodyStaticMeshSettings, bEnableWaterBodyStaticMesh) == 0x000000, "Member 'FWaterBodyStaticMeshSettings::bEnableWaterBodyStaticMesh' has a wrong offset!");
static_assert(offsetof(FWaterBodyStaticMeshSettings, bSectionWaterBodyStaticMesh) == 0x000001, "Member 'FWaterBodyStaticMeshSettings::bSectionWaterBodyStaticMesh' has a wrong offset!");
static_assert(offsetof(FWaterBodyStaticMeshSettings, SectionSize) == 0x000008, "Member 'FWaterBodyStaticMeshSettings::SectionSize' has a wrong offset!");

// ScriptStruct Water.WaterBodyWeightmapSettings
// 0x0020 (0x0020 - 0x0000)
struct FWaterBodyWeightmapSettings final
{
public:
	float                                         FalloffWidth;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeOffset;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ModulationTexture;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureTiling;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureInfluence;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Midpoint;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalOpacity;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterBodyWeightmapSettings) == 0x000008, "Wrong alignment on FWaterBodyWeightmapSettings");
static_assert(sizeof(FWaterBodyWeightmapSettings) == 0x000020, "Wrong size on FWaterBodyWeightmapSettings");
static_assert(offsetof(FWaterBodyWeightmapSettings, FalloffWidth) == 0x000000, "Member 'FWaterBodyWeightmapSettings::FalloffWidth' has a wrong offset!");
static_assert(offsetof(FWaterBodyWeightmapSettings, EdgeOffset) == 0x000004, "Member 'FWaterBodyWeightmapSettings::EdgeOffset' has a wrong offset!");
static_assert(offsetof(FWaterBodyWeightmapSettings, ModulationTexture) == 0x000008, "Member 'FWaterBodyWeightmapSettings::ModulationTexture' has a wrong offset!");
static_assert(offsetof(FWaterBodyWeightmapSettings, TextureTiling) == 0x000010, "Member 'FWaterBodyWeightmapSettings::TextureTiling' has a wrong offset!");
static_assert(offsetof(FWaterBodyWeightmapSettings, TextureInfluence) == 0x000014, "Member 'FWaterBodyWeightmapSettings::TextureInfluence' has a wrong offset!");
static_assert(offsetof(FWaterBodyWeightmapSettings, Midpoint) == 0x000018, "Member 'FWaterBodyWeightmapSettings::Midpoint' has a wrong offset!");
static_assert(offsetof(FWaterBodyWeightmapSettings, FinalOpacity) == 0x00001C, "Member 'FWaterBodyWeightmapSettings::FinalOpacity' has a wrong offset!");

// ScriptStruct Water.WaterCurveSettings
// 0x0020 (0x0020 - 0x0000)
struct FWaterCurveSettings final
{
public:
	bool                                          bUseCurveChannel;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ElevationCurveAsset;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChannelEdgeOffset;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChannelDepth;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveRampWidth;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaterCurveSettings) == 0x000008, "Wrong alignment on FWaterCurveSettings");
static_assert(sizeof(FWaterCurveSettings) == 0x000020, "Wrong size on FWaterCurveSettings");
static_assert(offsetof(FWaterCurveSettings, bUseCurveChannel) == 0x000000, "Member 'FWaterCurveSettings::bUseCurveChannel' has a wrong offset!");
static_assert(offsetof(FWaterCurveSettings, ElevationCurveAsset) == 0x000008, "Member 'FWaterCurveSettings::ElevationCurveAsset' has a wrong offset!");
static_assert(offsetof(FWaterCurveSettings, ChannelEdgeOffset) == 0x000010, "Member 'FWaterCurveSettings::ChannelEdgeOffset' has a wrong offset!");
static_assert(offsetof(FWaterCurveSettings, ChannelDepth) == 0x000014, "Member 'FWaterCurveSettings::ChannelDepth' has a wrong offset!");
static_assert(offsetof(FWaterCurveSettings, CurveRampWidth) == 0x000018, "Member 'FWaterCurveSettings::CurveRampWidth' has a wrong offset!");

// ScriptStruct Water.GerstnerWave
// 0x0048 (0x0048 - 0x0000)
struct FGerstnerWave final
{
public:
	float                                         WaveLength;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amplitude;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steepness;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WaveVector;                                        // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaveSpeed;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WKA;                                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Q;                                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseOffset;                                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGerstnerWave) == 0x000008, "Wrong alignment on FGerstnerWave");
static_assert(sizeof(FGerstnerWave) == 0x000048, "Wrong size on FGerstnerWave");
static_assert(offsetof(FGerstnerWave, WaveLength) == 0x000000, "Member 'FGerstnerWave::WaveLength' has a wrong offset!");
static_assert(offsetof(FGerstnerWave, Amplitude) == 0x000004, "Member 'FGerstnerWave::Amplitude' has a wrong offset!");
static_assert(offsetof(FGerstnerWave, Steepness) == 0x000008, "Member 'FGerstnerWave::Steepness' has a wrong offset!");
static_assert(offsetof(FGerstnerWave, Direction) == 0x000010, "Member 'FGerstnerWave::Direction' has a wrong offset!");
static_assert(offsetof(FGerstnerWave, WaveVector) == 0x000028, "Member 'FGerstnerWave::WaveVector' has a wrong offset!");
static_assert(offsetof(FGerstnerWave, WaveSpeed) == 0x000038, "Member 'FGerstnerWave::WaveSpeed' has a wrong offset!");
static_assert(offsetof(FGerstnerWave, WKA) == 0x00003C, "Member 'FGerstnerWave::WKA' has a wrong offset!");
static_assert(offsetof(FGerstnerWave, Q) == 0x000040, "Member 'FGerstnerWave::Q' has a wrong offset!");
static_assert(offsetof(FGerstnerWave, PhaseOffset) == 0x000044, "Member 'FGerstnerWave::PhaseOffset' has a wrong offset!");

// ScriptStruct Water.GerstnerWaveOctave
// 0x0014 (0x0014 - 0x0000)
struct FGerstnerWaveOctave final
{
public:
	int32                                         NumWaves;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmplitudeScale;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainDirection;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadAngle;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniformSpread;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGerstnerWaveOctave) == 0x000004, "Wrong alignment on FGerstnerWaveOctave");
static_assert(sizeof(FGerstnerWaveOctave) == 0x000014, "Wrong size on FGerstnerWaveOctave");
static_assert(offsetof(FGerstnerWaveOctave, NumWaves) == 0x000000, "Member 'FGerstnerWaveOctave::NumWaves' has a wrong offset!");
static_assert(offsetof(FGerstnerWaveOctave, AmplitudeScale) == 0x000004, "Member 'FGerstnerWaveOctave::AmplitudeScale' has a wrong offset!");
static_assert(offsetof(FGerstnerWaveOctave, MainDirection) == 0x000008, "Member 'FGerstnerWaveOctave::MainDirection' has a wrong offset!");
static_assert(offsetof(FGerstnerWaveOctave, SpreadAngle) == 0x00000C, "Member 'FGerstnerWaveOctave::SpreadAngle' has a wrong offset!");
static_assert(offsetof(FGerstnerWaveOctave, bUniformSpread) == 0x000010, "Member 'FGerstnerWaveOctave::bUniformSpread' has a wrong offset!");

// ScriptStruct Water.UnderwaterPostProcessSettings
// 0x0710 (0x0710 - 0x0000)
struct FUnderwaterPostProcessSettings final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Priority;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendRadius;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendWeight;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x0010(0x06F0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     UnderwaterPostProcessMaterial;                     // 0x0700(0x0008)(ZeroConstructor, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_708[0x8];                                      // 0x0708(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUnderwaterPostProcessSettings) == 0x000010, "Wrong alignment on FUnderwaterPostProcessSettings");
static_assert(sizeof(FUnderwaterPostProcessSettings) == 0x000710, "Wrong size on FUnderwaterPostProcessSettings");
static_assert(offsetof(FUnderwaterPostProcessSettings, bEnabled) == 0x000000, "Member 'FUnderwaterPostProcessSettings::bEnabled' has a wrong offset!");
static_assert(offsetof(FUnderwaterPostProcessSettings, Priority) == 0x000004, "Member 'FUnderwaterPostProcessSettings::Priority' has a wrong offset!");
static_assert(offsetof(FUnderwaterPostProcessSettings, BlendRadius) == 0x000008, "Member 'FUnderwaterPostProcessSettings::BlendRadius' has a wrong offset!");
static_assert(offsetof(FUnderwaterPostProcessSettings, BlendWeight) == 0x00000C, "Member 'FUnderwaterPostProcessSettings::BlendWeight' has a wrong offset!");
static_assert(offsetof(FUnderwaterPostProcessSettings, PostProcessSettings) == 0x000010, "Member 'FUnderwaterPostProcessSettings::PostProcessSettings' has a wrong offset!");
static_assert(offsetof(FUnderwaterPostProcessSettings, UnderwaterPostProcessMaterial) == 0x000700, "Member 'FUnderwaterPostProcessSettings::UnderwaterPostProcessMaterial' has a wrong offset!");

// ScriptStruct Water.WaterFalloffSettings
// 0x0014 (0x0014 - 0x0000)
struct FWaterFalloffSettings final
{
public:
	EWaterBrushFalloffMode                        FalloffMode;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FalloffAngle;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FalloffWidth;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeOffset;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZOffset;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterFalloffSettings) == 0x000004, "Wrong alignment on FWaterFalloffSettings");
static_assert(sizeof(FWaterFalloffSettings) == 0x000014, "Wrong size on FWaterFalloffSettings");
static_assert(offsetof(FWaterFalloffSettings, FalloffMode) == 0x000000, "Member 'FWaterFalloffSettings::FalloffMode' has a wrong offset!");
static_assert(offsetof(FWaterFalloffSettings, FalloffAngle) == 0x000004, "Member 'FWaterFalloffSettings::FalloffAngle' has a wrong offset!");
static_assert(offsetof(FWaterFalloffSettings, FalloffWidth) == 0x000008, "Member 'FWaterFalloffSettings::FalloffWidth' has a wrong offset!");
static_assert(offsetof(FWaterFalloffSettings, EdgeOffset) == 0x00000C, "Member 'FWaterFalloffSettings::EdgeOffset' has a wrong offset!");
static_assert(offsetof(FWaterFalloffSettings, ZOffset) == 0x000010, "Member 'FWaterFalloffSettings::ZOffset' has a wrong offset!");

// ScriptStruct Water.WaterBodyHeightmapSettings
// 0x0080 (0x0080 - 0x0000)
struct FWaterBodyHeightmapSettings final
{
public:
	EWaterBrushBlendType                          BlendMode;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertShape;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWaterFalloffSettings                  FalloffSettings;                                   // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterBrushEffects                     Effects;                                           // 0x0018(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0078(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaterBodyHeightmapSettings) == 0x000008, "Wrong alignment on FWaterBodyHeightmapSettings");
static_assert(sizeof(FWaterBodyHeightmapSettings) == 0x000080, "Wrong size on FWaterBodyHeightmapSettings");
static_assert(offsetof(FWaterBodyHeightmapSettings, BlendMode) == 0x000000, "Member 'FWaterBodyHeightmapSettings::BlendMode' has a wrong offset!");
static_assert(offsetof(FWaterBodyHeightmapSettings, bInvertShape) == 0x000001, "Member 'FWaterBodyHeightmapSettings::bInvertShape' has a wrong offset!");
static_assert(offsetof(FWaterBodyHeightmapSettings, FalloffSettings) == 0x000004, "Member 'FWaterBodyHeightmapSettings::FalloffSettings' has a wrong offset!");
static_assert(offsetof(FWaterBodyHeightmapSettings, Effects) == 0x000018, "Member 'FWaterBodyHeightmapSettings::Effects' has a wrong offset!");
static_assert(offsetof(FWaterBodyHeightmapSettings, Priority) == 0x000078, "Member 'FWaterBodyHeightmapSettings::Priority' has a wrong offset!");

// ScriptStruct Water.WaterBrushEffectCurves
// 0x0020 (0x0020 - 0x0000)
struct FWaterBrushEffectCurves final
{
public:
	bool                                          bUseCurveChannel;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ElevationCurveAsset;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChannelEdgeOffset;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChannelDepth;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveRampWidth;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaterBrushEffectCurves) == 0x000008, "Wrong alignment on FWaterBrushEffectCurves");
static_assert(sizeof(FWaterBrushEffectCurves) == 0x000020, "Wrong size on FWaterBrushEffectCurves");
static_assert(offsetof(FWaterBrushEffectCurves, bUseCurveChannel) == 0x000000, "Member 'FWaterBrushEffectCurves::bUseCurveChannel' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectCurves, ElevationCurveAsset) == 0x000008, "Member 'FWaterBrushEffectCurves::ElevationCurveAsset' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectCurves, ChannelEdgeOffset) == 0x000010, "Member 'FWaterBrushEffectCurves::ChannelEdgeOffset' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectCurves, ChannelDepth) == 0x000014, "Member 'FWaterBrushEffectCurves::ChannelDepth' has a wrong offset!");
static_assert(offsetof(FWaterBrushEffectCurves, CurveRampWidth) == 0x000018, "Member 'FWaterBrushEffectCurves::CurveRampWidth' has a wrong offset!");

// ScriptStruct Water.WaterSplineCurveDefaults
// 0x0010 (0x0010 - 0x0000)
struct FWaterSplineCurveDefaults final
{
public:
	float                                         DefaultDepth;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultWidth;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultVelocity;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAudioIntensity;                             // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWaterSplineCurveDefaults) == 0x000004, "Wrong alignment on FWaterSplineCurveDefaults");
static_assert(sizeof(FWaterSplineCurveDefaults) == 0x000010, "Wrong size on FWaterSplineCurveDefaults");
static_assert(offsetof(FWaterSplineCurveDefaults, DefaultDepth) == 0x000000, "Member 'FWaterSplineCurveDefaults::DefaultDepth' has a wrong offset!");
static_assert(offsetof(FWaterSplineCurveDefaults, DefaultWidth) == 0x000004, "Member 'FWaterSplineCurveDefaults::DefaultWidth' has a wrong offset!");
static_assert(offsetof(FWaterSplineCurveDefaults, DefaultVelocity) == 0x000008, "Member 'FWaterSplineCurveDefaults::DefaultVelocity' has a wrong offset!");
static_assert(offsetof(FWaterSplineCurveDefaults, DefaultAudioIntensity) == 0x00000C, "Member 'FWaterSplineCurveDefaults::DefaultAudioIntensity' has a wrong offset!");

}

