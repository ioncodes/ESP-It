#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PCG

#include "Basic.hpp"

#include "PCG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PCG.PCGMetadataSettingsBase.GetOutputDataFromPinOptions
// 0x0010 (0x0010 - 0x0000)
struct PCGMetadataSettingsBase_GetOutputDataFromPinOptions final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataSettingsBase_GetOutputDataFromPinOptions) == 0x000008, "Wrong alignment on PCGMetadataSettingsBase_GetOutputDataFromPinOptions");
static_assert(sizeof(PCGMetadataSettingsBase_GetOutputDataFromPinOptions) == 0x000010, "Wrong size on PCGMetadataSettingsBase_GetOutputDataFromPinOptions");
static_assert(offsetof(PCGMetadataSettingsBase_GetOutputDataFromPinOptions, ReturnValue) == 0x000000, "Member 'PCGMetadataSettingsBase_GetOutputDataFromPinOptions::ReturnValue' has a wrong offset!");

// Function PCG.PCGAssetExporter.BP_ExportToAsset
// 0x0010 (0x0010 - 0x0000)
struct PCGAssetExporter_BP_ExportToAsset final
{
public:
	class UPCGDataAsset*                          Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAssetExporter_BP_ExportToAsset) == 0x000008, "Wrong alignment on PCGAssetExporter_BP_ExportToAsset");
static_assert(sizeof(PCGAssetExporter_BP_ExportToAsset) == 0x000010, "Wrong size on PCGAssetExporter_BP_ExportToAsset");
static_assert(offsetof(PCGAssetExporter_BP_ExportToAsset, Asset) == 0x000000, "Member 'PCGAssetExporter_BP_ExportToAsset::Asset' has a wrong offset!");
static_assert(offsetof(PCGAssetExporter_BP_ExportToAsset, ReturnValue) == 0x000008, "Member 'PCGAssetExporter_BP_ExportToAsset::ReturnValue' has a wrong offset!");

// Function PCG.PCGAssetExporter.BP_GetAssetType
// 0x0008 (0x0008 - 0x0000)
struct PCGAssetExporter_BP_GetAssetType final
{
public:
	TSubclassOf<class UPCGDataAsset>              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAssetExporter_BP_GetAssetType) == 0x000008, "Wrong alignment on PCGAssetExporter_BP_GetAssetType");
static_assert(sizeof(PCGAssetExporter_BP_GetAssetType) == 0x000008, "Wrong size on PCGAssetExporter_BP_GetAssetType");
static_assert(offsetof(PCGAssetExporter_BP_GetAssetType, ReturnValue) == 0x000000, "Member 'PCGAssetExporter_BP_GetAssetType::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.CreateEmptyMetadata
// 0x0008 (0x0008 - 0x0000)
struct PCGSpatialData_CreateEmptyMetadata final
{
public:
	class UPCGMetadata*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_CreateEmptyMetadata) == 0x000008, "Wrong alignment on PCGSpatialData_CreateEmptyMetadata");
static_assert(sizeof(PCGSpatialData_CreateEmptyMetadata) == 0x000008, "Wrong size on PCGSpatialData_CreateEmptyMetadata");
static_assert(offsetof(PCGSpatialData_CreateEmptyMetadata, ReturnValue) == 0x000000, "Member 'PCGSpatialData_CreateEmptyMetadata::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.InitializeFromData
// 0x0018 (0x0018 - 0x0000)
struct PCGSpatialData_InitializeFromData final
{
public:
	const class UPCGSpatialData*                  InSource;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     InMetadataParentOverride;                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritMetadata;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritAttributes;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGSpatialData_InitializeFromData) == 0x000008, "Wrong alignment on PCGSpatialData_InitializeFromData");
static_assert(sizeof(PCGSpatialData_InitializeFromData) == 0x000018, "Wrong size on PCGSpatialData_InitializeFromData");
static_assert(offsetof(PCGSpatialData_InitializeFromData, InSource) == 0x000000, "Member 'PCGSpatialData_InitializeFromData::InSource' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_InitializeFromData, InMetadataParentOverride) == 0x000008, "Member 'PCGSpatialData_InitializeFromData::InMetadataParentOverride' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_InitializeFromData, bInheritMetadata) == 0x000010, "Member 'PCGSpatialData_InitializeFromData::bInheritMetadata' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_InitializeFromData, bInheritAttributes) == 0x000011, "Member 'PCGSpatialData_InitializeFromData::bInheritAttributes' has a wrong offset!");

// Function PCG.PCGSpatialData.MutableMetadata
// 0x0008 (0x0008 - 0x0000)
struct PCGSpatialData_MutableMetadata final
{
public:
	class UPCGMetadata*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_MutableMetadata) == 0x000008, "Wrong alignment on PCGSpatialData_MutableMetadata");
static_assert(sizeof(PCGSpatialData_MutableMetadata) == 0x000008, "Wrong size on PCGSpatialData_MutableMetadata");
static_assert(offsetof(PCGSpatialData_MutableMetadata, ReturnValue) == 0x000000, "Member 'PCGSpatialData_MutableMetadata::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.ConstMetadata
// 0x0008 (0x0008 - 0x0000)
struct PCGSpatialData_ConstMetadata final
{
public:
	const class UPCGMetadata*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_ConstMetadata) == 0x000008, "Wrong alignment on PCGSpatialData_ConstMetadata");
static_assert(sizeof(PCGSpatialData_ConstMetadata) == 0x000008, "Wrong size on PCGSpatialData_ConstMetadata");
static_assert(offsetof(PCGSpatialData_ConstMetadata, ReturnValue) == 0x000000, "Member 'PCGSpatialData_ConstMetadata::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.GetBounds
// 0x0038 (0x0038 - 0x0000)
struct PCGSpatialData_GetBounds final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_GetBounds) == 0x000008, "Wrong alignment on PCGSpatialData_GetBounds");
static_assert(sizeof(PCGSpatialData_GetBounds) == 0x000038, "Wrong size on PCGSpatialData_GetBounds");
static_assert(offsetof(PCGSpatialData_GetBounds, ReturnValue) == 0x000000, "Member 'PCGSpatialData_GetBounds::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.GetDensityAtPosition
// 0x0020 (0x0020 - 0x0000)
struct PCGSpatialData_GetDensityAtPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGSpatialData_GetDensityAtPosition) == 0x000008, "Wrong alignment on PCGSpatialData_GetDensityAtPosition");
static_assert(sizeof(PCGSpatialData_GetDensityAtPosition) == 0x000020, "Wrong size on PCGSpatialData_GetDensityAtPosition");
static_assert(offsetof(PCGSpatialData_GetDensityAtPosition, InPosition) == 0x000000, "Member 'PCGSpatialData_GetDensityAtPosition::InPosition' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_GetDensityAtPosition, ReturnValue) == 0x000018, "Member 'PCGSpatialData_GetDensityAtPosition::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.GetDimension
// 0x0004 (0x0004 - 0x0000)
struct PCGSpatialData_GetDimension final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_GetDimension) == 0x000004, "Wrong alignment on PCGSpatialData_GetDimension");
static_assert(sizeof(PCGSpatialData_GetDimension) == 0x000004, "Wrong size on PCGSpatialData_GetDimension");
static_assert(offsetof(PCGSpatialData_GetDimension, ReturnValue) == 0x000000, "Member 'PCGSpatialData_GetDimension::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.GetNormal
// 0x0018 (0x0018 - 0x0000)
struct PCGSpatialData_GetNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_GetNormal) == 0x000008, "Wrong alignment on PCGSpatialData_GetNormal");
static_assert(sizeof(PCGSpatialData_GetNormal) == 0x000018, "Wrong size on PCGSpatialData_GetNormal");
static_assert(offsetof(PCGSpatialData_GetNormal, ReturnValue) == 0x000000, "Member 'PCGSpatialData_GetNormal::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.GetStrictBounds
// 0x0038 (0x0038 - 0x0000)
struct PCGSpatialData_GetStrictBounds final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_GetStrictBounds) == 0x000008, "Wrong alignment on PCGSpatialData_GetStrictBounds");
static_assert(sizeof(PCGSpatialData_GetStrictBounds) == 0x000038, "Wrong size on PCGSpatialData_GetStrictBounds");
static_assert(offsetof(PCGSpatialData_GetStrictBounds, ReturnValue) == 0x000000, "Member 'PCGSpatialData_GetStrictBounds::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.HasNonTrivialTransform
// 0x0001 (0x0001 - 0x0000)
struct PCGSpatialData_HasNonTrivialTransform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_HasNonTrivialTransform) == 0x000001, "Wrong alignment on PCGSpatialData_HasNonTrivialTransform");
static_assert(sizeof(PCGSpatialData_HasNonTrivialTransform) == 0x000001, "Wrong size on PCGSpatialData_HasNonTrivialTransform");
static_assert(offsetof(PCGSpatialData_HasNonTrivialTransform, ReturnValue) == 0x000000, "Member 'PCGSpatialData_HasNonTrivialTransform::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.IntersectWith
// 0x0010 (0x0010 - 0x0000)
struct PCGSpatialData_IntersectWith final
{
public:
	const class UPCGSpatialData*                  InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGIntersectionData*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_IntersectWith) == 0x000008, "Wrong alignment on PCGSpatialData_IntersectWith");
static_assert(sizeof(PCGSpatialData_IntersectWith) == 0x000010, "Wrong size on PCGSpatialData_IntersectWith");
static_assert(offsetof(PCGSpatialData_IntersectWith, InOther) == 0x000000, "Member 'PCGSpatialData_IntersectWith::InOther' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_IntersectWith, ReturnValue) == 0x000008, "Member 'PCGSpatialData_IntersectWith::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.K2_ProjectPoint
// 0x01A0 (0x01A0 - 0x0000)
struct PCGSpatialData_K2_ProjectPoint final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   InBounds;                                          // 0x0060(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPCGProjectionParams                   InParams;                                          // 0x0098(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              OutPoint;                                          // 0x00C0(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           OutMetadata;                                       // 0x0190(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0198(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGSpatialData_K2_ProjectPoint) == 0x000010, "Wrong alignment on PCGSpatialData_K2_ProjectPoint");
static_assert(sizeof(PCGSpatialData_K2_ProjectPoint) == 0x0001A0, "Wrong size on PCGSpatialData_K2_ProjectPoint");
static_assert(offsetof(PCGSpatialData_K2_ProjectPoint, InTransform) == 0x000000, "Member 'PCGSpatialData_K2_ProjectPoint::InTransform' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_ProjectPoint, InBounds) == 0x000060, "Member 'PCGSpatialData_K2_ProjectPoint::InBounds' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_ProjectPoint, InParams) == 0x000098, "Member 'PCGSpatialData_K2_ProjectPoint::InParams' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_ProjectPoint, OutPoint) == 0x0000C0, "Member 'PCGSpatialData_K2_ProjectPoint::OutPoint' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_ProjectPoint, OutMetadata) == 0x000190, "Member 'PCGSpatialData_K2_ProjectPoint::OutMetadata' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_ProjectPoint, ReturnValue) == 0x000198, "Member 'PCGSpatialData_K2_ProjectPoint::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.K2_SamplePoint
// 0x0180 (0x0180 - 0x0000)
struct PCGSpatialData_K2_SamplePoint final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x0060(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              OutPoint;                                          // 0x00A0(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           OutMetadata;                                       // 0x0170(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0178(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGSpatialData_K2_SamplePoint) == 0x000010, "Wrong alignment on PCGSpatialData_K2_SamplePoint");
static_assert(sizeof(PCGSpatialData_K2_SamplePoint) == 0x000180, "Wrong size on PCGSpatialData_K2_SamplePoint");
static_assert(offsetof(PCGSpatialData_K2_SamplePoint, Transform) == 0x000000, "Member 'PCGSpatialData_K2_SamplePoint::Transform' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_SamplePoint, Bounds) == 0x000060, "Member 'PCGSpatialData_K2_SamplePoint::Bounds' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_SamplePoint, OutPoint) == 0x0000A0, "Member 'PCGSpatialData_K2_SamplePoint::OutPoint' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_SamplePoint, OutMetadata) == 0x000170, "Member 'PCGSpatialData_K2_SamplePoint::OutMetadata' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_K2_SamplePoint, ReturnValue) == 0x000178, "Member 'PCGSpatialData_K2_SamplePoint::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.ProjectOn
// 0x0030 (0x0030 - 0x0000)
struct PCGSpatialData_ProjectOn final
{
public:
	const class UPCGSpatialData*                  InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGProjectionParams                   InParams;                                          // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UPCGSpatialData*                        ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_ProjectOn) == 0x000008, "Wrong alignment on PCGSpatialData_ProjectOn");
static_assert(sizeof(PCGSpatialData_ProjectOn) == 0x000030, "Wrong size on PCGSpatialData_ProjectOn");
static_assert(offsetof(PCGSpatialData_ProjectOn, InOther) == 0x000000, "Member 'PCGSpatialData_ProjectOn::InOther' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_ProjectOn, InParams) == 0x000008, "Member 'PCGSpatialData_ProjectOn::InParams' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_ProjectOn, ReturnValue) == 0x000028, "Member 'PCGSpatialData_ProjectOn::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.Subtract
// 0x0010 (0x0010 - 0x0000)
struct PCGSpatialData_Subtract final
{
public:
	const class UPCGSpatialData*                  InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGDifferenceData*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_Subtract) == 0x000008, "Wrong alignment on PCGSpatialData_Subtract");
static_assert(sizeof(PCGSpatialData_Subtract) == 0x000010, "Wrong size on PCGSpatialData_Subtract");
static_assert(offsetof(PCGSpatialData_Subtract, InOther) == 0x000000, "Member 'PCGSpatialData_Subtract::InOther' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_Subtract, ReturnValue) == 0x000008, "Member 'PCGSpatialData_Subtract::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.ToPointData
// 0x0008 (0x0008 - 0x0000)
struct PCGSpatialData_ToPointData final
{
public:
	const class UPCGPointData*                    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_ToPointData) == 0x000008, "Wrong alignment on PCGSpatialData_ToPointData");
static_assert(sizeof(PCGSpatialData_ToPointData) == 0x000008, "Wrong size on PCGSpatialData_ToPointData");
static_assert(offsetof(PCGSpatialData_ToPointData, ReturnValue) == 0x000000, "Member 'PCGSpatialData_ToPointData::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.ToPointDataWithContext
// 0x00D8 (0x00D8 - 0x0000)
struct PCGSpatialData_ToPointDataWithContext final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    ReturnValue;                                       // 0x00D0(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_ToPointDataWithContext) == 0x000008, "Wrong alignment on PCGSpatialData_ToPointDataWithContext");
static_assert(sizeof(PCGSpatialData_ToPointDataWithContext) == 0x0000D8, "Wrong size on PCGSpatialData_ToPointDataWithContext");
static_assert(offsetof(PCGSpatialData_ToPointDataWithContext, Context) == 0x000000, "Member 'PCGSpatialData_ToPointDataWithContext::Context' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_ToPointDataWithContext, ReturnValue) == 0x0000D0, "Member 'PCGSpatialData_ToPointDataWithContext::ReturnValue' has a wrong offset!");

// Function PCG.PCGSpatialData.UnionWith
// 0x0010 (0x0010 - 0x0000)
struct PCGSpatialData_UnionWith final
{
public:
	const class UPCGSpatialData*                  InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGUnionData*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGSpatialData_UnionWith) == 0x000008, "Wrong alignment on PCGSpatialData_UnionWith");
static_assert(sizeof(PCGSpatialData_UnionWith) == 0x000010, "Wrong size on PCGSpatialData_UnionWith");
static_assert(offsetof(PCGSpatialData_UnionWith, InOther) == 0x000000, "Member 'PCGSpatialData_UnionWith::InOther' has a wrong offset!");
static_assert(offsetof(PCGSpatialData_UnionWith, ReturnValue) == 0x000008, "Member 'PCGSpatialData_UnionWith::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.CopyAndFixLast
// 0x0058 (0x0058 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast final
{
public:
	struct FPCGAttributePropertyInputSelector     Selector;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGData*                         InData;                                            // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     ReturnValue;                                       // 0x0030(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast) == 0x000058, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast, InData) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast::InData' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast, ReturnValue) == 0x000030, "Member 'PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixLast::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.CopyAndFixSource
// 0x0078 (0x0078 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource final
{
public:
	struct FPCGAttributePropertyOutputSelector    OutputSelector;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyInputSelector     InputSelector;                                     // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGAttributePropertyOutputSelector    ReturnValue;                                       // 0x0050(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource) == 0x000078, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource, OutputSelector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource::OutputSelector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource, InputSelector) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource::InputSelector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource, ReturnValue) == 0x000050, "Member 'PCGAttributePropertySelectorBlueprintHelpers_CopyAndFixSource::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.GetAttributeName
// 0x0030 (0x0030 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName) == 0x000030, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName, ReturnValue) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetAttributeName::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.GetExtraNames
// 0x0038 (0x0038 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames) == 0x000038, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames, ReturnValue) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetExtraNames::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.GetExtraProperty
// 0x0030 (0x0030 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGExtraProperties                           ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty) == 0x000030, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty, ReturnValue) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetExtraProperty::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.GetName
// 0x0030 (0x0030 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_GetName final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_GetName) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_GetName");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_GetName) == 0x000030, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_GetName");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetName, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetName::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetName, ReturnValue) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetName::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.GetPointProperty
// 0x0030 (0x0030 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGPointProperties                           ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty) == 0x000030, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty, ReturnValue) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetPointProperty::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.GetSelection
// 0x0030 (0x0030 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_GetSelection final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGAttributePropertySelection                ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_GetSelection) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_GetSelection");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_GetSelection) == 0x000030, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_GetSelection");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetSelection, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetSelection::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_GetSelection, ReturnValue) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_GetSelection::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.SetAttributeName
// 0x0038 (0x0038 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAttributeName;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName) == 0x000038, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName, InAttributeName) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName::InAttributeName' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName, ReturnValue) == 0x000030, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetAttributeName::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.SetExtraProperty
// 0x0030 (0x0030 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGExtraProperties                           InExtraProperty;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty) == 0x000030, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty, InExtraProperty) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty::InExtraProperty' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty, ReturnValue) == 0x000029, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetExtraProperty::ReturnValue' has a wrong offset!");

// Function PCG.PCGAttributePropertySelectorBlueprintHelpers.SetPointProperty
// 0x0030 (0x0030 - 0x0000)
struct PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty final
{
public:
	struct FPCGAttributePropertySelector          Selector;                                          // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGPointProperties                           InPointProperty;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty) == 0x000008, "Wrong alignment on PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty");
static_assert(sizeof(PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty) == 0x000030, "Wrong size on PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty, Selector) == 0x000000, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty::Selector' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty, InPointProperty) == 0x000028, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty::InPointProperty' has a wrong offset!");
static_assert(offsetof(PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty, ReturnValue) == 0x000029, "Member 'PCGAttributePropertySelectorBlueprintHelpers_SetPointProperty::ReturnValue' has a wrong offset!");

// Function PCG.PCGUnionData.AddData
// 0x0008 (0x0008 - 0x0000)
struct PCGUnionData_AddData final
{
public:
	const class UPCGSpatialData*                  InData;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGUnionData_AddData) == 0x000008, "Wrong alignment on PCGUnionData_AddData");
static_assert(sizeof(PCGUnionData_AddData) == 0x000008, "Wrong size on PCGUnionData_AddData");
static_assert(offsetof(PCGUnionData_AddData, InData) == 0x000000, "Member 'PCGUnionData_AddData::InData' has a wrong offset!");

// Function PCG.PCGUnionData.Initialize
// 0x0010 (0x0010 - 0x0000)
struct PCGUnionData_Initialize final
{
public:
	const class UPCGSpatialData*                  InA;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGSpatialData*                  InB;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGUnionData_Initialize) == 0x000008, "Wrong alignment on PCGUnionData_Initialize");
static_assert(sizeof(PCGUnionData_Initialize) == 0x000010, "Wrong size on PCGUnionData_Initialize");
static_assert(offsetof(PCGUnionData_Initialize, InA) == 0x000000, "Member 'PCGUnionData_Initialize::InA' has a wrong offset!");
static_assert(offsetof(PCGUnionData_Initialize, InB) == 0x000008, "Member 'PCGUnionData_Initialize::InB' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetBoolParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetBoolParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_GetBoolParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetBoolParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetBoolParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetBoolParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetBoolParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetBoolParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetBoolParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetBoolParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetBoolParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetBoolParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetByteParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetByteParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_GetByteParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetByteParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetByteParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetByteParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetByteParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetByteParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetByteParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetByteParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetByteParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetByteParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetClassParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetClassParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetClassParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetClassParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetClassParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetClassParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetClassParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetClassParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetClassParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetClassParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetClassParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetClassParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetDoubleParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetDoubleParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetDoubleParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetDoubleParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetDoubleParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetDoubleParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetDoubleParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetDoubleParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetDoubleParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetDoubleParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetDoubleParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetDoubleParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetEnumParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetEnumParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_GetEnumParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetEnumParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetEnumParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetEnumParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetEnumParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetEnumParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetEnumParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetEnumParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetEnumParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetEnumParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetFloatParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetFloatParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_GetFloatParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetFloatParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetFloatParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetFloatParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetFloatParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetFloatParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetFloatParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetFloatParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetFloatParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetFloatParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetInt32Parameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetInt32Parameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_GetInt32Parameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetInt32Parameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetInt32Parameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetInt32Parameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetInt32Parameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetInt32Parameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetInt32Parameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetInt32Parameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetInt32Parameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetInt32Parameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetInt64Parameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetInt64Parameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetInt64Parameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetInt64Parameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetInt64Parameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetInt64Parameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetInt64Parameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetInt64Parameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetInt64Parameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetInt64Parameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetInt64Parameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetInt64Parameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetNameParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetNameParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetNameParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetNameParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetNameParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetNameParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetNameParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetNameParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetNameParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetNameParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetNameParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetNameParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetObjectParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_GetObjectParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetObjectParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetObjectParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetObjectParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_GetObjectParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetObjectParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetObjectParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetObjectParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetObjectParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetObjectParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetObjectParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetQuaternionParameter
// 0x0030 (0x0030 - 0x0000)
struct PCGGraphParametersHelpers_GetQuaternionParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetQuaternionParameter) == 0x000010, "Wrong alignment on PCGGraphParametersHelpers_GetQuaternionParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetQuaternionParameter) == 0x000030, "Wrong size on PCGGraphParametersHelpers_GetQuaternionParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetQuaternionParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetQuaternionParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetQuaternionParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetQuaternionParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetQuaternionParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetQuaternionParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetRotatorParameter
// 0x0028 (0x0028 - 0x0000)
struct PCGGraphParametersHelpers_GetRotatorParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetRotatorParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetRotatorParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetRotatorParameter) == 0x000028, "Wrong size on PCGGraphParametersHelpers_GetRotatorParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetRotatorParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetRotatorParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetRotatorParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetRotatorParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetRotatorParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetRotatorParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetSoftClassParameter
// 0x0038 (0x0038 - 0x0000)
struct PCGGraphParametersHelpers_GetSoftClassParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetSoftClassParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetSoftClassParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetSoftClassParameter) == 0x000038, "Wrong size on PCGGraphParametersHelpers_GetSoftClassParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftClassParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetSoftClassParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftClassParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetSoftClassParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftClassParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetSoftClassParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetSoftObjectParameter
// 0x0038 (0x0038 - 0x0000)
struct PCGGraphParametersHelpers_GetSoftObjectParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetSoftObjectParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetSoftObjectParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetSoftObjectParameter) == 0x000038, "Wrong size on PCGGraphParametersHelpers_GetSoftObjectParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftObjectParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetSoftObjectParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftObjectParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetSoftObjectParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftObjectParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetSoftObjectParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetSoftObjectPathParameter
// 0x0030 (0x0030 - 0x0000)
struct PCGGraphParametersHelpers_GetSoftObjectPathParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetSoftObjectPathParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetSoftObjectPathParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetSoftObjectPathParameter) == 0x000030, "Wrong size on PCGGraphParametersHelpers_GetSoftObjectPathParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftObjectPathParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetSoftObjectPathParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftObjectPathParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetSoftObjectPathParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetSoftObjectPathParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetSoftObjectPathParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetStringParameter
// 0x0020 (0x0020 - 0x0000)
struct PCGGraphParametersHelpers_GetStringParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetStringParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetStringParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetStringParameter) == 0x000020, "Wrong size on PCGGraphParametersHelpers_GetStringParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetStringParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetStringParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetStringParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetStringParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetStringParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetStringParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetTransformParameter
// 0x0070 (0x0070 - 0x0000)
struct PCGGraphParametersHelpers_GetTransformParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetTransformParameter) == 0x000010, "Wrong alignment on PCGGraphParametersHelpers_GetTransformParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetTransformParameter) == 0x000070, "Wrong size on PCGGraphParametersHelpers_GetTransformParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetTransformParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetTransformParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetTransformParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetTransformParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetTransformParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetTransformParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetVector2DParameter
// 0x0020 (0x0020 - 0x0000)
struct PCGGraphParametersHelpers_GetVector2DParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetVector2DParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetVector2DParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetVector2DParameter) == 0x000020, "Wrong size on PCGGraphParametersHelpers_GetVector2DParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetVector2DParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetVector2DParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetVector2DParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetVector2DParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetVector2DParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetVector2DParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetVector4Parameter
// 0x0030 (0x0030 - 0x0000)
struct PCGGraphParametersHelpers_GetVector4Parameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetVector4Parameter) == 0x000010, "Wrong alignment on PCGGraphParametersHelpers_GetVector4Parameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetVector4Parameter) == 0x000030, "Wrong size on PCGGraphParametersHelpers_GetVector4Parameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetVector4Parameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetVector4Parameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetVector4Parameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetVector4Parameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetVector4Parameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetVector4Parameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.GetVectorParameter
// 0x0028 (0x0028 - 0x0000)
struct PCGGraphParametersHelpers_GetVectorParameter final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_GetVectorParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_GetVectorParameter");
static_assert(sizeof(PCGGraphParametersHelpers_GetVectorParameter) == 0x000028, "Wrong size on PCGGraphParametersHelpers_GetVectorParameter");
static_assert(offsetof(PCGGraphParametersHelpers_GetVectorParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_GetVectorParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetVectorParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_GetVectorParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_GetVectorParameter, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_GetVectorParameter::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.IsOverridden
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_IsOverridden final
{
public:
	const class UPCGGraphInterface*               GraphInterface;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_IsOverridden) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_IsOverridden");
static_assert(sizeof(PCGGraphParametersHelpers_IsOverridden) == 0x000018, "Wrong size on PCGGraphParametersHelpers_IsOverridden");
static_assert(offsetof(PCGGraphParametersHelpers_IsOverridden, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_IsOverridden::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_IsOverridden, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_IsOverridden::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_IsOverridden, ReturnValue) == 0x000010, "Member 'PCGGraphParametersHelpers_IsOverridden::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetBoolParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetBoolParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_SetBoolParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetBoolParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetBoolParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetBoolParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetBoolParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetBoolParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetBoolParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetBoolParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetBoolParameter, bValue) == 0x000010, "Member 'PCGGraphParametersHelpers_SetBoolParameter::bValue' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetByteParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetByteParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_SetByteParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetByteParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetByteParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetByteParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetByteParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetByteParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetByteParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetByteParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetByteParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetByteParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetClassParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetClassParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetClassParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetClassParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetClassParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetClassParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetClassParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetClassParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetClassParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetClassParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetClassParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetClassParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetDoubleParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetDoubleParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Value;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetDoubleParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetDoubleParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetDoubleParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetDoubleParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetDoubleParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetDoubleParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetDoubleParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetDoubleParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetDoubleParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetDoubleParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetEnumParameter
// 0x0020 (0x0020 - 0x0000)
struct PCGGraphParametersHelpers_SetEnumParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UEnum*                            Enum;                                              // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetEnumParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetEnumParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetEnumParameter) == 0x000020, "Wrong size on PCGGraphParametersHelpers_SetEnumParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetEnumParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetEnumParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetEnumParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetEnumParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetEnumParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetEnumParameter::Value' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetEnumParameter, Enum) == 0x000018, "Member 'PCGGraphParametersHelpers_SetEnumParameter::Enum' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetFloatParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetFloatParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_SetFloatParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetFloatParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetFloatParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetFloatParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetFloatParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetFloatParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetFloatParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetFloatParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetFloatParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetFloatParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetInt32Parameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetInt32Parameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraphParametersHelpers_SetInt32Parameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetInt32Parameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetInt32Parameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetInt32Parameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetInt32Parameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetInt32Parameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetInt32Parameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetInt32Parameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetInt32Parameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetInt32Parameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetInt64Parameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetInt64Parameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetInt64Parameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetInt64Parameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetInt64Parameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetInt64Parameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetInt64Parameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetInt64Parameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetInt64Parameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetInt64Parameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetInt64Parameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetInt64Parameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetNameParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetNameParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetNameParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetNameParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetNameParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetNameParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetNameParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetNameParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetNameParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetNameParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetNameParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetNameParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetObjectParameter
// 0x0018 (0x0018 - 0x0000)
struct PCGGraphParametersHelpers_SetObjectParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Value;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetObjectParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetObjectParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetObjectParameter) == 0x000018, "Wrong size on PCGGraphParametersHelpers_SetObjectParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetObjectParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetObjectParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetObjectParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetObjectParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetObjectParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetObjectParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetQuaternionParameter
// 0x0030 (0x0030 - 0x0000)
struct PCGGraphParametersHelpers_SetQuaternionParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Value;                                             // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetQuaternionParameter) == 0x000010, "Wrong alignment on PCGGraphParametersHelpers_SetQuaternionParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetQuaternionParameter) == 0x000030, "Wrong size on PCGGraphParametersHelpers_SetQuaternionParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetQuaternionParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetQuaternionParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetQuaternionParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetQuaternionParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetQuaternionParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetQuaternionParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetRotatorParameter
// 0x0028 (0x0028 - 0x0000)
struct PCGGraphParametersHelpers_SetRotatorParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetRotatorParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetRotatorParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetRotatorParameter) == 0x000028, "Wrong size on PCGGraphParametersHelpers_SetRotatorParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetRotatorParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetRotatorParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetRotatorParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetRotatorParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetRotatorParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetRotatorParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetSoftClassParameter
// 0x0038 (0x0038 - 0x0000)
struct PCGGraphParametersHelpers_SetSoftClassParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Value;                                             // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetSoftClassParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetSoftClassParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetSoftClassParameter) == 0x000038, "Wrong size on PCGGraphParametersHelpers_SetSoftClassParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftClassParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetSoftClassParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftClassParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetSoftClassParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftClassParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetSoftClassParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetSoftObjectParameter
// 0x0038 (0x0038 - 0x0000)
struct PCGGraphParametersHelpers_SetSoftObjectParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 Value;                                             // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetSoftObjectParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetSoftObjectParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetSoftObjectParameter) == 0x000038, "Wrong size on PCGGraphParametersHelpers_SetSoftObjectParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftObjectParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetSoftObjectParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftObjectParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetSoftObjectParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftObjectParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetSoftObjectParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetSoftObjectPathParameter
// 0x0030 (0x0030 - 0x0000)
struct PCGGraphParametersHelpers_SetSoftObjectPathParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Value;                                             // 0x0010(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetSoftObjectPathParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetSoftObjectPathParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetSoftObjectPathParameter) == 0x000030, "Wrong size on PCGGraphParametersHelpers_SetSoftObjectPathParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftObjectPathParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetSoftObjectPathParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftObjectPathParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetSoftObjectPathParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetSoftObjectPathParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetSoftObjectPathParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetStringParameter
// 0x0020 (0x0020 - 0x0000)
struct PCGGraphParametersHelpers_SetStringParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetStringParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetStringParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetStringParameter) == 0x000020, "Wrong size on PCGGraphParametersHelpers_SetStringParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetStringParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetStringParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetStringParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetStringParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetStringParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetStringParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetTransformParameter
// 0x0070 (0x0070 - 0x0000)
struct PCGGraphParametersHelpers_SetTransformParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Value;                                             // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetTransformParameter) == 0x000010, "Wrong alignment on PCGGraphParametersHelpers_SetTransformParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetTransformParameter) == 0x000070, "Wrong size on PCGGraphParametersHelpers_SetTransformParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetTransformParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetTransformParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetTransformParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetTransformParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetTransformParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetTransformParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetVector2DParameter
// 0x0020 (0x0020 - 0x0000)
struct PCGGraphParametersHelpers_SetVector2DParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetVector2DParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetVector2DParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetVector2DParameter) == 0x000020, "Wrong size on PCGGraphParametersHelpers_SetVector2DParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetVector2DParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetVector2DParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetVector2DParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetVector2DParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetVector2DParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetVector2DParameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetVector4Parameter
// 0x0030 (0x0030 - 0x0000)
struct PCGGraphParametersHelpers_SetVector4Parameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Value;                                             // 0x0010(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetVector4Parameter) == 0x000010, "Wrong alignment on PCGGraphParametersHelpers_SetVector4Parameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetVector4Parameter) == 0x000030, "Wrong size on PCGGraphParametersHelpers_SetVector4Parameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetVector4Parameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetVector4Parameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetVector4Parameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetVector4Parameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetVector4Parameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetVector4Parameter::Value' has a wrong offset!");

// Function PCG.PCGGraphParametersHelpers.SetVectorParameter
// 0x0028 (0x0028 - 0x0000)
struct PCGGraphParametersHelpers_SetVectorParameter final
{
public:
	class UPCGGraphInterface*                     GraphInterface;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphParametersHelpers_SetVectorParameter) == 0x000008, "Wrong alignment on PCGGraphParametersHelpers_SetVectorParameter");
static_assert(sizeof(PCGGraphParametersHelpers_SetVectorParameter) == 0x000028, "Wrong size on PCGGraphParametersHelpers_SetVectorParameter");
static_assert(offsetof(PCGGraphParametersHelpers_SetVectorParameter, GraphInterface) == 0x000000, "Member 'PCGGraphParametersHelpers_SetVectorParameter::GraphInterface' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetVectorParameter, Name_0) == 0x000008, "Member 'PCGGraphParametersHelpers_SetVectorParameter::Name_0' has a wrong offset!");
static_assert(offsetof(PCGGraphParametersHelpers_SetVectorParameter, Value) == 0x000010, "Member 'PCGGraphParametersHelpers_SetVectorParameter::Value' has a wrong offset!");

// Function PCG.PCGFunctionPrototypes.PrototypeWithPointAndMetadata
// 0x00E0 (0x00E0 - 0x0000)
struct PCGFunctionPrototypes_PrototypeWithPointAndMetadata final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGFunctionPrototypes_PrototypeWithPointAndMetadata) == 0x000010, "Wrong alignment on PCGFunctionPrototypes_PrototypeWithPointAndMetadata");
static_assert(sizeof(PCGFunctionPrototypes_PrototypeWithPointAndMetadata) == 0x0000E0, "Wrong size on PCGFunctionPrototypes_PrototypeWithPointAndMetadata");
static_assert(offsetof(PCGFunctionPrototypes_PrototypeWithPointAndMetadata, Point) == 0x000000, "Member 'PCGFunctionPrototypes_PrototypeWithPointAndMetadata::Point' has a wrong offset!");
static_assert(offsetof(PCGFunctionPrototypes_PrototypeWithPointAndMetadata, MetaData) == 0x0000D0, "Member 'PCGFunctionPrototypes_PrototypeWithPointAndMetadata::MetaData' has a wrong offset!");

// Function PCG.PCGDifferenceData.AddDifference
// 0x0008 (0x0008 - 0x0000)
struct PCGDifferenceData_AddDifference final
{
public:
	const class UPCGSpatialData*                  InDifference;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDifferenceData_AddDifference) == 0x000008, "Wrong alignment on PCGDifferenceData_AddDifference");
static_assert(sizeof(PCGDifferenceData_AddDifference) == 0x000008, "Wrong size on PCGDifferenceData_AddDifference");
static_assert(offsetof(PCGDifferenceData_AddDifference, InDifference) == 0x000000, "Member 'PCGDifferenceData_AddDifference::InDifference' has a wrong offset!");

// Function PCG.PCGDifferenceData.Initialize
// 0x0008 (0x0008 - 0x0000)
struct PCGDifferenceData_Initialize final
{
public:
	const class UPCGSpatialData*                  InData;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDifferenceData_Initialize) == 0x000008, "Wrong alignment on PCGDifferenceData_Initialize");
static_assert(sizeof(PCGDifferenceData_Initialize) == 0x000008, "Wrong size on PCGDifferenceData_Initialize");
static_assert(offsetof(PCGDifferenceData_Initialize, InData) == 0x000000, "Member 'PCGDifferenceData_Initialize::InData' has a wrong offset!");

// Function PCG.PCGDifferenceData.SetDensityFunction
// 0x0001 (0x0001 - 0x0000)
struct PCGDifferenceData_SetDensityFunction final
{
public:
	EPCGDifferenceDensityFunction                 InDensityFunction;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDifferenceData_SetDensityFunction) == 0x000001, "Wrong alignment on PCGDifferenceData_SetDensityFunction");
static_assert(sizeof(PCGDifferenceData_SetDensityFunction) == 0x000001, "Wrong size on PCGDifferenceData_SetDensityFunction");
static_assert(offsetof(PCGDifferenceData_SetDensityFunction, InDensityFunction) == 0x000000, "Member 'PCGDifferenceData_SetDensityFunction::InDensityFunction' has a wrong offset!");

// Function PCG.PCGIntersectionData.Initialize
// 0x0010 (0x0010 - 0x0000)
struct PCGIntersectionData_Initialize final
{
public:
	const class UPCGSpatialData*                  InA;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGSpatialData*                  InB;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGIntersectionData_Initialize) == 0x000008, "Wrong alignment on PCGIntersectionData_Initialize");
static_assert(sizeof(PCGIntersectionData_Initialize) == 0x000010, "Wrong size on PCGIntersectionData_Initialize");
static_assert(offsetof(PCGIntersectionData_Initialize, InA) == 0x000000, "Member 'PCGIntersectionData_Initialize::InA' has a wrong offset!");
static_assert(offsetof(PCGIntersectionData_Initialize, InB) == 0x000008, "Member 'PCGIntersectionData_Initialize::InB' has a wrong offset!");

// Function PCG.PCGPointData.CopyPointsFrom
// 0x0018 (0x0018 - 0x0000)
struct PCGPointData_CopyPointsFrom final
{
public:
	const class UPCGPointData*                    InData;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 InDataIndices;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPointData_CopyPointsFrom) == 0x000008, "Wrong alignment on PCGPointData_CopyPointsFrom");
static_assert(sizeof(PCGPointData_CopyPointsFrom) == 0x000018, "Wrong size on PCGPointData_CopyPointsFrom");
static_assert(offsetof(PCGPointData_CopyPointsFrom, InData) == 0x000000, "Member 'PCGPointData_CopyPointsFrom::InData' has a wrong offset!");
static_assert(offsetof(PCGPointData_CopyPointsFrom, InDataIndices) == 0x000008, "Member 'PCGPointData_CopyPointsFrom::InDataIndices' has a wrong offset!");

// Function PCG.PCGPointData.SetPoints
// 0x0010 (0x0010 - 0x0000)
struct PCGPointData_SetPoints final
{
public:
	TArray<struct FPCGPoint>                      InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPointData_SetPoints) == 0x000008, "Wrong alignment on PCGPointData_SetPoints");
static_assert(sizeof(PCGPointData_SetPoints) == 0x000010, "Wrong size on PCGPointData_SetPoints");
static_assert(offsetof(PCGPointData_SetPoints, InPoints) == 0x000000, "Member 'PCGPointData_SetPoints::InPoints' has a wrong offset!");

// Function PCG.PCGPointData.GetPoint
// 0x00E0 (0x00E0 - 0x0000)
struct PCGPointData_GetPoint final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              ReturnValue;                                       // 0x0010(0x00D0)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPointData_GetPoint) == 0x000010, "Wrong alignment on PCGPointData_GetPoint");
static_assert(sizeof(PCGPointData_GetPoint) == 0x0000E0, "Wrong size on PCGPointData_GetPoint");
static_assert(offsetof(PCGPointData_GetPoint, Index_0) == 0x000000, "Member 'PCGPointData_GetPoint::Index_0' has a wrong offset!");
static_assert(offsetof(PCGPointData_GetPoint, ReturnValue) == 0x000010, "Member 'PCGPointData_GetPoint::ReturnValue' has a wrong offset!");

// Function PCG.PCGPointData.GetPoints
// 0x0010 (0x0010 - 0x0000)
struct PCGPointData_GetPoints final
{
public:
	TArray<struct FPCGPoint>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPointData_GetPoints) == 0x000008, "Wrong alignment on PCGPointData_GetPoints");
static_assert(sizeof(PCGPointData_GetPoints) == 0x000010, "Wrong size on PCGPointData_GetPoints");
static_assert(offsetof(PCGPointData_GetPoints, ReturnValue) == 0x000000, "Member 'PCGPointData_GetPoints::ReturnValue' has a wrong offset!");

// Function PCG.PCGPointData.GetPointsCopy
// 0x0010 (0x0010 - 0x0000)
struct PCGPointData_GetPointsCopy final
{
public:
	TArray<struct FPCGPoint>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPointData_GetPointsCopy) == 0x000008, "Wrong alignment on PCGPointData_GetPointsCopy");
static_assert(sizeof(PCGPointData_GetPointsCopy) == 0x000010, "Wrong size on PCGPointData_GetPointsCopy");
static_assert(offsetof(PCGPointData_GetPointsCopy, ReturnValue) == 0x000000, "Member 'PCGPointData_GetPointsCopy::ReturnValue' has a wrong offset!");

// Function PCG.PCGRenderTargetData.Initialize
// 0x0070 (0x0070 - 0x0000)
struct PCGRenderTargetData_Initialize final
{
public:
	class UTextureRenderTarget2D*                 InRenderTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGRenderTargetData_Initialize) == 0x000010, "Wrong alignment on PCGRenderTargetData_Initialize");
static_assert(sizeof(PCGRenderTargetData_Initialize) == 0x000070, "Wrong size on PCGRenderTargetData_Initialize");
static_assert(offsetof(PCGRenderTargetData_Initialize, InRenderTarget) == 0x000000, "Member 'PCGRenderTargetData_Initialize::InRenderTarget' has a wrong offset!");
static_assert(offsetof(PCGRenderTargetData_Initialize, InTransform) == 0x000010, "Member 'PCGRenderTargetData_Initialize::InTransform' has a wrong offset!");

// Function PCG.PCGBlueprintElement.ApplyPreconfiguredSettings
// 0x0018 (0x0018 - 0x0000)
struct PCGBlueprintElement_ApplyPreconfiguredSettings final
{
public:
	struct FPCGPreConfiguredSettingsInfo          InPreconfigureInfo;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_ApplyPreconfiguredSettings) == 0x000008, "Wrong alignment on PCGBlueprintElement_ApplyPreconfiguredSettings");
static_assert(sizeof(PCGBlueprintElement_ApplyPreconfiguredSettings) == 0x000018, "Wrong size on PCGBlueprintElement_ApplyPreconfiguredSettings");
static_assert(offsetof(PCGBlueprintElement_ApplyPreconfiguredSettings, InPreconfigureInfo) == 0x000000, "Member 'PCGBlueprintElement_ApplyPreconfiguredSettings::InPreconfigureInfo' has a wrong offset!");

// Function PCG.PCGBlueprintElement.Execute
// 0x0060 (0x0060 - 0x0000)
struct PCGBlueprintElement_Execute final
{
public:
	struct FPCGDataCollection                     Input;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPCGDataCollection                     Output;                                            // 0x0030(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_Execute) == 0x000008, "Wrong alignment on PCGBlueprintElement_Execute");
static_assert(sizeof(PCGBlueprintElement_Execute) == 0x000060, "Wrong size on PCGBlueprintElement_Execute");
static_assert(offsetof(PCGBlueprintElement_Execute, Input) == 0x000000, "Member 'PCGBlueprintElement_Execute::Input' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_Execute, Output) == 0x000030, "Member 'PCGBlueprintElement_Execute::Output' has a wrong offset!");

// Function PCG.PCGBlueprintElement.ExecuteWithContext
// 0x0130 (0x0130 - 0x0000)
struct PCGBlueprintElement_ExecuteWithContext final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPCGDataCollection                     Input;                                             // 0x00D0(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPCGDataCollection                     Output;                                            // 0x0100(0x0030)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_ExecuteWithContext) == 0x000008, "Wrong alignment on PCGBlueprintElement_ExecuteWithContext");
static_assert(sizeof(PCGBlueprintElement_ExecuteWithContext) == 0x000130, "Wrong size on PCGBlueprintElement_ExecuteWithContext");
static_assert(offsetof(PCGBlueprintElement_ExecuteWithContext, InContext) == 0x000000, "Member 'PCGBlueprintElement_ExecuteWithContext::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_ExecuteWithContext, Input) == 0x0000D0, "Member 'PCGBlueprintElement_ExecuteWithContext::Input' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_ExecuteWithContext, Output) == 0x000100, "Member 'PCGBlueprintElement_ExecuteWithContext::Output' has a wrong offset!");

// Function PCG.PCGBlueprintElement.CustomInputLabels
// 0x0050 (0x0050 - 0x0000)
struct PCGBlueprintElement_CustomInputLabels final
{
public:
	TSet<class FName>                             ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_CustomInputLabels) == 0x000008, "Wrong alignment on PCGBlueprintElement_CustomInputLabels");
static_assert(sizeof(PCGBlueprintElement_CustomInputLabels) == 0x000050, "Wrong size on PCGBlueprintElement_CustomInputLabels");
static_assert(offsetof(PCGBlueprintElement_CustomInputLabels, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_CustomInputLabels::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.CustomOutputLabels
// 0x0050 (0x0050 - 0x0000)
struct PCGBlueprintElement_CustomOutputLabels final
{
public:
	TSet<class FName>                             ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_CustomOutputLabels) == 0x000008, "Wrong alignment on PCGBlueprintElement_CustomOutputLabels");
static_assert(sizeof(PCGBlueprintElement_CustomOutputLabels) == 0x000050, "Wrong size on PCGBlueprintElement_CustomOutputLabels");
static_assert(offsetof(PCGBlueprintElement_CustomOutputLabels, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_CustomOutputLabels::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.GetContext
// 0x00D0 (0x00D0 - 0x0000)
struct PCGBlueprintElement_GetContext final
{
public:
	struct FPCGContext                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_GetContext) == 0x000008, "Wrong alignment on PCGBlueprintElement_GetContext");
static_assert(sizeof(PCGBlueprintElement_GetContext) == 0x0000D0, "Wrong size on PCGBlueprintElement_GetContext");
static_assert(offsetof(PCGBlueprintElement_GetContext, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_GetContext::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.GetInputPinByLabel
// 0x0020 (0x0020 - 0x0000)
struct PCGBlueprintElement_GetInputPinByLabel final
{
public:
	class FName                                   InPinLabel;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGPinProperties                      OutFoundPin;                                       // 0x0008(0x0014)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintElement_GetInputPinByLabel) == 0x000004, "Wrong alignment on PCGBlueprintElement_GetInputPinByLabel");
static_assert(sizeof(PCGBlueprintElement_GetInputPinByLabel) == 0x000020, "Wrong size on PCGBlueprintElement_GetInputPinByLabel");
static_assert(offsetof(PCGBlueprintElement_GetInputPinByLabel, InPinLabel) == 0x000000, "Member 'PCGBlueprintElement_GetInputPinByLabel::InPinLabel' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_GetInputPinByLabel, OutFoundPin) == 0x000008, "Member 'PCGBlueprintElement_GetInputPinByLabel::OutFoundPin' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_GetInputPinByLabel, ReturnValue) == 0x00001C, "Member 'PCGBlueprintElement_GetInputPinByLabel::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.GetInputPins
// 0x0010 (0x0010 - 0x0000)
struct PCGBlueprintElement_GetInputPins final
{
public:
	TArray<struct FPCGPinProperties>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_GetInputPins) == 0x000008, "Wrong alignment on PCGBlueprintElement_GetInputPins");
static_assert(sizeof(PCGBlueprintElement_GetInputPins) == 0x000010, "Wrong size on PCGBlueprintElement_GetInputPins");
static_assert(offsetof(PCGBlueprintElement_GetInputPins, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_GetInputPins::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.GetOutputPinByLabel
// 0x0020 (0x0020 - 0x0000)
struct PCGBlueprintElement_GetOutputPinByLabel final
{
public:
	class FName                                   InPinLabel;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGPinProperties                      OutFoundPin;                                       // 0x0008(0x0014)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintElement_GetOutputPinByLabel) == 0x000004, "Wrong alignment on PCGBlueprintElement_GetOutputPinByLabel");
static_assert(sizeof(PCGBlueprintElement_GetOutputPinByLabel) == 0x000020, "Wrong size on PCGBlueprintElement_GetOutputPinByLabel");
static_assert(offsetof(PCGBlueprintElement_GetOutputPinByLabel, InPinLabel) == 0x000000, "Member 'PCGBlueprintElement_GetOutputPinByLabel::InPinLabel' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_GetOutputPinByLabel, OutFoundPin) == 0x000008, "Member 'PCGBlueprintElement_GetOutputPinByLabel::OutFoundPin' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_GetOutputPinByLabel, ReturnValue) == 0x00001C, "Member 'PCGBlueprintElement_GetOutputPinByLabel::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.GetOutputPins
// 0x0010 (0x0010 - 0x0000)
struct PCGBlueprintElement_GetOutputPins final
{
public:
	TArray<struct FPCGPinProperties>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_GetOutputPins) == 0x000008, "Wrong alignment on PCGBlueprintElement_GetOutputPins");
static_assert(sizeof(PCGBlueprintElement_GetOutputPins) == 0x000010, "Wrong size on PCGBlueprintElement_GetOutputPins");
static_assert(offsetof(PCGBlueprintElement_GetOutputPins, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_GetOutputPins::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.GetRandomStream
// 0x00D8 (0x00D8 - 0x0000)
struct PCGBlueprintElement_GetRandomStream final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRandomStream                          ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_GetRandomStream) == 0x000008, "Wrong alignment on PCGBlueprintElement_GetRandomStream");
static_assert(sizeof(PCGBlueprintElement_GetRandomStream) == 0x0000D8, "Wrong size on PCGBlueprintElement_GetRandomStream");
static_assert(offsetof(PCGBlueprintElement_GetRandomStream, InContext) == 0x000000, "Member 'PCGBlueprintElement_GetRandomStream::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_GetRandomStream, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintElement_GetRandomStream::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.GetSeed
// 0x00D8 (0x00D8 - 0x0000)
struct PCGBlueprintElement_GetSeed final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00D0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintElement_GetSeed) == 0x000008, "Wrong alignment on PCGBlueprintElement_GetSeed");
static_assert(sizeof(PCGBlueprintElement_GetSeed) == 0x0000D8, "Wrong size on PCGBlueprintElement_GetSeed");
static_assert(offsetof(PCGBlueprintElement_GetSeed, InContext) == 0x000000, "Member 'PCGBlueprintElement_GetSeed::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_GetSeed, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintElement_GetSeed::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.IsCacheableOverride
// 0x0001 (0x0001 - 0x0000)
struct PCGBlueprintElement_IsCacheableOverride final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_IsCacheableOverride) == 0x000001, "Wrong alignment on PCGBlueprintElement_IsCacheableOverride");
static_assert(sizeof(PCGBlueprintElement_IsCacheableOverride) == 0x000001, "Wrong size on PCGBlueprintElement_IsCacheableOverride");
static_assert(offsetof(PCGBlueprintElement_IsCacheableOverride, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_IsCacheableOverride::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.IterationLoop
// 0x00F8 (0x00F8 - 0x0000)
struct PCGBlueprintElement_IterationLoop final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         NumIterations;                                     // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OutData;                                           // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGSpatialData*                  OptionalA;                                         // 0x00E0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGSpatialData*                  OptionalB;                                         // 0x00E8(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OptionalOutData;                                   // 0x00F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_IterationLoop) == 0x000008, "Wrong alignment on PCGBlueprintElement_IterationLoop");
static_assert(sizeof(PCGBlueprintElement_IterationLoop) == 0x0000F8, "Wrong size on PCGBlueprintElement_IterationLoop");
static_assert(offsetof(PCGBlueprintElement_IterationLoop, InContext) == 0x000000, "Member 'PCGBlueprintElement_IterationLoop::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoop, NumIterations) == 0x0000D0, "Member 'PCGBlueprintElement_IterationLoop::NumIterations' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoop, OutData) == 0x0000D8, "Member 'PCGBlueprintElement_IterationLoop::OutData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoop, OptionalA) == 0x0000E0, "Member 'PCGBlueprintElement_IterationLoop::OptionalA' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoop, OptionalB) == 0x0000E8, "Member 'PCGBlueprintElement_IterationLoop::OptionalB' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoop, OptionalOutData) == 0x0000F0, "Member 'PCGBlueprintElement_IterationLoop::OptionalOutData' has a wrong offset!");

// Function PCG.PCGBlueprintElement.IterationLoopBody
// 0x01D0 (0x01D0 - 0x0000)
struct PCGBlueprintElement_IterationLoopBody final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         Iteration;                                         // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGSpatialData*                  InA;                                               // 0x00D8(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGSpatialData*                  InB;                                               // 0x00E0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              OutPoint;                                          // 0x00F0(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           OutMetadata;                                       // 0x01C0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintElement_IterationLoopBody) == 0x000010, "Wrong alignment on PCGBlueprintElement_IterationLoopBody");
static_assert(sizeof(PCGBlueprintElement_IterationLoopBody) == 0x0001D0, "Wrong size on PCGBlueprintElement_IterationLoopBody");
static_assert(offsetof(PCGBlueprintElement_IterationLoopBody, InContext) == 0x000000, "Member 'PCGBlueprintElement_IterationLoopBody::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoopBody, Iteration) == 0x0000D0, "Member 'PCGBlueprintElement_IterationLoopBody::Iteration' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoopBody, InA) == 0x0000D8, "Member 'PCGBlueprintElement_IterationLoopBody::InA' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoopBody, InB) == 0x0000E0, "Member 'PCGBlueprintElement_IterationLoopBody::InB' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoopBody, OutPoint) == 0x0000F0, "Member 'PCGBlueprintElement_IterationLoopBody::OutPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoopBody, OutMetadata) == 0x0001C0, "Member 'PCGBlueprintElement_IterationLoopBody::OutMetadata' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_IterationLoopBody, ReturnValue) == 0x0001C8, "Member 'PCGBlueprintElement_IterationLoopBody::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.NestedLoop
// 0x00F0 (0x00F0 - 0x0000)
struct PCGBlueprintElement_NestedLoop final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InOuterData;                                       // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InInnerData;                                       // 0x00D8(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OutData;                                           // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OptionalOutData;                                   // 0x00E8(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_NestedLoop) == 0x000008, "Wrong alignment on PCGBlueprintElement_NestedLoop");
static_assert(sizeof(PCGBlueprintElement_NestedLoop) == 0x0000F0, "Wrong size on PCGBlueprintElement_NestedLoop");
static_assert(offsetof(PCGBlueprintElement_NestedLoop, InContext) == 0x000000, "Member 'PCGBlueprintElement_NestedLoop::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoop, InOuterData) == 0x0000D0, "Member 'PCGBlueprintElement_NestedLoop::InOuterData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoop, InInnerData) == 0x0000D8, "Member 'PCGBlueprintElement_NestedLoop::InInnerData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoop, OutData) == 0x0000E0, "Member 'PCGBlueprintElement_NestedLoop::OutData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoop, OptionalOutData) == 0x0000E8, "Member 'PCGBlueprintElement_NestedLoop::OptionalOutData' has a wrong offset!");

// Function PCG.PCGBlueprintElement.NestedLoopBody
// 0x0370 (0x0370 - 0x0000)
struct PCGBlueprintElement_NestedLoopBody final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InOuterData;                                       // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InInnerData;                                       // 0x00D8(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGPoint                              InOuterPoint;                                      // 0x00E0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPCGPoint                              InInnerPoint;                                      // 0x01B0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPCGPoint                              OutPoint;                                          // 0x0280(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           OutMetadata;                                       // 0x0350(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OuterIteration;                                    // 0x0358(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         InnerIteration;                                    // 0x0360(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0368(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintElement_NestedLoopBody) == 0x000010, "Wrong alignment on PCGBlueprintElement_NestedLoopBody");
static_assert(sizeof(PCGBlueprintElement_NestedLoopBody) == 0x000370, "Wrong size on PCGBlueprintElement_NestedLoopBody");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, InContext) == 0x000000, "Member 'PCGBlueprintElement_NestedLoopBody::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, InOuterData) == 0x0000D0, "Member 'PCGBlueprintElement_NestedLoopBody::InOuterData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, InInnerData) == 0x0000D8, "Member 'PCGBlueprintElement_NestedLoopBody::InInnerData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, InOuterPoint) == 0x0000E0, "Member 'PCGBlueprintElement_NestedLoopBody::InOuterPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, InInnerPoint) == 0x0001B0, "Member 'PCGBlueprintElement_NestedLoopBody::InInnerPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, OutPoint) == 0x000280, "Member 'PCGBlueprintElement_NestedLoopBody::OutPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, OutMetadata) == 0x000350, "Member 'PCGBlueprintElement_NestedLoopBody::OutMetadata' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, OuterIteration) == 0x000358, "Member 'PCGBlueprintElement_NestedLoopBody::OuterIteration' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, InnerIteration) == 0x000360, "Member 'PCGBlueprintElement_NestedLoopBody::InnerIteration' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_NestedLoopBody, ReturnValue) == 0x000368, "Member 'PCGBlueprintElement_NestedLoopBody::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.NodeColorOverride
// 0x0010 (0x0010 - 0x0000)
struct PCGBlueprintElement_NodeColorOverride final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_NodeColorOverride) == 0x000004, "Wrong alignment on PCGBlueprintElement_NodeColorOverride");
static_assert(sizeof(PCGBlueprintElement_NodeColorOverride) == 0x000010, "Wrong size on PCGBlueprintElement_NodeColorOverride");
static_assert(offsetof(PCGBlueprintElement_NodeColorOverride, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_NodeColorOverride::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.NodeTitleOverride
// 0x0008 (0x0008 - 0x0000)
struct PCGBlueprintElement_NodeTitleOverride final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_NodeTitleOverride) == 0x000004, "Wrong alignment on PCGBlueprintElement_NodeTitleOverride");
static_assert(sizeof(PCGBlueprintElement_NodeTitleOverride) == 0x000008, "Wrong size on PCGBlueprintElement_NodeTitleOverride");
static_assert(offsetof(PCGBlueprintElement_NodeTitleOverride, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_NodeTitleOverride::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.NodeTypeOverride
// 0x0001 (0x0001 - 0x0000)
struct PCGBlueprintElement_NodeTypeOverride final
{
public:
	EPCGSettingsType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_NodeTypeOverride) == 0x000001, "Wrong alignment on PCGBlueprintElement_NodeTypeOverride");
static_assert(sizeof(PCGBlueprintElement_NodeTypeOverride) == 0x000001, "Wrong size on PCGBlueprintElement_NodeTypeOverride");
static_assert(offsetof(PCGBlueprintElement_NodeTypeOverride, ReturnValue) == 0x000000, "Member 'PCGBlueprintElement_NodeTypeOverride::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.PointLoop
// 0x00E8 (0x00E8 - 0x0000)
struct PCGBlueprintElement_PointLoop final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InData;                                            // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OutData;                                           // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OptionalOutData;                                   // 0x00E0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_PointLoop) == 0x000008, "Wrong alignment on PCGBlueprintElement_PointLoop");
static_assert(sizeof(PCGBlueprintElement_PointLoop) == 0x0000E8, "Wrong size on PCGBlueprintElement_PointLoop");
static_assert(offsetof(PCGBlueprintElement_PointLoop, InContext) == 0x000000, "Member 'PCGBlueprintElement_PointLoop::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoop, InData) == 0x0000D0, "Member 'PCGBlueprintElement_PointLoop::InData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoop, OutData) == 0x0000D8, "Member 'PCGBlueprintElement_PointLoop::OutData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoop, OptionalOutData) == 0x0000E0, "Member 'PCGBlueprintElement_PointLoop::OptionalOutData' has a wrong offset!");

// Function PCG.PCGBlueprintElement.PointLoopBody
// 0x02A0 (0x02A0 - 0x0000)
struct PCGBlueprintElement_PointLoopBody final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InData;                                            // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              InPoint;                                           // 0x00E0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPCGPoint                              OutPoint;                                          // 0x01B0(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           OutMetadata;                                       // 0x0280(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Iteration;                                         // 0x0288(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0290(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0xF];                                      // 0x0291(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintElement_PointLoopBody) == 0x000010, "Wrong alignment on PCGBlueprintElement_PointLoopBody");
static_assert(sizeof(PCGBlueprintElement_PointLoopBody) == 0x0002A0, "Wrong size on PCGBlueprintElement_PointLoopBody");
static_assert(offsetof(PCGBlueprintElement_PointLoopBody, InContext) == 0x000000, "Member 'PCGBlueprintElement_PointLoopBody::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoopBody, InData) == 0x0000D0, "Member 'PCGBlueprintElement_PointLoopBody::InData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoopBody, InPoint) == 0x0000E0, "Member 'PCGBlueprintElement_PointLoopBody::InPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoopBody, OutPoint) == 0x0001B0, "Member 'PCGBlueprintElement_PointLoopBody::OutPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoopBody, OutMetadata) == 0x000280, "Member 'PCGBlueprintElement_PointLoopBody::OutMetadata' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoopBody, Iteration) == 0x000288, "Member 'PCGBlueprintElement_PointLoopBody::Iteration' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_PointLoopBody, ReturnValue) == 0x000290, "Member 'PCGBlueprintElement_PointLoopBody::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintElement.VariableLoop
// 0x00E8 (0x00E8 - 0x0000)
struct PCGBlueprintElement_VariableLoop final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InData;                                            // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OutData;                                           // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OptionalOutData;                                   // 0x00E0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_VariableLoop) == 0x000008, "Wrong alignment on PCGBlueprintElement_VariableLoop");
static_assert(sizeof(PCGBlueprintElement_VariableLoop) == 0x0000E8, "Wrong size on PCGBlueprintElement_VariableLoop");
static_assert(offsetof(PCGBlueprintElement_VariableLoop, InContext) == 0x000000, "Member 'PCGBlueprintElement_VariableLoop::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_VariableLoop, InData) == 0x0000D0, "Member 'PCGBlueprintElement_VariableLoop::InData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_VariableLoop, OutData) == 0x0000D8, "Member 'PCGBlueprintElement_VariableLoop::OutData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_VariableLoop, OptionalOutData) == 0x0000E0, "Member 'PCGBlueprintElement_VariableLoop::OptionalOutData' has a wrong offset!");

// Function PCG.PCGBlueprintElement.VariableLoopBody
// 0x01D0 (0x01D0 - 0x0000)
struct PCGBlueprintElement_VariableLoopBody final
{
public:
	struct FPCGContext                            InContext;                                         // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InData;                                            // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              InPoint;                                           // 0x00E0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           OutMetadata;                                       // 0x01B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Iteration;                                         // 0x01B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGPoint>                      ReturnValue;                                       // 0x01C0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintElement_VariableLoopBody) == 0x000010, "Wrong alignment on PCGBlueprintElement_VariableLoopBody");
static_assert(sizeof(PCGBlueprintElement_VariableLoopBody) == 0x0001D0, "Wrong size on PCGBlueprintElement_VariableLoopBody");
static_assert(offsetof(PCGBlueprintElement_VariableLoopBody, InContext) == 0x000000, "Member 'PCGBlueprintElement_VariableLoopBody::InContext' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_VariableLoopBody, InData) == 0x0000D0, "Member 'PCGBlueprintElement_VariableLoopBody::InData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_VariableLoopBody, InPoint) == 0x0000E0, "Member 'PCGBlueprintElement_VariableLoopBody::InPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_VariableLoopBody, OutMetadata) == 0x0001B0, "Member 'PCGBlueprintElement_VariableLoopBody::OutMetadata' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_VariableLoopBody, Iteration) == 0x0001B8, "Member 'PCGBlueprintElement_VariableLoopBody::Iteration' has a wrong offset!");
static_assert(offsetof(PCGBlueprintElement_VariableLoopBody, ReturnValue) == 0x0001C0, "Member 'PCGBlueprintElement_VariableLoopBody::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintSettings.SetElementType
// 0x0010 (0x0010 - 0x0000)
struct PCGBlueprintSettings_SetElementType final
{
public:
	TSubclassOf<class UPCGBlueprintElement>       InElementType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGBlueprintElement*                   ElementInstance;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintSettings_SetElementType) == 0x000008, "Wrong alignment on PCGBlueprintSettings_SetElementType");
static_assert(sizeof(PCGBlueprintSettings_SetElementType) == 0x000010, "Wrong size on PCGBlueprintSettings_SetElementType");
static_assert(offsetof(PCGBlueprintSettings_SetElementType, InElementType) == 0x000000, "Member 'PCGBlueprintSettings_SetElementType::InElementType' has a wrong offset!");
static_assert(offsetof(PCGBlueprintSettings_SetElementType, ElementInstance) == 0x000008, "Member 'PCGBlueprintSettings_SetElementType::ElementInstance' has a wrong offset!");

// Function PCG.PCGBlueprintSettings.GetElementType
// 0x0008 (0x0008 - 0x0000)
struct PCGBlueprintSettings_GetElementType final
{
public:
	TSubclassOf<class UPCGBlueprintElement>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintSettings_GetElementType) == 0x000008, "Wrong alignment on PCGBlueprintSettings_GetElementType");
static_assert(sizeof(PCGBlueprintSettings_GetElementType) == 0x000008, "Wrong size on PCGBlueprintSettings_GetElementType");
static_assert(offsetof(PCGBlueprintSettings_GetElementType, ReturnValue) == 0x000000, "Member 'PCGBlueprintSettings_GetElementType::ReturnValue' has a wrong offset!");

// Function PCG.PCGPointMatchAndSetSettings.SetMatchAndSetType
// 0x0008 (0x0008 - 0x0000)
struct PCGPointMatchAndSetSettings_SetMatchAndSetType final
{
public:
	TSubclassOf<class UPCGMatchAndSetBase>        InMatchAndSetType;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPointMatchAndSetSettings_SetMatchAndSetType) == 0x000008, "Wrong alignment on PCGPointMatchAndSetSettings_SetMatchAndSetType");
static_assert(sizeof(PCGPointMatchAndSetSettings_SetMatchAndSetType) == 0x000008, "Wrong size on PCGPointMatchAndSetSettings_SetMatchAndSetType");
static_assert(offsetof(PCGPointMatchAndSetSettings_SetMatchAndSetType, InMatchAndSetType) == 0x000000, "Member 'PCGPointMatchAndSetSettings_SetMatchAndSetType::InMatchAndSetType' has a wrong offset!");

// Function PCG.PCGNode.AddEdgeTo
// 0x0020 (0x0020 - 0x0000)
struct PCGNode_AddEdgeTo final
{
public:
	class FName                                   FromPinLabel;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToPinLabel;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGNode_AddEdgeTo) == 0x000008, "Wrong alignment on PCGNode_AddEdgeTo");
static_assert(sizeof(PCGNode_AddEdgeTo) == 0x000020, "Wrong size on PCGNode_AddEdgeTo");
static_assert(offsetof(PCGNode_AddEdgeTo, FromPinLabel) == 0x000000, "Member 'PCGNode_AddEdgeTo::FromPinLabel' has a wrong offset!");
static_assert(offsetof(PCGNode_AddEdgeTo, To) == 0x000008, "Member 'PCGNode_AddEdgeTo::To' has a wrong offset!");
static_assert(offsetof(PCGNode_AddEdgeTo, ToPinLabel) == 0x000010, "Member 'PCGNode_AddEdgeTo::ToPinLabel' has a wrong offset!");
static_assert(offsetof(PCGNode_AddEdgeTo, ReturnValue) == 0x000018, "Member 'PCGNode_AddEdgeTo::ReturnValue' has a wrong offset!");

// Function PCG.PCGNode.RemoveEdgeTo
// 0x0020 (0x0020 - 0x0000)
struct PCGNode_RemoveEdgeTo final
{
public:
	class FName                                   FromPinLable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               To;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToPinLabel;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGNode_RemoveEdgeTo) == 0x000008, "Wrong alignment on PCGNode_RemoveEdgeTo");
static_assert(sizeof(PCGNode_RemoveEdgeTo) == 0x000020, "Wrong size on PCGNode_RemoveEdgeTo");
static_assert(offsetof(PCGNode_RemoveEdgeTo, FromPinLable) == 0x000000, "Member 'PCGNode_RemoveEdgeTo::FromPinLable' has a wrong offset!");
static_assert(offsetof(PCGNode_RemoveEdgeTo, To) == 0x000008, "Member 'PCGNode_RemoveEdgeTo::To' has a wrong offset!");
static_assert(offsetof(PCGNode_RemoveEdgeTo, ToPinLabel) == 0x000010, "Member 'PCGNode_RemoveEdgeTo::ToPinLabel' has a wrong offset!");
static_assert(offsetof(PCGNode_RemoveEdgeTo, ReturnValue) == 0x000018, "Member 'PCGNode_RemoveEdgeTo::ReturnValue' has a wrong offset!");

// Function PCG.PCGNode.GetGraph
// 0x0008 (0x0008 - 0x0000)
struct PCGNode_GetGraph final
{
public:
	class UPCGGraph*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGNode_GetGraph) == 0x000008, "Wrong alignment on PCGNode_GetGraph");
static_assert(sizeof(PCGNode_GetGraph) == 0x000008, "Wrong size on PCGNode_GetGraph");
static_assert(offsetof(PCGNode_GetGraph, ReturnValue) == 0x000000, "Member 'PCGNode_GetGraph::ReturnValue' has a wrong offset!");

// Function PCG.PCGNode.GetSettings
// 0x0008 (0x0008 - 0x0000)
struct PCGNode_GetSettings final
{
public:
	class UPCGSettings*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGNode_GetSettings) == 0x000008, "Wrong alignment on PCGNode_GetSettings");
static_assert(sizeof(PCGNode_GetSettings) == 0x000008, "Wrong size on PCGNode_GetSettings");
static_assert(offsetof(PCGNode_GetSettings, ReturnValue) == 0x000000, "Member 'PCGNode_GetSettings::ReturnValue' has a wrong offset!");

// Function PCG.PCGStaticMeshSpawnerSettings.SetInstancePackerType
// 0x0008 (0x0008 - 0x0000)
struct PCGStaticMeshSpawnerSettings_SetInstancePackerType final
{
public:
	TSubclassOf<class UPCGInstanceDataPackerBase> InInstancePackerType;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStaticMeshSpawnerSettings_SetInstancePackerType) == 0x000008, "Wrong alignment on PCGStaticMeshSpawnerSettings_SetInstancePackerType");
static_assert(sizeof(PCGStaticMeshSpawnerSettings_SetInstancePackerType) == 0x000008, "Wrong size on PCGStaticMeshSpawnerSettings_SetInstancePackerType");
static_assert(offsetof(PCGStaticMeshSpawnerSettings_SetInstancePackerType, InInstancePackerType) == 0x000000, "Member 'PCGStaticMeshSpawnerSettings_SetInstancePackerType::InInstancePackerType' has a wrong offset!");

// Function PCG.PCGStaticMeshSpawnerSettings.SetMeshSelectorType
// 0x0008 (0x0008 - 0x0000)
struct PCGStaticMeshSpawnerSettings_SetMeshSelectorType final
{
public:
	TSubclassOf<class UPCGMeshSelectorBase>       InMeshSelectorType;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGStaticMeshSpawnerSettings_SetMeshSelectorType) == 0x000008, "Wrong alignment on PCGStaticMeshSpawnerSettings_SetMeshSelectorType");
static_assert(sizeof(PCGStaticMeshSpawnerSettings_SetMeshSelectorType) == 0x000008, "Wrong size on PCGStaticMeshSpawnerSettings_SetMeshSelectorType");
static_assert(offsetof(PCGStaticMeshSpawnerSettings_SetMeshSelectorType, InMeshSelectorType) == 0x000000, "Member 'PCGStaticMeshSpawnerSettings_SetMeshSelectorType::InMeshSelectorType' has a wrong offset!");

// Function PCG.PCGPartitionActor.GetLocalComponent
// 0x0010 (0x0010 - 0x0000)
struct PCGPartitionActor_GetLocalComponent final
{
public:
	const class UPCGComponent*                    OriginalComponent;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGComponent*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPartitionActor_GetLocalComponent) == 0x000008, "Wrong alignment on PCGPartitionActor_GetLocalComponent");
static_assert(sizeof(PCGPartitionActor_GetLocalComponent) == 0x000010, "Wrong size on PCGPartitionActor_GetLocalComponent");
static_assert(offsetof(PCGPartitionActor_GetLocalComponent, OriginalComponent) == 0x000000, "Member 'PCGPartitionActor_GetLocalComponent::OriginalComponent' has a wrong offset!");
static_assert(offsetof(PCGPartitionActor_GetLocalComponent, ReturnValue) == 0x000008, "Member 'PCGPartitionActor_GetLocalComponent::ReturnValue' has a wrong offset!");

// Function PCG.PCGPartitionActor.GetOriginalComponent
// 0x0010 (0x0010 - 0x0000)
struct PCGPartitionActor_GetOriginalComponent final
{
public:
	const class UPCGComponent*                    LocalComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGComponent*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPartitionActor_GetOriginalComponent) == 0x000008, "Wrong alignment on PCGPartitionActor_GetOriginalComponent");
static_assert(sizeof(PCGPartitionActor_GetOriginalComponent) == 0x000010, "Wrong size on PCGPartitionActor_GetOriginalComponent");
static_assert(offsetof(PCGPartitionActor_GetOriginalComponent, LocalComponent) == 0x000000, "Member 'PCGPartitionActor_GetOriginalComponent::LocalComponent' has a wrong offset!");
static_assert(offsetof(PCGPartitionActor_GetOriginalComponent, ReturnValue) == 0x000008, "Member 'PCGPartitionActor_GetOriginalComponent::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.ComputeSeedFromPosition
// 0x0020 (0x0020 - 0x0000)
struct PCGBlueprintHelpers_ComputeSeedFromPosition final
{
public:
	struct FVector                                InPosition;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintHelpers_ComputeSeedFromPosition) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_ComputeSeedFromPosition");
static_assert(sizeof(PCGBlueprintHelpers_ComputeSeedFromPosition) == 0x000020, "Wrong size on PCGBlueprintHelpers_ComputeSeedFromPosition");
static_assert(offsetof(PCGBlueprintHelpers_ComputeSeedFromPosition, InPosition) == 0x000000, "Member 'PCGBlueprintHelpers_ComputeSeedFromPosition::InPosition' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_ComputeSeedFromPosition, ReturnValue) == 0x000018, "Member 'PCGBlueprintHelpers_ComputeSeedFromPosition::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.CreatePCGDataFromActor
// 0x0018 (0x0018 - 0x0000)
struct PCGBlueprintHelpers_CreatePCGDataFromActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParseActor;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGData*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_CreatePCGDataFromActor) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_CreatePCGDataFromActor");
static_assert(sizeof(PCGBlueprintHelpers_CreatePCGDataFromActor) == 0x000018, "Wrong size on PCGBlueprintHelpers_CreatePCGDataFromActor");
static_assert(offsetof(PCGBlueprintHelpers_CreatePCGDataFromActor, InActor) == 0x000000, "Member 'PCGBlueprintHelpers_CreatePCGDataFromActor::InActor' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_CreatePCGDataFromActor, bParseActor) == 0x000008, "Member 'PCGBlueprintHelpers_CreatePCGDataFromActor::bParseActor' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_CreatePCGDataFromActor, ReturnValue) == 0x000010, "Member 'PCGBlueprintHelpers_CreatePCGDataFromActor::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetActorBoundsPCG
// 0x0048 (0x0048 - 0x0000)
struct PCGBlueprintHelpers_GetActorBoundsPCG final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePCGCreatedComponents;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetActorBoundsPCG) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetActorBoundsPCG");
static_assert(sizeof(PCGBlueprintHelpers_GetActorBoundsPCG) == 0x000048, "Wrong size on PCGBlueprintHelpers_GetActorBoundsPCG");
static_assert(offsetof(PCGBlueprintHelpers_GetActorBoundsPCG, InActor) == 0x000000, "Member 'PCGBlueprintHelpers_GetActorBoundsPCG::InActor' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetActorBoundsPCG, bIgnorePCGCreatedComponents) == 0x000008, "Member 'PCGBlueprintHelpers_GetActorBoundsPCG::bIgnorePCGCreatedComponents' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetActorBoundsPCG, ReturnValue) == 0x000010, "Member 'PCGBlueprintHelpers_GetActorBoundsPCG::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetActorData
// 0x00D8 (0x00D8 - 0x0000)
struct PCGBlueprintHelpers_GetActorData final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UPCGData*                               ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetActorData) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetActorData");
static_assert(sizeof(PCGBlueprintHelpers_GetActorData) == 0x0000D8, "Wrong size on PCGBlueprintHelpers_GetActorData");
static_assert(offsetof(PCGBlueprintHelpers_GetActorData, Context) == 0x000000, "Member 'PCGBlueprintHelpers_GetActorData::Context' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetActorData, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetActorData::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetActorLocalBoundsPCG
// 0x0048 (0x0048 - 0x0000)
struct PCGBlueprintHelpers_GetActorLocalBoundsPCG final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePCGCreatedComponents;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox                                   ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetActorLocalBoundsPCG) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetActorLocalBoundsPCG");
static_assert(sizeof(PCGBlueprintHelpers_GetActorLocalBoundsPCG) == 0x000048, "Wrong size on PCGBlueprintHelpers_GetActorLocalBoundsPCG");
static_assert(offsetof(PCGBlueprintHelpers_GetActorLocalBoundsPCG, InActor) == 0x000000, "Member 'PCGBlueprintHelpers_GetActorLocalBoundsPCG::InActor' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetActorLocalBoundsPCG, bIgnorePCGCreatedComponents) == 0x000008, "Member 'PCGBlueprintHelpers_GetActorLocalBoundsPCG::bIgnorePCGCreatedComponents' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetActorLocalBoundsPCG, ReturnValue) == 0x000010, "Member 'PCGBlueprintHelpers_GetActorLocalBoundsPCG::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetComponent
// 0x00D8 (0x00D8 - 0x0000)
struct PCGBlueprintHelpers_GetComponent final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UPCGComponent*                          ReturnValue;                                       // 0x00D0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetComponent) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetComponent");
static_assert(sizeof(PCGBlueprintHelpers_GetComponent) == 0x0000D8, "Wrong size on PCGBlueprintHelpers_GetComponent");
static_assert(offsetof(PCGBlueprintHelpers_GetComponent, Context) == 0x000000, "Member 'PCGBlueprintHelpers_GetComponent::Context' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetComponent, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetComponent::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetExtents
// 0x00F0 (0x00F0 - 0x0000)
struct PCGBlueprintHelpers_GetExtents final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00D0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintHelpers_GetExtents) == 0x000010, "Wrong alignment on PCGBlueprintHelpers_GetExtents");
static_assert(sizeof(PCGBlueprintHelpers_GetExtents) == 0x0000F0, "Wrong size on PCGBlueprintHelpers_GetExtents");
static_assert(offsetof(PCGBlueprintHelpers_GetExtents, InPoint) == 0x000000, "Member 'PCGBlueprintHelpers_GetExtents::InPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetExtents, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetExtents::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetInputData
// 0x00D8 (0x00D8 - 0x0000)
struct PCGBlueprintHelpers_GetInputData final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UPCGData*                               ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetInputData) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetInputData");
static_assert(sizeof(PCGBlueprintHelpers_GetInputData) == 0x0000D8, "Wrong size on PCGBlueprintHelpers_GetInputData");
static_assert(offsetof(PCGBlueprintHelpers_GetInputData, Context) == 0x000000, "Member 'PCGBlueprintHelpers_GetInputData::Context' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetInputData, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetInputData::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetInterpolatedPCGLandscapeLayerWeights
// 0x0030 (0x0030 - 0x0000)
struct PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGLandscapeLayerWeight>       ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights");
static_assert(sizeof(PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights) == 0x000030, "Wrong size on PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights");
static_assert(offsetof(PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights, WorldContextObject) == 0x000000, "Member 'PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights, Location) == 0x000008, "Member 'PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights::Location' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights, ReturnValue) == 0x000020, "Member 'PCGBlueprintHelpers_GetInterpolatedPCGLandscapeLayerWeights::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetLocalCenter
// 0x00F0 (0x00F0 - 0x0000)
struct PCGBlueprintHelpers_GetLocalCenter final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00D0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintHelpers_GetLocalCenter) == 0x000010, "Wrong alignment on PCGBlueprintHelpers_GetLocalCenter");
static_assert(sizeof(PCGBlueprintHelpers_GetLocalCenter) == 0x0000F0, "Wrong size on PCGBlueprintHelpers_GetLocalCenter");
static_assert(offsetof(PCGBlueprintHelpers_GetLocalCenter, InPoint) == 0x000000, "Member 'PCGBlueprintHelpers_GetLocalCenter::InPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetLocalCenter, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetLocalCenter::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetOriginalComponent
// 0x00D8 (0x00D8 - 0x0000)
struct PCGBlueprintHelpers_GetOriginalComponent final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UPCGComponent*                          ReturnValue;                                       // 0x00D0(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetOriginalComponent) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetOriginalComponent");
static_assert(sizeof(PCGBlueprintHelpers_GetOriginalComponent) == 0x0000D8, "Wrong size on PCGBlueprintHelpers_GetOriginalComponent");
static_assert(offsetof(PCGBlueprintHelpers_GetOriginalComponent, Context) == 0x000000, "Member 'PCGBlueprintHelpers_GetOriginalComponent::Context' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetOriginalComponent, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetOriginalComponent::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetRandomStreamFromPoint
// 0x00F0 (0x00F0 - 0x0000)
struct PCGBlueprintHelpers_GetRandomStreamFromPoint final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGSettings*                     OptionalSettings;                                  // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGComponent*                    OptionalComponent;                                 // 0x00D8(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRandomStream                          ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintHelpers_GetRandomStreamFromPoint) == 0x000010, "Wrong alignment on PCGBlueprintHelpers_GetRandomStreamFromPoint");
static_assert(sizeof(PCGBlueprintHelpers_GetRandomStreamFromPoint) == 0x0000F0, "Wrong size on PCGBlueprintHelpers_GetRandomStreamFromPoint");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromPoint, InPoint) == 0x000000, "Member 'PCGBlueprintHelpers_GetRandomStreamFromPoint::InPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromPoint, OptionalSettings) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetRandomStreamFromPoint::OptionalSettings' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromPoint, OptionalComponent) == 0x0000D8, "Member 'PCGBlueprintHelpers_GetRandomStreamFromPoint::OptionalComponent' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromPoint, ReturnValue) == 0x0000E0, "Member 'PCGBlueprintHelpers_GetRandomStreamFromPoint::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetRandomStreamFromTwoPoints
// 0x01C0 (0x01C0 - 0x0000)
struct PCGBlueprintHelpers_GetRandomStreamFromTwoPoints final
{
public:
	struct FPCGPoint                              InPointA;                                          // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPCGPoint                              InPointB;                                          // 0x00D0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGSettings*                     OptionalSettings;                                  // 0x01A0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGComponent*                    OptionalComponent;                                 // 0x01A8(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRandomStream                          ReturnValue;                                       // 0x01B0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintHelpers_GetRandomStreamFromTwoPoints) == 0x000010, "Wrong alignment on PCGBlueprintHelpers_GetRandomStreamFromTwoPoints");
static_assert(sizeof(PCGBlueprintHelpers_GetRandomStreamFromTwoPoints) == 0x0001C0, "Wrong size on PCGBlueprintHelpers_GetRandomStreamFromTwoPoints");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromTwoPoints, InPointA) == 0x000000, "Member 'PCGBlueprintHelpers_GetRandomStreamFromTwoPoints::InPointA' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromTwoPoints, InPointB) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetRandomStreamFromTwoPoints::InPointB' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromTwoPoints, OptionalSettings) == 0x0001A0, "Member 'PCGBlueprintHelpers_GetRandomStreamFromTwoPoints::OptionalSettings' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromTwoPoints, OptionalComponent) == 0x0001A8, "Member 'PCGBlueprintHelpers_GetRandomStreamFromTwoPoints::OptionalComponent' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetRandomStreamFromTwoPoints, ReturnValue) == 0x0001B0, "Member 'PCGBlueprintHelpers_GetRandomStreamFromTwoPoints::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetSettings
// 0x00D8 (0x00D8 - 0x0000)
struct PCGBlueprintHelpers_GetSettings final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGSettings*                     ReturnValue;                                       // 0x00D0(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetSettings) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetSettings");
static_assert(sizeof(PCGBlueprintHelpers_GetSettings) == 0x0000D8, "Wrong size on PCGBlueprintHelpers_GetSettings");
static_assert(offsetof(PCGBlueprintHelpers_GetSettings, Context) == 0x000000, "Member 'PCGBlueprintHelpers_GetSettings::Context' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetSettings, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetSettings::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetTargetActor
// 0x00E0 (0x00E0 - 0x0000)
struct PCGBlueprintHelpers_GetTargetActor final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UPCGSpatialData*                        SpatialData;                                       // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x00D8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetTargetActor) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetTargetActor");
static_assert(sizeof(PCGBlueprintHelpers_GetTargetActor) == 0x0000E0, "Wrong size on PCGBlueprintHelpers_GetTargetActor");
static_assert(offsetof(PCGBlueprintHelpers_GetTargetActor, Context) == 0x000000, "Member 'PCGBlueprintHelpers_GetTargetActor::Context' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetTargetActor, SpatialData) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetTargetActor::SpatialData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetTargetActor, ReturnValue) == 0x0000D8, "Member 'PCGBlueprintHelpers_GetTargetActor::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetTaskId
// 0x00D8 (0x00D8 - 0x0000)
struct PCGBlueprintHelpers_GetTaskId final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x00D0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_GetTaskId) == 0x000008, "Wrong alignment on PCGBlueprintHelpers_GetTaskId");
static_assert(sizeof(PCGBlueprintHelpers_GetTaskId) == 0x0000D8, "Wrong size on PCGBlueprintHelpers_GetTaskId");
static_assert(offsetof(PCGBlueprintHelpers_GetTaskId, Context) == 0x000000, "Member 'PCGBlueprintHelpers_GetTaskId::Context' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetTaskId, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetTaskId::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.GetTransformedBounds
// 0x0110 (0x0110 - 0x0000)
struct PCGBlueprintHelpers_GetTransformedBounds final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x00D0(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintHelpers_GetTransformedBounds) == 0x000010, "Wrong alignment on PCGBlueprintHelpers_GetTransformedBounds");
static_assert(sizeof(PCGBlueprintHelpers_GetTransformedBounds) == 0x000110, "Wrong size on PCGBlueprintHelpers_GetTransformedBounds");
static_assert(offsetof(PCGBlueprintHelpers_GetTransformedBounds, InPoint) == 0x000000, "Member 'PCGBlueprintHelpers_GetTransformedBounds::InPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_GetTransformedBounds, ReturnValue) == 0x0000D0, "Member 'PCGBlueprintHelpers_GetTransformedBounds::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.SetExtents
// 0x00F0 (0x00F0 - 0x0000)
struct PCGBlueprintHelpers_SetExtents final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InExtents;                                         // 0x00D0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintHelpers_SetExtents) == 0x000010, "Wrong alignment on PCGBlueprintHelpers_SetExtents");
static_assert(sizeof(PCGBlueprintHelpers_SetExtents) == 0x0000F0, "Wrong size on PCGBlueprintHelpers_SetExtents");
static_assert(offsetof(PCGBlueprintHelpers_SetExtents, InPoint) == 0x000000, "Member 'PCGBlueprintHelpers_SetExtents::InPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_SetExtents, InExtents) == 0x0000D0, "Member 'PCGBlueprintHelpers_SetExtents::InExtents' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.SetLocalCenter
// 0x00F0 (0x00F0 - 0x0000)
struct PCGBlueprintHelpers_SetLocalCenter final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InLocalCenter;                                     // 0x00D0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGBlueprintHelpers_SetLocalCenter) == 0x000010, "Wrong alignment on PCGBlueprintHelpers_SetLocalCenter");
static_assert(sizeof(PCGBlueprintHelpers_SetLocalCenter) == 0x0000F0, "Wrong size on PCGBlueprintHelpers_SetLocalCenter");
static_assert(offsetof(PCGBlueprintHelpers_SetLocalCenter, InPoint) == 0x000000, "Member 'PCGBlueprintHelpers_SetLocalCenter::InPoint' has a wrong offset!");
static_assert(offsetof(PCGBlueprintHelpers_SetLocalCenter, InLocalCenter) == 0x0000D0, "Member 'PCGBlueprintHelpers_SetLocalCenter::InLocalCenter' has a wrong offset!");

// Function PCG.PCGBlueprintHelpers.SetSeedFromPosition
// 0x00D0 (0x00D0 - 0x0000)
struct PCGBlueprintHelpers_SetSeedFromPosition final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintHelpers_SetSeedFromPosition) == 0x000010, "Wrong alignment on PCGBlueprintHelpers_SetSeedFromPosition");
static_assert(sizeof(PCGBlueprintHelpers_SetSeedFromPosition) == 0x0000D0, "Wrong size on PCGBlueprintHelpers_SetSeedFromPosition");
static_assert(offsetof(PCGBlueprintHelpers_SetSeedFromPosition, InPoint) == 0x000000, "Member 'PCGBlueprintHelpers_SetSeedFromPosition::InPoint' has a wrong offset!");

// Function PCG.PCGInstanceDataPackerBase.AddTypeToPacking
// 0x0028 (0x0028 - 0x0000)
struct PCGInstanceDataPackerBase_AddTypeToPacking final
{
public:
	int32                                         TypeId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPackedCustomData                   OutPackedCustomData;                               // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGInstanceDataPackerBase_AddTypeToPacking) == 0x000008, "Wrong alignment on PCGInstanceDataPackerBase_AddTypeToPacking");
static_assert(sizeof(PCGInstanceDataPackerBase_AddTypeToPacking) == 0x000028, "Wrong size on PCGInstanceDataPackerBase_AddTypeToPacking");
static_assert(offsetof(PCGInstanceDataPackerBase_AddTypeToPacking, TypeId) == 0x000000, "Member 'PCGInstanceDataPackerBase_AddTypeToPacking::TypeId' has a wrong offset!");
static_assert(offsetof(PCGInstanceDataPackerBase_AddTypeToPacking, OutPackedCustomData) == 0x000008, "Member 'PCGInstanceDataPackerBase_AddTypeToPacking::OutPackedCustomData' has a wrong offset!");
static_assert(offsetof(PCGInstanceDataPackerBase_AddTypeToPacking, ReturnValue) == 0x000020, "Member 'PCGInstanceDataPackerBase_AddTypeToPacking::ReturnValue' has a wrong offset!");

// Function PCG.PCGInstanceDataPackerBase.PackCustomDataFromAttributes
// 0x02B0 (0x02B0 - 0x0000)
struct PCGInstanceDataPackerBase_PackCustomDataFromAttributes final
{
public:
	struct FPCGMeshInstanceList                   InstanceList;                                      // 0x0000(0x0280)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0280(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           AttributeNames;                                    // 0x0288(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPCGPackedCustomData                   OutPackedCustomData;                               // 0x0298(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGInstanceDataPackerBase_PackCustomDataFromAttributes) == 0x000008, "Wrong alignment on PCGInstanceDataPackerBase_PackCustomDataFromAttributes");
static_assert(sizeof(PCGInstanceDataPackerBase_PackCustomDataFromAttributes) == 0x0002B0, "Wrong size on PCGInstanceDataPackerBase_PackCustomDataFromAttributes");
static_assert(offsetof(PCGInstanceDataPackerBase_PackCustomDataFromAttributes, InstanceList) == 0x000000, "Member 'PCGInstanceDataPackerBase_PackCustomDataFromAttributes::InstanceList' has a wrong offset!");
static_assert(offsetof(PCGInstanceDataPackerBase_PackCustomDataFromAttributes, MetaData) == 0x000280, "Member 'PCGInstanceDataPackerBase_PackCustomDataFromAttributes::MetaData' has a wrong offset!");
static_assert(offsetof(PCGInstanceDataPackerBase_PackCustomDataFromAttributes, AttributeNames) == 0x000288, "Member 'PCGInstanceDataPackerBase_PackCustomDataFromAttributes::AttributeNames' has a wrong offset!");
static_assert(offsetof(PCGInstanceDataPackerBase_PackCustomDataFromAttributes, OutPackedCustomData) == 0x000298, "Member 'PCGInstanceDataPackerBase_PackCustomDataFromAttributes::OutPackedCustomData' has a wrong offset!");

// Function PCG.PCGInstanceDataPackerBase.PackInstances
// 0x0370 (0x0370 - 0x0000)
struct PCGInstanceDataPackerBase_PackInstances final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, NativeAccessSpecifierPublic)
	const class UPCGSpatialData*                  InSpatialData;                                     // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGMeshInstanceList                   InstanceList;                                      // 0x00D8(0x0280)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPCGPackedCustomData                   OutPackedCustomData;                               // 0x0358(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGInstanceDataPackerBase_PackInstances) == 0x000008, "Wrong alignment on PCGInstanceDataPackerBase_PackInstances");
static_assert(sizeof(PCGInstanceDataPackerBase_PackInstances) == 0x000370, "Wrong size on PCGInstanceDataPackerBase_PackInstances");
static_assert(offsetof(PCGInstanceDataPackerBase_PackInstances, Context) == 0x000000, "Member 'PCGInstanceDataPackerBase_PackInstances::Context' has a wrong offset!");
static_assert(offsetof(PCGInstanceDataPackerBase_PackInstances, InSpatialData) == 0x0000D0, "Member 'PCGInstanceDataPackerBase_PackInstances::InSpatialData' has a wrong offset!");
static_assert(offsetof(PCGInstanceDataPackerBase_PackInstances, InstanceList) == 0x0000D8, "Member 'PCGInstanceDataPackerBase_PackInstances::InstanceList' has a wrong offset!");
static_assert(offsetof(PCGInstanceDataPackerBase_PackInstances, OutPackedCustomData) == 0x000358, "Member 'PCGInstanceDataPackerBase_PackInstances::OutPackedCustomData' has a wrong offset!");

// Function PCG.PCGMatchAndSetBase.MatchAndSet
// 0x00E8 (0x00E8 - 0x0000)
struct PCGMatchAndSetBase_MatchAndSet final
{
public:
	struct FPCGContext                            Context;                                           // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGPointMatchAndSetSettings*     InSettings;                                        // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGPointData*                    InPointData;                                       // 0x00D8(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGPointData*                          OutPointData;                                      // 0x00E0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMatchAndSetBase_MatchAndSet) == 0x000008, "Wrong alignment on PCGMatchAndSetBase_MatchAndSet");
static_assert(sizeof(PCGMatchAndSetBase_MatchAndSet) == 0x0000E8, "Wrong size on PCGMatchAndSetBase_MatchAndSet");
static_assert(offsetof(PCGMatchAndSetBase_MatchAndSet, Context) == 0x000000, "Member 'PCGMatchAndSetBase_MatchAndSet::Context' has a wrong offset!");
static_assert(offsetof(PCGMatchAndSetBase_MatchAndSet, InSettings) == 0x0000D0, "Member 'PCGMatchAndSetBase_MatchAndSet::InSettings' has a wrong offset!");
static_assert(offsetof(PCGMatchAndSetBase_MatchAndSet, InPointData) == 0x0000D8, "Member 'PCGMatchAndSetBase_MatchAndSet::InPointData' has a wrong offset!");
static_assert(offsetof(PCGMatchAndSetBase_MatchAndSet, OutPointData) == 0x0000E0, "Member 'PCGMatchAndSetBase_MatchAndSet::OutPointData' has a wrong offset!");

// Function PCG.PCGMatchAndSetBase.ValidatePreconditions
// 0x0010 (0x0010 - 0x0000)
struct PCGMatchAndSetBase_ValidatePreconditions final
{
public:
	const class UPCGPointData*                    InPointData;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMatchAndSetBase_ValidatePreconditions) == 0x000008, "Wrong alignment on PCGMatchAndSetBase_ValidatePreconditions");
static_assert(sizeof(PCGMatchAndSetBase_ValidatePreconditions) == 0x000010, "Wrong size on PCGMatchAndSetBase_ValidatePreconditions");
static_assert(offsetof(PCGMatchAndSetBase_ValidatePreconditions, InPointData) == 0x000000, "Member 'PCGMatchAndSetBase_ValidatePreconditions::InPointData' has a wrong offset!");
static_assert(offsetof(PCGMatchAndSetBase_ValidatePreconditions, ReturnValue) == 0x000008, "Member 'PCGMatchAndSetBase_ValidatePreconditions::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.AccumulatePointWeightedAttributes
// 0x01B0 (0x01B0 - 0x0000)
struct PCGMetadata_AccumulatePointWeightedAttributes final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     InMetaData;                                        // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x00D8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetNonInterpolableAttributes;                     // 0x00DC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              OutPoint;                                          // 0x00E0(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_AccumulatePointWeightedAttributes) == 0x000010, "Wrong alignment on PCGMetadata_AccumulatePointWeightedAttributes");
static_assert(sizeof(PCGMetadata_AccumulatePointWeightedAttributes) == 0x0001B0, "Wrong size on PCGMetadata_AccumulatePointWeightedAttributes");
static_assert(offsetof(PCGMetadata_AccumulatePointWeightedAttributes, InPoint) == 0x000000, "Member 'PCGMetadata_AccumulatePointWeightedAttributes::InPoint' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulatePointWeightedAttributes, InMetaData) == 0x0000D0, "Member 'PCGMetadata_AccumulatePointWeightedAttributes::InMetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulatePointWeightedAttributes, Weight) == 0x0000D8, "Member 'PCGMetadata_AccumulatePointWeightedAttributes::Weight' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulatePointWeightedAttributes, bSetNonInterpolableAttributes) == 0x0000DC, "Member 'PCGMetadata_AccumulatePointWeightedAttributes::bSetNonInterpolableAttributes' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulatePointWeightedAttributes, OutPoint) == 0x0000E0, "Member 'PCGMetadata_AccumulatePointWeightedAttributes::OutPoint' has a wrong offset!");

// Function PCG.PCGMetadata.AccumulateWeightedAttributesByKey
// 0x0028 (0x0028 - 0x0000)
struct PCGMetadata_AccumulateWeightedAttributesByKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetNonInterpolableAttributes;                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         TargetKey;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutKey;                                            // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_AccumulateWeightedAttributesByKey) == 0x000008, "Wrong alignment on PCGMetadata_AccumulateWeightedAttributesByKey");
static_assert(sizeof(PCGMetadata_AccumulateWeightedAttributesByKey) == 0x000028, "Wrong size on PCGMetadata_AccumulateWeightedAttributesByKey");
static_assert(offsetof(PCGMetadata_AccumulateWeightedAttributesByKey, Key) == 0x000000, "Member 'PCGMetadata_AccumulateWeightedAttributesByKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulateWeightedAttributesByKey, MetaData) == 0x000008, "Member 'PCGMetadata_AccumulateWeightedAttributesByKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulateWeightedAttributesByKey, Weight) == 0x000010, "Member 'PCGMetadata_AccumulateWeightedAttributesByKey::Weight' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulateWeightedAttributesByKey, bSetNonInterpolableAttributes) == 0x000014, "Member 'PCGMetadata_AccumulateWeightedAttributesByKey::bSetNonInterpolableAttributes' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulateWeightedAttributesByKey, TargetKey) == 0x000018, "Member 'PCGMetadata_AccumulateWeightedAttributesByKey::TargetKey' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AccumulateWeightedAttributesByKey, OutKey) == 0x000020, "Member 'PCGMetadata_AccumulateWeightedAttributesByKey::OutKey' has a wrong offset!");

// Function PCG.PCGMetadata.AddAttribute
// 0x0010 (0x0010 - 0x0000)
struct PCGMetadata_AddAttribute final
{
public:
	const class UPCGMetadata*                     InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_AddAttribute) == 0x000008, "Wrong alignment on PCGMetadata_AddAttribute");
static_assert(sizeof(PCGMetadata_AddAttribute) == 0x000010, "Wrong size on PCGMetadata_AddAttribute");
static_assert(offsetof(PCGMetadata_AddAttribute, InOther) == 0x000000, "Member 'PCGMetadata_AddAttribute::InOther' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AddAttribute, AttributeName) == 0x000008, "Member 'PCGMetadata_AddAttribute::AttributeName' has a wrong offset!");

// Function PCG.PCGMetadata.AddAttributes
// 0x0008 (0x0008 - 0x0000)
struct PCGMetadata_AddAttributes final
{
public:
	const class UPCGMetadata*                     InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_AddAttributes) == 0x000008, "Wrong alignment on PCGMetadata_AddAttributes");
static_assert(sizeof(PCGMetadata_AddAttributes) == 0x000008, "Wrong size on PCGMetadata_AddAttributes");
static_assert(offsetof(PCGMetadata_AddAttributes, InOther) == 0x000000, "Member 'PCGMetadata_AddAttributes::InOther' has a wrong offset!");

// Function PCG.PCGMetadata.AddAttributesFiltered
// 0x0060 (0x0060 - 0x0000)
struct PCGMetadata_AddAttributesFiltered final
{
public:
	const class UPCGMetadata*                     InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FName>                             InFilteredAttributes;                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPCGMetadataFilterMode                        InFilterMode;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadata_AddAttributesFiltered) == 0x000008, "Wrong alignment on PCGMetadata_AddAttributesFiltered");
static_assert(sizeof(PCGMetadata_AddAttributesFiltered) == 0x000060, "Wrong size on PCGMetadata_AddAttributesFiltered");
static_assert(offsetof(PCGMetadata_AddAttributesFiltered, InOther) == 0x000000, "Member 'PCGMetadata_AddAttributesFiltered::InOther' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AddAttributesFiltered, InFilteredAttributes) == 0x000008, "Member 'PCGMetadata_AddAttributesFiltered::InFilteredAttributes' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AddAttributesFiltered, InFilterMode) == 0x000058, "Member 'PCGMetadata_AddAttributesFiltered::InFilterMode' has a wrong offset!");

// Function PCG.PCGMetadata.AddEntry
// 0x0010 (0x0010 - 0x0000)
struct PCGMetadata_AddEntry final
{
public:
	int64                                         ParentEntryKey;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_AddEntry) == 0x000008, "Wrong alignment on PCGMetadata_AddEntry");
static_assert(sizeof(PCGMetadata_AddEntry) == 0x000010, "Wrong size on PCGMetadata_AddEntry");
static_assert(offsetof(PCGMetadata_AddEntry, ParentEntryKey) == 0x000000, "Member 'PCGMetadata_AddEntry::ParentEntryKey' has a wrong offset!");
static_assert(offsetof(PCGMetadata_AddEntry, ReturnValue) == 0x000008, "Member 'PCGMetadata_AddEntry::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.ClearAttribute
// 0x0008 (0x0008 - 0x0000)
struct PCGMetadata_ClearAttribute final
{
public:
	class FName                                   AttributeToClear;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_ClearAttribute) == 0x000004, "Wrong alignment on PCGMetadata_ClearAttribute");
static_assert(sizeof(PCGMetadata_ClearAttribute) == 0x000008, "Wrong size on PCGMetadata_ClearAttribute");
static_assert(offsetof(PCGMetadata_ClearAttribute, AttributeToClear) == 0x000000, "Member 'PCGMetadata_ClearAttribute::AttributeToClear' has a wrong offset!");

// Function PCG.PCGMetadata.CopyAttribute
// 0x0018 (0x0018 - 0x0000)
struct PCGMetadata_CopyAttribute final
{
public:
	const class UPCGMetadata*                     InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeToCopy;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewAttributeName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CopyAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CopyAttribute");
static_assert(sizeof(PCGMetadata_CopyAttribute) == 0x000018, "Wrong size on PCGMetadata_CopyAttribute");
static_assert(offsetof(PCGMetadata_CopyAttribute, InOther) == 0x000000, "Member 'PCGMetadata_CopyAttribute::InOther' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CopyAttribute, AttributeToCopy) == 0x000008, "Member 'PCGMetadata_CopyAttribute::AttributeToCopy' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CopyAttribute, NewAttributeName) == 0x000010, "Member 'PCGMetadata_CopyAttribute::NewAttributeName' has a wrong offset!");

// Function PCG.PCGMetadata.CopyAttributes
// 0x0008 (0x0008 - 0x0000)
struct PCGMetadata_CopyAttributes final
{
public:
	const class UPCGMetadata*                     InOther;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CopyAttributes) == 0x000008, "Wrong alignment on PCGMetadata_CopyAttributes");
static_assert(sizeof(PCGMetadata_CopyAttributes) == 0x000008, "Wrong size on PCGMetadata_CopyAttributes");
static_assert(offsetof(PCGMetadata_CopyAttributes, InOther) == 0x000000, "Member 'PCGMetadata_CopyAttributes::InOther' has a wrong offset!");

// Function PCG.PCGMetadata.CopyExistingAttribute
// 0x0014 (0x0014 - 0x0000)
struct PCGMetadata_CopyExistingAttribute final
{
public:
	class FName                                   AttributeToCopy;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewAttributeName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepParent;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadata_CopyExistingAttribute) == 0x000004, "Wrong alignment on PCGMetadata_CopyExistingAttribute");
static_assert(sizeof(PCGMetadata_CopyExistingAttribute) == 0x000014, "Wrong size on PCGMetadata_CopyExistingAttribute");
static_assert(offsetof(PCGMetadata_CopyExistingAttribute, AttributeToCopy) == 0x000000, "Member 'PCGMetadata_CopyExistingAttribute::AttributeToCopy' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CopyExistingAttribute, NewAttributeName) == 0x000008, "Member 'PCGMetadata_CopyExistingAttribute::NewAttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CopyExistingAttribute, bKeepParent) == 0x000010, "Member 'PCGMetadata_CopyExistingAttribute::bKeepParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CopyExistingAttribute, ReturnValue) == 0x000011, "Member 'PCGMetadata_CopyExistingAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateBoolAttribute
// 0x0018 (0x0018 - 0x0000)
struct PCGMetadata_CreateBoolAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultValue;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateBoolAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateBoolAttribute");
static_assert(sizeof(PCGMetadata_CreateBoolAttribute) == 0x000018, "Wrong size on PCGMetadata_CreateBoolAttribute");
static_assert(offsetof(PCGMetadata_CreateBoolAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateBoolAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateBoolAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateBoolAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateBoolAttribute, bAllowsInterpolation) == 0x000009, "Member 'PCGMetadata_CreateBoolAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateBoolAttribute, bOverrideParent) == 0x00000A, "Member 'PCGMetadata_CreateBoolAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateBoolAttribute, ReturnValue) == 0x000010, "Member 'PCGMetadata_CreateBoolAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateDoubleAttribute
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadata_CreateDoubleAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        DefaultValue;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateDoubleAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateDoubleAttribute");
static_assert(sizeof(PCGMetadata_CreateDoubleAttribute) == 0x000020, "Wrong size on PCGMetadata_CreateDoubleAttribute");
static_assert(offsetof(PCGMetadata_CreateDoubleAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateDoubleAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateDoubleAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateDoubleAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateDoubleAttribute, bAllowsInterpolation) == 0x000010, "Member 'PCGMetadata_CreateDoubleAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateDoubleAttribute, bOverrideParent) == 0x000011, "Member 'PCGMetadata_CreateDoubleAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateDoubleAttribute, ReturnValue) == 0x000018, "Member 'PCGMetadata_CreateDoubleAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateFloatAttribute
// 0x0018 (0x0018 - 0x0000)
struct PCGMetadata_CreateFloatAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateFloatAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateFloatAttribute");
static_assert(sizeof(PCGMetadata_CreateFloatAttribute) == 0x000018, "Wrong size on PCGMetadata_CreateFloatAttribute");
static_assert(offsetof(PCGMetadata_CreateFloatAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateFloatAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateFloatAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateFloatAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateFloatAttribute, bAllowsInterpolation) == 0x00000C, "Member 'PCGMetadata_CreateFloatAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateFloatAttribute, bOverrideParent) == 0x00000D, "Member 'PCGMetadata_CreateFloatAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateFloatAttribute, ReturnValue) == 0x000010, "Member 'PCGMetadata_CreateFloatAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateInteger32Attribute
// 0x0018 (0x0018 - 0x0000)
struct PCGMetadata_CreateInteger32Attribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateInteger32Attribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateInteger32Attribute");
static_assert(sizeof(PCGMetadata_CreateInteger32Attribute) == 0x000018, "Wrong size on PCGMetadata_CreateInteger32Attribute");
static_assert(offsetof(PCGMetadata_CreateInteger32Attribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateInteger32Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateInteger32Attribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateInteger32Attribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateInteger32Attribute, bAllowsInterpolation) == 0x00000C, "Member 'PCGMetadata_CreateInteger32Attribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateInteger32Attribute, bOverrideParent) == 0x00000D, "Member 'PCGMetadata_CreateInteger32Attribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateInteger32Attribute, ReturnValue) == 0x000010, "Member 'PCGMetadata_CreateInteger32Attribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateInteger64Attribute
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadata_CreateInteger64Attribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DefaultValue;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateInteger64Attribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateInteger64Attribute");
static_assert(sizeof(PCGMetadata_CreateInteger64Attribute) == 0x000020, "Wrong size on PCGMetadata_CreateInteger64Attribute");
static_assert(offsetof(PCGMetadata_CreateInteger64Attribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateInteger64Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateInteger64Attribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateInteger64Attribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateInteger64Attribute, bAllowsInterpolation) == 0x000010, "Member 'PCGMetadata_CreateInteger64Attribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateInteger64Attribute, bOverrideParent) == 0x000011, "Member 'PCGMetadata_CreateInteger64Attribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateInteger64Attribute, ReturnValue) == 0x000018, "Member 'PCGMetadata_CreateInteger64Attribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateNameAttribute
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadata_CreateNameAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DefaultValue;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateNameAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateNameAttribute");
static_assert(sizeof(PCGMetadata_CreateNameAttribute) == 0x000020, "Wrong size on PCGMetadata_CreateNameAttribute");
static_assert(offsetof(PCGMetadata_CreateNameAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateNameAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateNameAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateNameAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateNameAttribute, bAllowsInterpolation) == 0x000010, "Member 'PCGMetadata_CreateNameAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateNameAttribute, bOverrideParent) == 0x000011, "Member 'PCGMetadata_CreateNameAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateNameAttribute, ReturnValue) == 0x000018, "Member 'PCGMetadata_CreateNameAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateQuatAttribute
// 0x0040 (0x0040 - 0x0000)
struct PCGMetadata_CreateQuatAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  DefaultValue;                                      // 0x0010(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateQuatAttribute) == 0x000010, "Wrong alignment on PCGMetadata_CreateQuatAttribute");
static_assert(sizeof(PCGMetadata_CreateQuatAttribute) == 0x000040, "Wrong size on PCGMetadata_CreateQuatAttribute");
static_assert(offsetof(PCGMetadata_CreateQuatAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateQuatAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateQuatAttribute, DefaultValue) == 0x000010, "Member 'PCGMetadata_CreateQuatAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateQuatAttribute, bAllowsInterpolation) == 0x000030, "Member 'PCGMetadata_CreateQuatAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateQuatAttribute, bOverrideParent) == 0x000031, "Member 'PCGMetadata_CreateQuatAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateQuatAttribute, ReturnValue) == 0x000038, "Member 'PCGMetadata_CreateQuatAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateRotatorAttribute
// 0x0030 (0x0030 - 0x0000)
struct PCGMetadata_CreateRotatorAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DefaultValue;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateRotatorAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateRotatorAttribute");
static_assert(sizeof(PCGMetadata_CreateRotatorAttribute) == 0x000030, "Wrong size on PCGMetadata_CreateRotatorAttribute");
static_assert(offsetof(PCGMetadata_CreateRotatorAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateRotatorAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateRotatorAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateRotatorAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateRotatorAttribute, bAllowsInterpolation) == 0x000020, "Member 'PCGMetadata_CreateRotatorAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateRotatorAttribute, bOverrideParent) == 0x000021, "Member 'PCGMetadata_CreateRotatorAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateRotatorAttribute, ReturnValue) == 0x000028, "Member 'PCGMetadata_CreateRotatorAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateSoftClassPathAttribute
// 0x0038 (0x0038 - 0x0000)
struct PCGMetadata_CreateSoftClassPathAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         DefaultValue;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateSoftClassPathAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateSoftClassPathAttribute");
static_assert(sizeof(PCGMetadata_CreateSoftClassPathAttribute) == 0x000038, "Wrong size on PCGMetadata_CreateSoftClassPathAttribute");
static_assert(offsetof(PCGMetadata_CreateSoftClassPathAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateSoftClassPathAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateSoftClassPathAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateSoftClassPathAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateSoftClassPathAttribute, bAllowsInterpolation) == 0x000028, "Member 'PCGMetadata_CreateSoftClassPathAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateSoftClassPathAttribute, bOverrideParent) == 0x000029, "Member 'PCGMetadata_CreateSoftClassPathAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateSoftClassPathAttribute, ReturnValue) == 0x000030, "Member 'PCGMetadata_CreateSoftClassPathAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateSoftObjectPathAttribute
// 0x0038 (0x0038 - 0x0000)
struct PCGMetadata_CreateSoftObjectPathAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        DefaultValue;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateSoftObjectPathAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateSoftObjectPathAttribute");
static_assert(sizeof(PCGMetadata_CreateSoftObjectPathAttribute) == 0x000038, "Wrong size on PCGMetadata_CreateSoftObjectPathAttribute");
static_assert(offsetof(PCGMetadata_CreateSoftObjectPathAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateSoftObjectPathAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateSoftObjectPathAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateSoftObjectPathAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateSoftObjectPathAttribute, bAllowsInterpolation) == 0x000028, "Member 'PCGMetadata_CreateSoftObjectPathAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateSoftObjectPathAttribute, bOverrideParent) == 0x000029, "Member 'PCGMetadata_CreateSoftObjectPathAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateSoftObjectPathAttribute, ReturnValue) == 0x000030, "Member 'PCGMetadata_CreateSoftObjectPathAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateStringAttribute
// 0x0028 (0x0028 - 0x0000)
struct PCGMetadata_CreateStringAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateStringAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateStringAttribute");
static_assert(sizeof(PCGMetadata_CreateStringAttribute) == 0x000028, "Wrong size on PCGMetadata_CreateStringAttribute");
static_assert(offsetof(PCGMetadata_CreateStringAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateStringAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateStringAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateStringAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateStringAttribute, bAllowsInterpolation) == 0x000018, "Member 'PCGMetadata_CreateStringAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateStringAttribute, bOverrideParent) == 0x000019, "Member 'PCGMetadata_CreateStringAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateStringAttribute, ReturnValue) == 0x000020, "Member 'PCGMetadata_CreateStringAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateTransformAttribute
// 0x0080 (0x0080 - 0x0000)
struct PCGMetadata_CreateTransformAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             DefaultValue;                                      // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0071(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateTransformAttribute) == 0x000010, "Wrong alignment on PCGMetadata_CreateTransformAttribute");
static_assert(sizeof(PCGMetadata_CreateTransformAttribute) == 0x000080, "Wrong size on PCGMetadata_CreateTransformAttribute");
static_assert(offsetof(PCGMetadata_CreateTransformAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateTransformAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateTransformAttribute, DefaultValue) == 0x000010, "Member 'PCGMetadata_CreateTransformAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateTransformAttribute, bAllowsInterpolation) == 0x000070, "Member 'PCGMetadata_CreateTransformAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateTransformAttribute, bOverrideParent) == 0x000071, "Member 'PCGMetadata_CreateTransformAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateTransformAttribute, ReturnValue) == 0x000078, "Member 'PCGMetadata_CreateTransformAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateVector2Attribute
// 0x0028 (0x0028 - 0x0000)
struct PCGMetadata_CreateVector2Attribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DefaultValue;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateVector2Attribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateVector2Attribute");
static_assert(sizeof(PCGMetadata_CreateVector2Attribute) == 0x000028, "Wrong size on PCGMetadata_CreateVector2Attribute");
static_assert(offsetof(PCGMetadata_CreateVector2Attribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateVector2Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVector2Attribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateVector2Attribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVector2Attribute, bAllowsInterpolation) == 0x000018, "Member 'PCGMetadata_CreateVector2Attribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVector2Attribute, bOverrideParent) == 0x000019, "Member 'PCGMetadata_CreateVector2Attribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVector2Attribute, ReturnValue) == 0x000020, "Member 'PCGMetadata_CreateVector2Attribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateVector4Attribute
// 0x0040 (0x0040 - 0x0000)
struct PCGMetadata_CreateVector4Attribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               DefaultValue;                                      // 0x0010(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateVector4Attribute) == 0x000010, "Wrong alignment on PCGMetadata_CreateVector4Attribute");
static_assert(sizeof(PCGMetadata_CreateVector4Attribute) == 0x000040, "Wrong size on PCGMetadata_CreateVector4Attribute");
static_assert(offsetof(PCGMetadata_CreateVector4Attribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateVector4Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVector4Attribute, DefaultValue) == 0x000010, "Member 'PCGMetadata_CreateVector4Attribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVector4Attribute, bAllowsInterpolation) == 0x000030, "Member 'PCGMetadata_CreateVector4Attribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVector4Attribute, bOverrideParent) == 0x000031, "Member 'PCGMetadata_CreateVector4Attribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVector4Attribute, ReturnValue) == 0x000038, "Member 'PCGMetadata_CreateVector4Attribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.CreateVectorAttribute
// 0x0030 (0x0030 - 0x0000)
struct PCGMetadata_CreateVectorAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DefaultValue;                                      // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsInterpolation;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideParent;                                   // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPCGMetadata*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_CreateVectorAttribute) == 0x000008, "Wrong alignment on PCGMetadata_CreateVectorAttribute");
static_assert(sizeof(PCGMetadata_CreateVectorAttribute) == 0x000030, "Wrong size on PCGMetadata_CreateVectorAttribute");
static_assert(offsetof(PCGMetadata_CreateVectorAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_CreateVectorAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVectorAttribute, DefaultValue) == 0x000008, "Member 'PCGMetadata_CreateVectorAttribute::DefaultValue' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVectorAttribute, bAllowsInterpolation) == 0x000020, "Member 'PCGMetadata_CreateVectorAttribute::bAllowsInterpolation' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVectorAttribute, bOverrideParent) == 0x000021, "Member 'PCGMetadata_CreateVectorAttribute::bOverrideParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_CreateVectorAttribute, ReturnValue) == 0x000028, "Member 'PCGMetadata_CreateVectorAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.DeleteAttribute
// 0x0008 (0x0008 - 0x0000)
struct PCGMetadata_DeleteAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_DeleteAttribute) == 0x000004, "Wrong alignment on PCGMetadata_DeleteAttribute");
static_assert(sizeof(PCGMetadata_DeleteAttribute) == 0x000008, "Wrong size on PCGMetadata_DeleteAttribute");
static_assert(offsetof(PCGMetadata_DeleteAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_DeleteAttribute::AttributeName' has a wrong offset!");

// Function PCG.PCGMetadata.Initialize
// 0x0008 (0x0008 - 0x0000)
struct PCGMetadata_Initialize final
{
public:
	const class UPCGMetadata*                     InParent;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_Initialize) == 0x000008, "Wrong alignment on PCGMetadata_Initialize");
static_assert(sizeof(PCGMetadata_Initialize) == 0x000008, "Wrong size on PCGMetadata_Initialize");
static_assert(offsetof(PCGMetadata_Initialize, InParent) == 0x000000, "Member 'PCGMetadata_Initialize::InParent' has a wrong offset!");

// Function PCG.PCGMetadata.InitializeWithAttributeFilter
// 0x0060 (0x0060 - 0x0000)
struct PCGMetadata_InitializeWithAttributeFilter final
{
public:
	const class UPCGMetadata*                     InParent;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FName>                             InFilteredAttributes;                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPCGMetadataFilterMode                        InFilterMode;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadata_InitializeWithAttributeFilter) == 0x000008, "Wrong alignment on PCGMetadata_InitializeWithAttributeFilter");
static_assert(sizeof(PCGMetadata_InitializeWithAttributeFilter) == 0x000060, "Wrong size on PCGMetadata_InitializeWithAttributeFilter");
static_assert(offsetof(PCGMetadata_InitializeWithAttributeFilter, InParent) == 0x000000, "Member 'PCGMetadata_InitializeWithAttributeFilter::InParent' has a wrong offset!");
static_assert(offsetof(PCGMetadata_InitializeWithAttributeFilter, InFilteredAttributes) == 0x000008, "Member 'PCGMetadata_InitializeWithAttributeFilter::InFilteredAttributes' has a wrong offset!");
static_assert(offsetof(PCGMetadata_InitializeWithAttributeFilter, InFilterMode) == 0x000058, "Member 'PCGMetadata_InitializeWithAttributeFilter::InFilterMode' has a wrong offset!");

// Function PCG.PCGMetadata.K2_InitializeAsCopy
// 0x0018 (0x0018 - 0x0000)
struct PCGMetadata_K2_InitializeAsCopy final
{
public:
	const class UPCGMetadata*                     InMetadataToCopy;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 InOptionalEntriesToCopy;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_K2_InitializeAsCopy) == 0x000008, "Wrong alignment on PCGMetadata_K2_InitializeAsCopy");
static_assert(sizeof(PCGMetadata_K2_InitializeAsCopy) == 0x000018, "Wrong size on PCGMetadata_K2_InitializeAsCopy");
static_assert(offsetof(PCGMetadata_K2_InitializeAsCopy, InMetadataToCopy) == 0x000000, "Member 'PCGMetadata_K2_InitializeAsCopy::InMetadataToCopy' has a wrong offset!");
static_assert(offsetof(PCGMetadata_K2_InitializeAsCopy, InOptionalEntriesToCopy) == 0x000008, "Member 'PCGMetadata_K2_InitializeAsCopy::InOptionalEntriesToCopy' has a wrong offset!");

// Function PCG.PCGMetadata.K2_InitializeAsCopyWithAttributeFilter
// 0x0070 (0x0070 - 0x0000)
struct PCGMetadata_K2_InitializeAsCopyWithAttributeFilter final
{
public:
	const class UPCGMetadata*                     InMetadataToCopy;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FName>                             InFilteredAttributes;                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int64>                                 InOptionalEntriesToCopy;                           // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPCGMetadataFilterMode                        InFilterMode;                                      // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadata_K2_InitializeAsCopyWithAttributeFilter) == 0x000008, "Wrong alignment on PCGMetadata_K2_InitializeAsCopyWithAttributeFilter");
static_assert(sizeof(PCGMetadata_K2_InitializeAsCopyWithAttributeFilter) == 0x000070, "Wrong size on PCGMetadata_K2_InitializeAsCopyWithAttributeFilter");
static_assert(offsetof(PCGMetadata_K2_InitializeAsCopyWithAttributeFilter, InMetadataToCopy) == 0x000000, "Member 'PCGMetadata_K2_InitializeAsCopyWithAttributeFilter::InMetadataToCopy' has a wrong offset!");
static_assert(offsetof(PCGMetadata_K2_InitializeAsCopyWithAttributeFilter, InFilteredAttributes) == 0x000008, "Member 'PCGMetadata_K2_InitializeAsCopyWithAttributeFilter::InFilteredAttributes' has a wrong offset!");
static_assert(offsetof(PCGMetadata_K2_InitializeAsCopyWithAttributeFilter, InOptionalEntriesToCopy) == 0x000058, "Member 'PCGMetadata_K2_InitializeAsCopyWithAttributeFilter::InOptionalEntriesToCopy' has a wrong offset!");
static_assert(offsetof(PCGMetadata_K2_InitializeAsCopyWithAttributeFilter, InFilterMode) == 0x000068, "Member 'PCGMetadata_K2_InitializeAsCopyWithAttributeFilter::InFilterMode' has a wrong offset!");

// Function PCG.PCGMetadata.MergeAttributesByKey
// 0x0038 (0x0038 - 0x0000)
struct PCGMetadata_MergeAttributesByKey final
{
public:
	int64                                         KeyA;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetadataA;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         KeyB;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetadataB;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TargetKey;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGMetadataOp                                Op;                                                // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         OutKey;                                            // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_MergeAttributesByKey) == 0x000008, "Wrong alignment on PCGMetadata_MergeAttributesByKey");
static_assert(sizeof(PCGMetadata_MergeAttributesByKey) == 0x000038, "Wrong size on PCGMetadata_MergeAttributesByKey");
static_assert(offsetof(PCGMetadata_MergeAttributesByKey, KeyA) == 0x000000, "Member 'PCGMetadata_MergeAttributesByKey::KeyA' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergeAttributesByKey, MetadataA) == 0x000008, "Member 'PCGMetadata_MergeAttributesByKey::MetadataA' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergeAttributesByKey, KeyB) == 0x000010, "Member 'PCGMetadata_MergeAttributesByKey::KeyB' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergeAttributesByKey, MetadataB) == 0x000018, "Member 'PCGMetadata_MergeAttributesByKey::MetadataB' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergeAttributesByKey, TargetKey) == 0x000020, "Member 'PCGMetadata_MergeAttributesByKey::TargetKey' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergeAttributesByKey, Op) == 0x000028, "Member 'PCGMetadata_MergeAttributesByKey::Op' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergeAttributesByKey, OutKey) == 0x000030, "Member 'PCGMetadata_MergeAttributesByKey::OutKey' has a wrong offset!");

// Function PCG.PCGMetadata.MergePointAttributes
// 0x02A0 (0x02A0 - 0x0000)
struct PCGMetadata_MergePointAttributes final
{
public:
	struct FPCGPoint                              PointA;                                            // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetadataA;                                         // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              PointB;                                            // 0x00E0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetadataB;                                         // 0x01B0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              TargetPoint;                                       // 0x01C0(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EPCGMetadataOp                                Op;                                                // 0x0290(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0xF];                                      // 0x0291(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadata_MergePointAttributes) == 0x000010, "Wrong alignment on PCGMetadata_MergePointAttributes");
static_assert(sizeof(PCGMetadata_MergePointAttributes) == 0x0002A0, "Wrong size on PCGMetadata_MergePointAttributes");
static_assert(offsetof(PCGMetadata_MergePointAttributes, PointA) == 0x000000, "Member 'PCGMetadata_MergePointAttributes::PointA' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergePointAttributes, MetadataA) == 0x0000D0, "Member 'PCGMetadata_MergePointAttributes::MetadataA' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergePointAttributes, PointB) == 0x0000E0, "Member 'PCGMetadata_MergePointAttributes::PointB' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergePointAttributes, MetadataB) == 0x0001B0, "Member 'PCGMetadata_MergePointAttributes::MetadataB' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergePointAttributes, TargetPoint) == 0x0001C0, "Member 'PCGMetadata_MergePointAttributes::TargetPoint' has a wrong offset!");
static_assert(offsetof(PCGMetadata_MergePointAttributes, Op) == 0x000290, "Member 'PCGMetadata_MergePointAttributes::Op' has a wrong offset!");

// Function PCG.PCGMetadata.RenameAttribute
// 0x0014 (0x0014 - 0x0000)
struct PCGMetadata_RenameAttribute final
{
public:
	class FName                                   AttributeToRename;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NewAttributeName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadata_RenameAttribute) == 0x000004, "Wrong alignment on PCGMetadata_RenameAttribute");
static_assert(sizeof(PCGMetadata_RenameAttribute) == 0x000014, "Wrong size on PCGMetadata_RenameAttribute");
static_assert(offsetof(PCGMetadata_RenameAttribute, AttributeToRename) == 0x000000, "Member 'PCGMetadata_RenameAttribute::AttributeToRename' has a wrong offset!");
static_assert(offsetof(PCGMetadata_RenameAttribute, NewAttributeName) == 0x000008, "Member 'PCGMetadata_RenameAttribute::NewAttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_RenameAttribute, ReturnValue) == 0x000010, "Member 'PCGMetadata_RenameAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.ResetPointWeightedAttributes
// 0x00D0 (0x00D0 - 0x0000)
struct PCGMetadata_ResetPointWeightedAttributes final
{
public:
	struct FPCGPoint                              OutPoint;                                          // 0x0000(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_ResetPointWeightedAttributes) == 0x000010, "Wrong alignment on PCGMetadata_ResetPointWeightedAttributes");
static_assert(sizeof(PCGMetadata_ResetPointWeightedAttributes) == 0x0000D0, "Wrong size on PCGMetadata_ResetPointWeightedAttributes");
static_assert(offsetof(PCGMetadata_ResetPointWeightedAttributes, OutPoint) == 0x000000, "Member 'PCGMetadata_ResetPointWeightedAttributes::OutPoint' has a wrong offset!");

// Function PCG.PCGMetadata.ResetWeightedAttributesByKey
// 0x0010 (0x0010 - 0x0000)
struct PCGMetadata_ResetWeightedAttributesByKey final
{
public:
	int64                                         TargetKey;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutKey;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_ResetWeightedAttributesByKey) == 0x000008, "Wrong alignment on PCGMetadata_ResetWeightedAttributesByKey");
static_assert(sizeof(PCGMetadata_ResetWeightedAttributesByKey) == 0x000010, "Wrong size on PCGMetadata_ResetWeightedAttributesByKey");
static_assert(offsetof(PCGMetadata_ResetWeightedAttributesByKey, TargetKey) == 0x000000, "Member 'PCGMetadata_ResetWeightedAttributesByKey::TargetKey' has a wrong offset!");
static_assert(offsetof(PCGMetadata_ResetWeightedAttributesByKey, OutKey) == 0x000008, "Member 'PCGMetadata_ResetWeightedAttributesByKey::OutKey' has a wrong offset!");

// Function PCG.PCGMetadata.SetAttributesByKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadata_SetAttributesByKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     InMetaData;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TargetKey;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         OutKey;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_SetAttributesByKey) == 0x000008, "Wrong alignment on PCGMetadata_SetAttributesByKey");
static_assert(sizeof(PCGMetadata_SetAttributesByKey) == 0x000020, "Wrong size on PCGMetadata_SetAttributesByKey");
static_assert(offsetof(PCGMetadata_SetAttributesByKey, Key) == 0x000000, "Member 'PCGMetadata_SetAttributesByKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadata_SetAttributesByKey, InMetaData) == 0x000008, "Member 'PCGMetadata_SetAttributesByKey::InMetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadata_SetAttributesByKey, TargetKey) == 0x000010, "Member 'PCGMetadata_SetAttributesByKey::TargetKey' has a wrong offset!");
static_assert(offsetof(PCGMetadata_SetAttributesByKey, OutKey) == 0x000018, "Member 'PCGMetadata_SetAttributesByKey::OutKey' has a wrong offset!");

// Function PCG.PCGMetadata.SetPointAttributes
// 0x01B0 (0x01B0 - 0x0000)
struct PCGMetadata_SetPointAttributes final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              OutPoint;                                          // 0x00E0(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_SetPointAttributes) == 0x000010, "Wrong alignment on PCGMetadata_SetPointAttributes");
static_assert(sizeof(PCGMetadata_SetPointAttributes) == 0x0001B0, "Wrong size on PCGMetadata_SetPointAttributes");
static_assert(offsetof(PCGMetadata_SetPointAttributes, Point) == 0x000000, "Member 'PCGMetadata_SetPointAttributes::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadata_SetPointAttributes, MetaData) == 0x0000D0, "Member 'PCGMetadata_SetPointAttributes::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadata_SetPointAttributes, OutPoint) == 0x0000E0, "Member 'PCGMetadata_SetPointAttributes::OutPoint' has a wrong offset!");

// Function PCG.PCGMetadata.GetAttributeCount
// 0x0004 (0x0004 - 0x0000)
struct PCGMetadata_GetAttributeCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_GetAttributeCount) == 0x000004, "Wrong alignment on PCGMetadata_GetAttributeCount");
static_assert(sizeof(PCGMetadata_GetAttributeCount) == 0x000004, "Wrong size on PCGMetadata_GetAttributeCount");
static_assert(offsetof(PCGMetadata_GetAttributeCount, ReturnValue) == 0x000000, "Member 'PCGMetadata_GetAttributeCount::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.GetAttributes
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadata_GetAttributes final
{
public:
	TArray<class FName>                           AttributeNames;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EPCGMetadataTypes>                     AttributeTypes;                                    // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_GetAttributes) == 0x000008, "Wrong alignment on PCGMetadata_GetAttributes");
static_assert(sizeof(PCGMetadata_GetAttributes) == 0x000020, "Wrong size on PCGMetadata_GetAttributes");
static_assert(offsetof(PCGMetadata_GetAttributes, AttributeNames) == 0x000000, "Member 'PCGMetadata_GetAttributes::AttributeNames' has a wrong offset!");
static_assert(offsetof(PCGMetadata_GetAttributes, AttributeTypes) == 0x000010, "Member 'PCGMetadata_GetAttributes::AttributeTypes' has a wrong offset!");

// Function PCG.PCGMetadata.GetItemCountForChild
// 0x0008 (0x0008 - 0x0000)
struct PCGMetadata_GetItemCountForChild final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadata_GetItemCountForChild) == 0x000008, "Wrong alignment on PCGMetadata_GetItemCountForChild");
static_assert(sizeof(PCGMetadata_GetItemCountForChild) == 0x000008, "Wrong size on PCGMetadata_GetItemCountForChild");
static_assert(offsetof(PCGMetadata_GetItemCountForChild, ReturnValue) == 0x000000, "Member 'PCGMetadata_GetItemCountForChild::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.HasAttribute
// 0x000C (0x000C - 0x0000)
struct PCGMetadata_HasAttribute final
{
public:
	class FName                                   AttributeName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadata_HasAttribute) == 0x000004, "Wrong alignment on PCGMetadata_HasAttribute");
static_assert(sizeof(PCGMetadata_HasAttribute) == 0x00000C, "Wrong size on PCGMetadata_HasAttribute");
static_assert(offsetof(PCGMetadata_HasAttribute, AttributeName) == 0x000000, "Member 'PCGMetadata_HasAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadata_HasAttribute, ReturnValue) == 0x000008, "Member 'PCGMetadata_HasAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadata.HasCommonAttributes
// 0x0010 (0x0010 - 0x0000)
struct PCGMetadata_HasCommonAttributes final
{
public:
	const class UPCGMetadata*                     InMetaData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadata_HasCommonAttributes) == 0x000008, "Wrong alignment on PCGMetadata_HasCommonAttributes");
static_assert(sizeof(PCGMetadata_HasCommonAttributes) == 0x000010, "Wrong size on PCGMetadata_HasCommonAttributes");
static_assert(offsetof(PCGMetadata_HasCommonAttributes, InMetaData) == 0x000000, "Member 'PCGMetadata_HasCommonAttributes::InMetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadata_HasCommonAttributes, ReturnValue) == 0x000008, "Member 'PCGMetadata_HasCommonAttributes::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.CopyPoint
// 0x01C0 (0x01C0 - 0x0000)
struct PCGMetadataAccessorHelpers_CopyPoint final
{
public:
	struct FPCGPoint                              InPoint;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FPCGPoint                              OutPoint;                                          // 0x00D0(0x00D0)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bCopyMetadata;                                     // 0x01A0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UPCGMetadata*                     InMetaData;                                        // 0x01A8(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           OutMetadata;                                       // 0x01B0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_CopyPoint) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_CopyPoint");
static_assert(sizeof(PCGMetadataAccessorHelpers_CopyPoint) == 0x0001C0, "Wrong size on PCGMetadataAccessorHelpers_CopyPoint");
static_assert(offsetof(PCGMetadataAccessorHelpers_CopyPoint, InPoint) == 0x000000, "Member 'PCGMetadataAccessorHelpers_CopyPoint::InPoint' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_CopyPoint, OutPoint) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_CopyPoint::OutPoint' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_CopyPoint, bCopyMetadata) == 0x0001A0, "Member 'PCGMetadataAccessorHelpers_CopyPoint::bCopyMetadata' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_CopyPoint, InMetaData) == 0x0001A8, "Member 'PCGMetadataAccessorHelpers_CopyPoint::InMetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_CopyPoint, OutMetadata) == 0x0001B0, "Member 'PCGMetadataAccessorHelpers_CopyPoint::OutMetadata' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetBoolAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_GetBoolAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetBoolAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetBoolAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetBoolAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_GetBoolAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetBoolAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetBoolAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetBoolAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetBoolAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetBoolAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetBoolAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetBoolAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetBoolAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetBoolAttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetBoolAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetDoubleAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_GetDoubleAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetDoubleAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetDoubleAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetDoubleAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_GetDoubleAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetDoubleAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetDoubleAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetDoubleAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetDoubleAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetDoubleAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetDoubleAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetDoubleAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetDoubleAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetDoubleAttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetDoubleAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetFloatAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_GetFloatAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00E0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetFloatAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetFloatAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetFloatAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_GetFloatAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetFloatAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetFloatAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetFloatAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetFloatAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetFloatAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetFloatAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetFloatAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetFloatAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetFloatAttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetFloatAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetInteger32Attribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_GetInteger32Attribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00E0(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetInteger32Attribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetInteger32Attribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetInteger32Attribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_GetInteger32Attribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger32Attribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetInteger32Attribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger32Attribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetInteger32Attribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger32Attribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetInteger32Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger32Attribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetInteger32Attribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetInteger32AttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetInteger32AttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetInteger64Attribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_GetInteger64Attribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetInteger64Attribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetInteger64Attribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetInteger64Attribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_GetInteger64Attribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger64Attribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetInteger64Attribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger64Attribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetInteger64Attribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger64Attribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetInteger64Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger64Attribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetInteger64Attribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetInteger64AttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetInteger64AttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetNameAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_GetNameAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetNameAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetNameAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetNameAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_GetNameAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetNameAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetNameAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetNameAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetNameAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetNameAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetNameAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetNameAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetNameAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetQuatAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_GetQuatAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x00E0(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetQuatAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetQuatAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetQuatAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_GetQuatAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetQuatAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetQuatAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetQuatAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetQuatAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetQuatAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetQuatAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetQuatAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetQuatAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetQuatAttributeByMetadataKey
// 0x0040 (0x0040 - 0x0000)
struct PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey) == 0x000040, "Wrong size on PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey, ReturnValue) == 0x000020, "Member 'PCGMetadataAccessorHelpers_GetQuatAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetRotatorAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_GetRotatorAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x00E0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetRotatorAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetRotatorAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetRotatorAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_GetRotatorAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetRotatorAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetRotatorAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetRotatorAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetRotatorAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetRotatorAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetRotatorAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetRotatorAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetRotatorAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetRotatorAttributeByMetadataKey
// 0x0030 (0x0030 - 0x0000)
struct PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey) == 0x000030, "Wrong size on PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetRotatorAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetSoftClassPathAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_GetSoftClassPathAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         ReturnValue;                                       // 0x00E0(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetSoftClassPathAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetSoftClassPathAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetSoftClassPathAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_GetSoftClassPathAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftClassPathAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetSoftClassPathAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftClassPathAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetSoftClassPathAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftClassPathAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetSoftClassPathAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftClassPathAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetSoftClassPathAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetSoftClassPathAttributeByMetadataKey
// 0x0038 (0x0038 - 0x0000)
struct PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey) == 0x000038, "Wrong size on PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetSoftClassPathAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetSoftObjectPathAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReturnValue;                                       // 0x00E0(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetSoftObjectPathAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetSoftObjectPathAttributeByMetadataKey
// 0x0038 (0x0038 - 0x0000)
struct PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0018(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey) == 0x000038, "Wrong size on PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetSoftObjectPathAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetStringAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_GetStringAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00E0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetStringAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetStringAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetStringAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_GetStringAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetStringAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetStringAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetStringAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetStringAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetStringAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetStringAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetStringAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetStringAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetStringAttributeByMetadataKey
// 0x0028 (0x0028 - 0x0000)
struct PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey) == 0x000028, "Wrong size on PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetStringAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetTransformAttribute
// 0x0140 (0x0140 - 0x0000)
struct PCGMetadataAccessorHelpers_GetTransformAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x00E0(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetTransformAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetTransformAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetTransformAttribute) == 0x000140, "Wrong size on PCGMetadataAccessorHelpers_GetTransformAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetTransformAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetTransformAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetTransformAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetTransformAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetTransformAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetTransformAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetTransformAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetTransformAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetTransformAttributeByMetadataKey
// 0x0080 (0x0080 - 0x0000)
struct PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey) == 0x000080, "Wrong size on PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey, ReturnValue) == 0x000020, "Member 'PCGMetadataAccessorHelpers_GetTransformAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetVector2Attribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_GetVector2Attribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x00E0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetVector2Attribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetVector2Attribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetVector2Attribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_GetVector2Attribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector2Attribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetVector2Attribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector2Attribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetVector2Attribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector2Attribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetVector2Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector2Attribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetVector2Attribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetVector2AttributeByMetadataKey
// 0x0028 (0x0028 - 0x0000)
struct PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey) == 0x000028, "Wrong size on PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetVector2AttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetVector4Attribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_GetVector4Attribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ReturnValue;                                       // 0x00E0(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetVector4Attribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetVector4Attribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetVector4Attribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_GetVector4Attribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector4Attribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetVector4Attribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector4Attribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetVector4Attribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector4Attribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetVector4Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector4Attribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetVector4Attribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetVector4AttributeByMetadataKey
// 0x0040 (0x0040 - 0x0000)
struct PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey) == 0x000040, "Wrong size on PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey, ReturnValue) == 0x000020, "Member 'PCGMetadataAccessorHelpers_GetVector4AttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetVectorAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_GetVectorAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x00E0(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetVectorAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_GetVectorAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetVectorAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_GetVectorAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVectorAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetVectorAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVectorAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_GetVectorAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVectorAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_GetVectorAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVectorAttribute, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_GetVectorAttribute::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.GetVectorAttributeByMetadataKey
// 0x0030 (0x0030 - 0x0000)
struct PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey) == 0x000030, "Wrong size on PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_GetVectorAttributeByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.HasAttributeSet
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_HasAttributeSet final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x00D0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_HasAttributeSet) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_HasAttributeSet");
static_assert(sizeof(PCGMetadataAccessorHelpers_HasAttributeSet) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_HasAttributeSet");
static_assert(offsetof(PCGMetadataAccessorHelpers_HasAttributeSet, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_HasAttributeSet::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_HasAttributeSet, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_HasAttributeSet::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_HasAttributeSet, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_HasAttributeSet::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_HasAttributeSet, ReturnValue) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_HasAttributeSet::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.HasAttributeSetByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     MetaData;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey, ReturnValue) == 0x000018, "Member 'PCGMetadataAccessorHelpers_HasAttributeSetByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.InitializeMetadata
// 0x01C0 (0x01C0 - 0x0000)
struct PCGMetadataAccessorHelpers_InitializeMetadata final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPCGPoint                              ParentPoint;                                       // 0x00E0(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UPCGMetadata*                     ParentMetadata;                                    // 0x01B0(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_InitializeMetadata) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_InitializeMetadata");
static_assert(sizeof(PCGMetadataAccessorHelpers_InitializeMetadata) == 0x0001C0, "Wrong size on PCGMetadataAccessorHelpers_InitializeMetadata");
static_assert(offsetof(PCGMetadataAccessorHelpers_InitializeMetadata, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_InitializeMetadata::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_InitializeMetadata, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_InitializeMetadata::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_InitializeMetadata, ParentPoint) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_InitializeMetadata::ParentPoint' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_InitializeMetadata, ParentMetadata) == 0x0001B0, "Member 'PCGMetadataAccessorHelpers_InitializeMetadata::ParentMetadata' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetAttributeFromPropertyByMetadataKey
// 0x0030 (0x0030 - 0x0000)
struct PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Object;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey) == 0x000030, "Wrong size on PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey, Object) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey::Object' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey, PropertyName) == 0x000020, "Member 'PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey::PropertyName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey, ReturnValue) == 0x000028, "Member 'PCGMetadataAccessorHelpers_SetAttributeFromPropertyByMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetBoolAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_SetBoolAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetBoolAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetBoolAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetBoolAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_SetBoolAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetBoolAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetBoolAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetBoolAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetBoolAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetBoolAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetBoolAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetBoolAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetBoolAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetBoolAttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetBoolAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetDoubleAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_SetDoubleAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Value;                                             // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetDoubleAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetDoubleAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetDoubleAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_SetDoubleAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetDoubleAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetDoubleAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetDoubleAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetDoubleAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetDoubleAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetDoubleAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetDoubleAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetDoubleAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetDoubleAttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Value;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetDoubleAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetFloatAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_SetFloatAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x00E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetFloatAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetFloatAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetFloatAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_SetFloatAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetFloatAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetFloatAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetFloatAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetFloatAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetFloatAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetFloatAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetFloatAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetFloatAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetFloatAttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetFloatAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetInteger32Attribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_SetInteger32Attribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x00E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetInteger32Attribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetInteger32Attribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetInteger32Attribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_SetInteger32Attribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger32Attribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetInteger32Attribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger32Attribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetInteger32Attribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger32Attribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetInteger32Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger32Attribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetInteger32Attribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetInteger32AttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetInteger32AttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetInteger64Attribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_SetInteger64Attribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x00E0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetInteger64Attribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetInteger64Attribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetInteger64Attribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_SetInteger64Attribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger64Attribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetInteger64Attribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger64Attribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetInteger64Attribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger64Attribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetInteger64Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger64Attribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetInteger64Attribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetInteger64AttributeByMetadataKey
// 0x0020 (0x0020 - 0x0000)
struct PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey) == 0x000020, "Wrong size on PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetInteger64AttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetNameAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_SetNameAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Value;                                             // 0x00E0(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetNameAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetNameAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetNameAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_SetNameAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetNameAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetNameAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetNameAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetNameAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetNameAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetNameAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetNameAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetNameAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetQuatAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_SetQuatAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Value;                                             // 0x00E0(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetQuatAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetQuatAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetQuatAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_SetQuatAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetQuatAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetQuatAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetQuatAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetQuatAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetQuatAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetQuatAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetQuatAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetQuatAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetQuatAttributeByMetadataKey
// 0x0040 (0x0040 - 0x0000)
struct PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey) == 0x000040, "Wrong size on PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey, Value) == 0x000020, "Member 'PCGMetadataAccessorHelpers_SetQuatAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetRotatorAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_SetRotatorAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x00E0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetRotatorAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetRotatorAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetRotatorAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_SetRotatorAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetRotatorAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetRotatorAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetRotatorAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetRotatorAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetRotatorAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetRotatorAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetRotatorAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetRotatorAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetRotatorAttributeByMetadataKey
// 0x0030 (0x0030 - 0x0000)
struct PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey) == 0x000030, "Wrong size on PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetRotatorAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetSoftClassPathAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_SetSoftClassPathAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         Value;                                             // 0x00E0(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetSoftClassPathAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetSoftClassPathAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetSoftClassPathAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_SetSoftClassPathAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftClassPathAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetSoftClassPathAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftClassPathAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetSoftClassPathAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftClassPathAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetSoftClassPathAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftClassPathAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetSoftClassPathAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetSoftClassPathAttributeByMetadataKey
// 0x0038 (0x0038 - 0x0000)
struct PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         Value;                                             // 0x0018(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey) == 0x000038, "Wrong size on PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetSoftClassPathAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetSoftObjectPathAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Value;                                             // 0x00E0(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetSoftObjectPathAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetSoftObjectPathAttributeByMetadataKey
// 0x0038 (0x0038 - 0x0000)
struct PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Value;                                             // 0x0018(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey) == 0x000038, "Wrong size on PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetSoftObjectPathAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetStringAttribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_SetStringAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x00E0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetStringAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetStringAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetStringAttribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_SetStringAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetStringAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetStringAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetStringAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetStringAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetStringAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetStringAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetStringAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetStringAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetStringAttributeByMetadataKey
// 0x0028 (0x0028 - 0x0000)
struct PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey) == 0x000028, "Wrong size on PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetStringAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetTransformAttribute
// 0x0140 (0x0140 - 0x0000)
struct PCGMetadataAccessorHelpers_SetTransformAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Value;                                             // 0x00E0(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetTransformAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetTransformAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetTransformAttribute) == 0x000140, "Wrong size on PCGMetadataAccessorHelpers_SetTransformAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetTransformAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetTransformAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetTransformAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetTransformAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetTransformAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetTransformAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetTransformAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetTransformAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetTransformAttributeByMetadataKey
// 0x0080 (0x0080 - 0x0000)
struct PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0020(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey) == 0x000080, "Wrong size on PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey, Value) == 0x000020, "Member 'PCGMetadataAccessorHelpers_SetTransformAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetVector2Attribute
// 0x00F0 (0x00F0 - 0x0000)
struct PCGMetadataAccessorHelpers_SetVector2Attribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x00E0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetVector2Attribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetVector2Attribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetVector2Attribute) == 0x0000F0, "Wrong size on PCGMetadataAccessorHelpers_SetVector2Attribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector2Attribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetVector2Attribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector2Attribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetVector2Attribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector2Attribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetVector2Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector2Attribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetVector2Attribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetVector2AttributeByMetadataKey
// 0x0028 (0x0028 - 0x0000)
struct PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Value;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey) == 0x000028, "Wrong size on PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetVector2AttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetVector4Attribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_SetVector4Attribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               Value;                                             // 0x00E0(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetVector4Attribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetVector4Attribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetVector4Attribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_SetVector4Attribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector4Attribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetVector4Attribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector4Attribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetVector4Attribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector4Attribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetVector4Attribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector4Attribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetVector4Attribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetVector4AttributeByMetadataKey
// 0x0040 (0x0040 - 0x0000)
struct PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Value;                                             // 0x0020(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey) == 0x000040, "Wrong size on PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey, Value) == 0x000020, "Member 'PCGMetadataAccessorHelpers_SetVector4AttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetVectorAttribute
// 0x0100 (0x0100 - 0x0000)
struct PCGMetadataAccessorHelpers_SetVectorAttribute final
{
public:
	struct FPCGPoint                              Point;                                             // 0x0000(0x00D0)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x00D0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x00E0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetVectorAttribute) == 0x000010, "Wrong alignment on PCGMetadataAccessorHelpers_SetVectorAttribute");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetVectorAttribute) == 0x000100, "Wrong size on PCGMetadataAccessorHelpers_SetVectorAttribute");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVectorAttribute, Point) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetVectorAttribute::Point' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVectorAttribute, MetaData) == 0x0000D0, "Member 'PCGMetadataAccessorHelpers_SetVectorAttribute::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVectorAttribute, AttributeName) == 0x0000D8, "Member 'PCGMetadataAccessorHelpers_SetVectorAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVectorAttribute, Value) == 0x0000E0, "Member 'PCGMetadataAccessorHelpers_SetVectorAttribute::Value' has a wrong offset!");

// Function PCG.PCGMetadataAccessorHelpers.SetVectorAttributeByMetadataKey
// 0x0030 (0x0030 - 0x0000)
struct PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey final
{
public:
	int64                                         Key;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGMetadata*                           MetaData;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttributeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey) == 0x000008, "Wrong alignment on PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey");
static_assert(sizeof(PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey) == 0x000030, "Wrong size on PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey, Key) == 0x000000, "Member 'PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey::Key' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey, MetaData) == 0x000008, "Member 'PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey::MetaData' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey, AttributeName) == 0x000010, "Member 'PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey::AttributeName' has a wrong offset!");
static_assert(offsetof(PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey, Value) == 0x000018, "Member 'PCGMetadataAccessorHelpers_SetVectorAttributeByMetadataKey::Value' has a wrong offset!");

// Function PCG.PCGComponent.AddToManagedResources
// 0x0008 (0x0008 - 0x0000)
struct PCGComponent_AddToManagedResources final
{
public:
	class UPCGManagedResource*                    InResource;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_AddToManagedResources) == 0x000008, "Wrong alignment on PCGComponent_AddToManagedResources");
static_assert(sizeof(PCGComponent_AddToManagedResources) == 0x000008, "Wrong size on PCGComponent_AddToManagedResources");
static_assert(offsetof(PCGComponent_AddToManagedResources, InResource) == 0x000000, "Member 'PCGComponent_AddToManagedResources::InResource' has a wrong offset!");

// Function PCG.PCGComponent.Cleanup
// 0x0002 (0x0002 - 0x0000)
struct PCGComponent_Cleanup final
{
public:
	bool                                          bRemoveComponents;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSave;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_Cleanup) == 0x000001, "Wrong alignment on PCGComponent_Cleanup");
static_assert(sizeof(PCGComponent_Cleanup) == 0x000002, "Wrong size on PCGComponent_Cleanup");
static_assert(offsetof(PCGComponent_Cleanup, bRemoveComponents) == 0x000000, "Member 'PCGComponent_Cleanup::bRemoveComponents' has a wrong offset!");
static_assert(offsetof(PCGComponent_Cleanup, bSave) == 0x000001, "Member 'PCGComponent_Cleanup::bSave' has a wrong offset!");

// Function PCG.PCGComponent.CleanupLocal
// 0x0002 (0x0002 - 0x0000)
struct PCGComponent_CleanupLocal final
{
public:
	bool                                          bRemoveComponents;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSave;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_CleanupLocal) == 0x000001, "Wrong alignment on PCGComponent_CleanupLocal");
static_assert(sizeof(PCGComponent_CleanupLocal) == 0x000002, "Wrong size on PCGComponent_CleanupLocal");
static_assert(offsetof(PCGComponent_CleanupLocal, bRemoveComponents) == 0x000000, "Member 'PCGComponent_CleanupLocal::bRemoveComponents' has a wrong offset!");
static_assert(offsetof(PCGComponent_CleanupLocal, bSave) == 0x000001, "Member 'PCGComponent_CleanupLocal::bSave' has a wrong offset!");

// Function PCG.PCGComponent.ClearPCGLink
// 0x0010 (0x0010 - 0x0000)
struct PCGComponent_ClearPCGLink final
{
public:
	class UClass*                                 TemplateActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_ClearPCGLink) == 0x000008, "Wrong alignment on PCGComponent_ClearPCGLink");
static_assert(sizeof(PCGComponent_ClearPCGLink) == 0x000010, "Wrong size on PCGComponent_ClearPCGLink");
static_assert(offsetof(PCGComponent_ClearPCGLink, TemplateActor) == 0x000000, "Member 'PCGComponent_ClearPCGLink::TemplateActor' has a wrong offset!");
static_assert(offsetof(PCGComponent_ClearPCGLink, ReturnValue) == 0x000008, "Member 'PCGComponent_ClearPCGLink::ReturnValue' has a wrong offset!");

// Function PCG.PCGComponent.Generate
// 0x0001 (0x0001 - 0x0000)
struct PCGComponent_Generate final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_Generate) == 0x000001, "Wrong alignment on PCGComponent_Generate");
static_assert(sizeof(PCGComponent_Generate) == 0x000001, "Wrong size on PCGComponent_Generate");
static_assert(offsetof(PCGComponent_Generate, bForce) == 0x000000, "Member 'PCGComponent_Generate::bForce' has a wrong offset!");

// Function PCG.PCGComponent.GenerateLocal
// 0x0001 (0x0001 - 0x0000)
struct PCGComponent_GenerateLocal final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_GenerateLocal) == 0x000001, "Wrong alignment on PCGComponent_GenerateLocal");
static_assert(sizeof(PCGComponent_GenerateLocal) == 0x000001, "Wrong size on PCGComponent_GenerateLocal");
static_assert(offsetof(PCGComponent_GenerateLocal, bForce) == 0x000000, "Member 'PCGComponent_GenerateLocal::bForce' has a wrong offset!");

// Function PCG.PCGComponent.SetEditingMode
// 0x0002 (0x0002 - 0x0000)
struct PCGComponent_SetEditingMode final
{
public:
	EPCGEditorDirtyMode                           InEditingMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGEditorDirtyMode                           InSerializedEditingMode;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_SetEditingMode) == 0x000001, "Wrong alignment on PCGComponent_SetEditingMode");
static_assert(sizeof(PCGComponent_SetEditingMode) == 0x000002, "Wrong size on PCGComponent_SetEditingMode");
static_assert(offsetof(PCGComponent_SetEditingMode, InEditingMode) == 0x000000, "Member 'PCGComponent_SetEditingMode::InEditingMode' has a wrong offset!");
static_assert(offsetof(PCGComponent_SetEditingMode, InSerializedEditingMode) == 0x000001, "Member 'PCGComponent_SetEditingMode::InSerializedEditingMode' has a wrong offset!");

// Function PCG.PCGComponent.SetGraph
// 0x0008 (0x0008 - 0x0000)
struct PCGComponent_SetGraph final
{
public:
	class UPCGGraphInterface*                     InGraph;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_SetGraph) == 0x000008, "Wrong alignment on PCGComponent_SetGraph");
static_assert(sizeof(PCGComponent_SetGraph) == 0x000008, "Wrong size on PCGComponent_SetGraph");
static_assert(offsetof(PCGComponent_SetGraph, InGraph) == 0x000000, "Member 'PCGComponent_SetGraph::InGraph' has a wrong offset!");

// Function PCG.PCGComponent.GetEditingMode
// 0x0001 (0x0001 - 0x0000)
struct PCGComponent_GetEditingMode final
{
public:
	EPCGEditorDirtyMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_GetEditingMode) == 0x000001, "Wrong alignment on PCGComponent_GetEditingMode");
static_assert(sizeof(PCGComponent_GetEditingMode) == 0x000001, "Wrong size on PCGComponent_GetEditingMode");
static_assert(offsetof(PCGComponent_GetEditingMode, ReturnValue) == 0x000000, "Member 'PCGComponent_GetEditingMode::ReturnValue' has a wrong offset!");

// Function PCG.PCGComponent.GetGeneratedGraphOutput
// 0x0030 (0x0030 - 0x0000)
struct PCGComponent_GetGeneratedGraphOutput final
{
public:
	struct FPCGDataCollection                     ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_GetGeneratedGraphOutput) == 0x000008, "Wrong alignment on PCGComponent_GetGeneratedGraphOutput");
static_assert(sizeof(PCGComponent_GetGeneratedGraphOutput) == 0x000030, "Wrong size on PCGComponent_GetGeneratedGraphOutput");
static_assert(offsetof(PCGComponent_GetGeneratedGraphOutput, ReturnValue) == 0x000000, "Member 'PCGComponent_GetGeneratedGraphOutput::ReturnValue' has a wrong offset!");

// Function PCG.PCGComponent.GetSerializedEditingMode
// 0x0001 (0x0001 - 0x0000)
struct PCGComponent_GetSerializedEditingMode final
{
public:
	EPCGEditorDirtyMode                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGComponent_GetSerializedEditingMode) == 0x000001, "Wrong alignment on PCGComponent_GetSerializedEditingMode");
static_assert(sizeof(PCGComponent_GetSerializedEditingMode) == 0x000001, "Wrong size on PCGComponent_GetSerializedEditingMode");
static_assert(offsetof(PCGComponent_GetSerializedEditingMode, ReturnValue) == 0x000000, "Member 'PCGComponent_GetSerializedEditingMode::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.AddToCollection
// 0x0050 (0x0050 - 0x0000)
struct PCGDataFunctionLibrary_AddToCollection final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UPCGData*                         InData;                                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPinLabel;                                        // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InTags;                                            // 0x0040(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_AddToCollection) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_AddToCollection");
static_assert(sizeof(PCGDataFunctionLibrary_AddToCollection) == 0x000050, "Wrong size on PCGDataFunctionLibrary_AddToCollection");
static_assert(offsetof(PCGDataFunctionLibrary_AddToCollection, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_AddToCollection::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_AddToCollection, InData) == 0x000030, "Member 'PCGDataFunctionLibrary_AddToCollection::InData' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_AddToCollection, InPinLabel) == 0x000038, "Member 'PCGDataFunctionLibrary_AddToCollection::InPinLabel' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_AddToCollection, InTags) == 0x000040, "Member 'PCGDataFunctionLibrary_AddToCollection::InTags' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetAllSettings
// 0x0040 (0x0040 - 0x0000)
struct PCGDataFunctionLibrary_GetAllSettings final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetAllSettings) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetAllSettings");
static_assert(sizeof(PCGDataFunctionLibrary_GetAllSettings) == 0x000040, "Wrong size on PCGDataFunctionLibrary_GetAllSettings");
static_assert(offsetof(PCGDataFunctionLibrary_GetAllSettings, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetAllSettings::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetAllSettings, ReturnValue) == 0x000030, "Member 'PCGDataFunctionLibrary_GetAllSettings::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetInputs
// 0x0040 (0x0040 - 0x0000)
struct PCGDataFunctionLibrary_GetInputs final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetInputs) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetInputs");
static_assert(sizeof(PCGDataFunctionLibrary_GetInputs) == 0x000040, "Wrong size on PCGDataFunctionLibrary_GetInputs");
static_assert(offsetof(PCGDataFunctionLibrary_GetInputs, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetInputs::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetInputs, ReturnValue) == 0x000030, "Member 'PCGDataFunctionLibrary_GetInputs::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetInputsByPinLabel
// 0x0048 (0x0048 - 0x0000)
struct PCGDataFunctionLibrary_GetInputsByPinLabel final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   InPinLabel;                                        // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetInputsByPinLabel) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetInputsByPinLabel");
static_assert(sizeof(PCGDataFunctionLibrary_GetInputsByPinLabel) == 0x000048, "Wrong size on PCGDataFunctionLibrary_GetInputsByPinLabel");
static_assert(offsetof(PCGDataFunctionLibrary_GetInputsByPinLabel, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetInputsByPinLabel::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetInputsByPinLabel, InPinLabel) == 0x000030, "Member 'PCGDataFunctionLibrary_GetInputsByPinLabel::InPinLabel' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetInputsByPinLabel, ReturnValue) == 0x000038, "Member 'PCGDataFunctionLibrary_GetInputsByPinLabel::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetInputsByTag
// 0x0050 (0x0050 - 0x0000)
struct PCGDataFunctionLibrary_GetInputsByTag final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InTag;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetInputsByTag) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetInputsByTag");
static_assert(sizeof(PCGDataFunctionLibrary_GetInputsByTag) == 0x000050, "Wrong size on PCGDataFunctionLibrary_GetInputsByTag");
static_assert(offsetof(PCGDataFunctionLibrary_GetInputsByTag, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetInputsByTag::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetInputsByTag, InTag) == 0x000030, "Member 'PCGDataFunctionLibrary_GetInputsByTag::InTag' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetInputsByTag, ReturnValue) == 0x000040, "Member 'PCGDataFunctionLibrary_GetInputsByTag::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetParams
// 0x0040 (0x0040 - 0x0000)
struct PCGDataFunctionLibrary_GetParams final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetParams) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetParams");
static_assert(sizeof(PCGDataFunctionLibrary_GetParams) == 0x000040, "Wrong size on PCGDataFunctionLibrary_GetParams");
static_assert(offsetof(PCGDataFunctionLibrary_GetParams, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetParams::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetParams, ReturnValue) == 0x000030, "Member 'PCGDataFunctionLibrary_GetParams::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetParamsByPinLabel
// 0x0048 (0x0048 - 0x0000)
struct PCGDataFunctionLibrary_GetParamsByPinLabel final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   InPinLabel;                                        // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetParamsByPinLabel) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetParamsByPinLabel");
static_assert(sizeof(PCGDataFunctionLibrary_GetParamsByPinLabel) == 0x000048, "Wrong size on PCGDataFunctionLibrary_GetParamsByPinLabel");
static_assert(offsetof(PCGDataFunctionLibrary_GetParamsByPinLabel, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetParamsByPinLabel::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetParamsByPinLabel, InPinLabel) == 0x000030, "Member 'PCGDataFunctionLibrary_GetParamsByPinLabel::InPinLabel' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetParamsByPinLabel, ReturnValue) == 0x000038, "Member 'PCGDataFunctionLibrary_GetParamsByPinLabel::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetParamsByTag
// 0x0050 (0x0050 - 0x0000)
struct PCGDataFunctionLibrary_GetParamsByTag final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InTag;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetParamsByTag) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetParamsByTag");
static_assert(sizeof(PCGDataFunctionLibrary_GetParamsByTag) == 0x000050, "Wrong size on PCGDataFunctionLibrary_GetParamsByTag");
static_assert(offsetof(PCGDataFunctionLibrary_GetParamsByTag, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetParamsByTag::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetParamsByTag, InTag) == 0x000030, "Member 'PCGDataFunctionLibrary_GetParamsByTag::InTag' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetParamsByTag, ReturnValue) == 0x000040, "Member 'PCGDataFunctionLibrary_GetParamsByTag::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetTypedInputs
// 0x0058 (0x0058 - 0x0000)
struct PCGDataFunctionLibrary_GetTypedInputs final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 OutTaggedData;                                     // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UPCGData>                   InDataTypeClass;                                   // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPCGData*>                       ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetTypedInputs) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetTypedInputs");
static_assert(sizeof(PCGDataFunctionLibrary_GetTypedInputs) == 0x000058, "Wrong size on PCGDataFunctionLibrary_GetTypedInputs");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputs, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetTypedInputs::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputs, OutTaggedData) == 0x000030, "Member 'PCGDataFunctionLibrary_GetTypedInputs::OutTaggedData' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputs, InDataTypeClass) == 0x000040, "Member 'PCGDataFunctionLibrary_GetTypedInputs::InDataTypeClass' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputs, ReturnValue) == 0x000048, "Member 'PCGDataFunctionLibrary_GetTypedInputs::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetTypedInputsByPin
// 0x0070 (0x0070 - 0x0000)
struct PCGDataFunctionLibrary_GetTypedInputsByPin final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPCGPinProperties                      InPin;                                             // 0x0030(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPCGTaggedData>                 OutTaggedData;                                     // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UPCGData>                   InDataTypeClass;                                   // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPCGData*>                       ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetTypedInputsByPin) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetTypedInputsByPin");
static_assert(sizeof(PCGDataFunctionLibrary_GetTypedInputsByPin) == 0x000070, "Wrong size on PCGDataFunctionLibrary_GetTypedInputsByPin");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPin, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPin::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPin, InPin) == 0x000030, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPin::InPin' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPin, OutTaggedData) == 0x000048, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPin::OutTaggedData' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPin, InDataTypeClass) == 0x000058, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPin::InDataTypeClass' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPin, ReturnValue) == 0x000060, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPin::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetTypedInputsByPinLabel
// 0x0060 (0x0060 - 0x0000)
struct PCGDataFunctionLibrary_GetTypedInputsByPinLabel final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   InPinLabel;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 OutTaggedData;                                     // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UPCGData>                   InDataTypeClass;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPCGData*>                       ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetTypedInputsByPinLabel) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetTypedInputsByPinLabel");
static_assert(sizeof(PCGDataFunctionLibrary_GetTypedInputsByPinLabel) == 0x000060, "Wrong size on PCGDataFunctionLibrary_GetTypedInputsByPinLabel");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPinLabel, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPinLabel::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPinLabel, InPinLabel) == 0x000030, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPinLabel::InPinLabel' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPinLabel, OutTaggedData) == 0x000038, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPinLabel::OutTaggedData' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPinLabel, InDataTypeClass) == 0x000048, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPinLabel::InDataTypeClass' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByPinLabel, ReturnValue) == 0x000050, "Member 'PCGDataFunctionLibrary_GetTypedInputsByPinLabel::ReturnValue' has a wrong offset!");

// Function PCG.PCGDataFunctionLibrary.GetTypedInputsByTag
// 0x0068 (0x0068 - 0x0000)
struct PCGDataFunctionLibrary_GetTypedInputsByTag final
{
public:
	struct FPCGDataCollection                     InCollection;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InTag;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPCGTaggedData>                 OutTaggedData;                                     // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UPCGData>                   InDataTypeClass;                                   // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPCGData*>                       ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDataFunctionLibrary_GetTypedInputsByTag) == 0x000008, "Wrong alignment on PCGDataFunctionLibrary_GetTypedInputsByTag");
static_assert(sizeof(PCGDataFunctionLibrary_GetTypedInputsByTag) == 0x000068, "Wrong size on PCGDataFunctionLibrary_GetTypedInputsByTag");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByTag, InCollection) == 0x000000, "Member 'PCGDataFunctionLibrary_GetTypedInputsByTag::InCollection' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByTag, InTag) == 0x000030, "Member 'PCGDataFunctionLibrary_GetTypedInputsByTag::InTag' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByTag, OutTaggedData) == 0x000040, "Member 'PCGDataFunctionLibrary_GetTypedInputsByTag::OutTaggedData' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByTag, InDataTypeClass) == 0x000050, "Member 'PCGDataFunctionLibrary_GetTypedInputsByTag::InDataTypeClass' has a wrong offset!");
static_assert(offsetof(PCGDataFunctionLibrary_GetTypedInputsByTag, ReturnValue) == 0x000058, "Member 'PCGDataFunctionLibrary_GetTypedInputsByTag::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphInterface.GetMutablePCGGraph
// 0x0008 (0x0008 - 0x0000)
struct PCGGraphInterface_GetMutablePCGGraph final
{
public:
	class UPCGGraph*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphInterface_GetMutablePCGGraph) == 0x000008, "Wrong alignment on PCGGraphInterface_GetMutablePCGGraph");
static_assert(sizeof(PCGGraphInterface_GetMutablePCGGraph) == 0x000008, "Wrong size on PCGGraphInterface_GetMutablePCGGraph");
static_assert(offsetof(PCGGraphInterface_GetMutablePCGGraph, ReturnValue) == 0x000000, "Member 'PCGGraphInterface_GetMutablePCGGraph::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraphInterface.GetConstPCGGraph
// 0x0008 (0x0008 - 0x0000)
struct PCGGraphInterface_GetConstPCGGraph final
{
public:
	const class UPCGGraph*                        ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraphInterface_GetConstPCGGraph) == 0x000008, "Wrong alignment on PCGGraphInterface_GetConstPCGGraph");
static_assert(sizeof(PCGGraphInterface_GetConstPCGGraph) == 0x000008, "Wrong size on PCGGraphInterface_GetConstPCGGraph");
static_assert(offsetof(PCGGraphInterface_GetConstPCGGraph, ReturnValue) == 0x000000, "Member 'PCGGraphInterface_GetConstPCGGraph::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraph.AddEdge
// 0x0028 (0x0028 - 0x0000)
struct PCGGraph_AddEdge final
{
public:
	class UPCGNode*                               From;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FromPinLabel;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToPinLabel;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraph_AddEdge) == 0x000008, "Wrong alignment on PCGGraph_AddEdge");
static_assert(sizeof(PCGGraph_AddEdge) == 0x000028, "Wrong size on PCGGraph_AddEdge");
static_assert(offsetof(PCGGraph_AddEdge, From) == 0x000000, "Member 'PCGGraph_AddEdge::From' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddEdge, FromPinLabel) == 0x000008, "Member 'PCGGraph_AddEdge::FromPinLabel' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddEdge, To) == 0x000010, "Member 'PCGGraph_AddEdge::To' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddEdge, ToPinLabel) == 0x000018, "Member 'PCGGraph_AddEdge::ToPinLabel' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddEdge, ReturnValue) == 0x000020, "Member 'PCGGraph_AddEdge::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraph.AddNodeCopy
// 0x0018 (0x0018 - 0x0000)
struct PCGGraph_AddNodeCopy final
{
public:
	const class UPCGSettings*                     InSettings;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGSettings*                           DefaultNodeSettings;                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraph_AddNodeCopy) == 0x000008, "Wrong alignment on PCGGraph_AddNodeCopy");
static_assert(sizeof(PCGGraph_AddNodeCopy) == 0x000018, "Wrong size on PCGGraph_AddNodeCopy");
static_assert(offsetof(PCGGraph_AddNodeCopy, InSettings) == 0x000000, "Member 'PCGGraph_AddNodeCopy::InSettings' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddNodeCopy, DefaultNodeSettings) == 0x000008, "Member 'PCGGraph_AddNodeCopy::DefaultNodeSettings' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddNodeCopy, ReturnValue) == 0x000010, "Member 'PCGGraph_AddNodeCopy::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraph.AddNodeInstance
// 0x0010 (0x0010 - 0x0000)
struct PCGGraph_AddNodeInstance final
{
public:
	class UPCGSettings*                           InSettings;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraph_AddNodeInstance) == 0x000008, "Wrong alignment on PCGGraph_AddNodeInstance");
static_assert(sizeof(PCGGraph_AddNodeInstance) == 0x000010, "Wrong size on PCGGraph_AddNodeInstance");
static_assert(offsetof(PCGGraph_AddNodeInstance, InSettings) == 0x000000, "Member 'PCGGraph_AddNodeInstance::InSettings' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddNodeInstance, ReturnValue) == 0x000008, "Member 'PCGGraph_AddNodeInstance::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraph.AddNodeOfType
// 0x0018 (0x0018 - 0x0000)
struct PCGGraph_AddNodeOfType final
{
public:
	TSubclassOf<class UPCGSettings>               InSettingsClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGSettings*                           DefaultNodeSettings;                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraph_AddNodeOfType) == 0x000008, "Wrong alignment on PCGGraph_AddNodeOfType");
static_assert(sizeof(PCGGraph_AddNodeOfType) == 0x000018, "Wrong size on PCGGraph_AddNodeOfType");
static_assert(offsetof(PCGGraph_AddNodeOfType, InSettingsClass) == 0x000000, "Member 'PCGGraph_AddNodeOfType::InSettingsClass' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddNodeOfType, DefaultNodeSettings) == 0x000008, "Member 'PCGGraph_AddNodeOfType::DefaultNodeSettings' has a wrong offset!");
static_assert(offsetof(PCGGraph_AddNodeOfType, ReturnValue) == 0x000010, "Member 'PCGGraph_AddNodeOfType::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraph.RemoveEdge
// 0x0028 (0x0028 - 0x0000)
struct PCGGraph_RemoveEdge final
{
public:
	class UPCGNode*                               From;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FromLabel;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGNode*                               To;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToLabel;                                           // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGGraph_RemoveEdge) == 0x000008, "Wrong alignment on PCGGraph_RemoveEdge");
static_assert(sizeof(PCGGraph_RemoveEdge) == 0x000028, "Wrong size on PCGGraph_RemoveEdge");
static_assert(offsetof(PCGGraph_RemoveEdge, From) == 0x000000, "Member 'PCGGraph_RemoveEdge::From' has a wrong offset!");
static_assert(offsetof(PCGGraph_RemoveEdge, FromLabel) == 0x000008, "Member 'PCGGraph_RemoveEdge::FromLabel' has a wrong offset!");
static_assert(offsetof(PCGGraph_RemoveEdge, To) == 0x000010, "Member 'PCGGraph_RemoveEdge::To' has a wrong offset!");
static_assert(offsetof(PCGGraph_RemoveEdge, ToLabel) == 0x000018, "Member 'PCGGraph_RemoveEdge::ToLabel' has a wrong offset!");
static_assert(offsetof(PCGGraph_RemoveEdge, ReturnValue) == 0x000020, "Member 'PCGGraph_RemoveEdge::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraph.RemoveNode
// 0x0008 (0x0008 - 0x0000)
struct PCGGraph_RemoveNode final
{
public:
	class UPCGNode*                               InNode;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraph_RemoveNode) == 0x000008, "Wrong alignment on PCGGraph_RemoveNode");
static_assert(sizeof(PCGGraph_RemoveNode) == 0x000008, "Wrong size on PCGGraph_RemoveNode");
static_assert(offsetof(PCGGraph_RemoveNode, InNode) == 0x000000, "Member 'PCGGraph_RemoveNode::InNode' has a wrong offset!");

// Function PCG.PCGGraph.RemoveNodes
// 0x0010 (0x0010 - 0x0000)
struct PCGGraph_RemoveNodes final
{
public:
	TArray<class UPCGNode*>                       InNodes;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraph_RemoveNodes) == 0x000008, "Wrong alignment on PCGGraph_RemoveNodes");
static_assert(sizeof(PCGGraph_RemoveNodes) == 0x000010, "Wrong size on PCGGraph_RemoveNodes");
static_assert(offsetof(PCGGraph_RemoveNodes, InNodes) == 0x000000, "Member 'PCGGraph_RemoveNodes::InNodes' has a wrong offset!");

// Function PCG.PCGGraph.GetInputNode
// 0x0008 (0x0008 - 0x0000)
struct PCGGraph_GetInputNode final
{
public:
	class UPCGNode*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraph_GetInputNode) == 0x000008, "Wrong alignment on PCGGraph_GetInputNode");
static_assert(sizeof(PCGGraph_GetInputNode) == 0x000008, "Wrong size on PCGGraph_GetInputNode");
static_assert(offsetof(PCGGraph_GetInputNode, ReturnValue) == 0x000000, "Member 'PCGGraph_GetInputNode::ReturnValue' has a wrong offset!");

// Function PCG.PCGGraph.GetOutputNode
// 0x0008 (0x0008 - 0x0000)
struct PCGGraph_GetOutputNode final
{
public:
	class UPCGNode*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGGraph_GetOutputNode) == 0x000008, "Wrong alignment on PCGGraph_GetOutputNode");
static_assert(sizeof(PCGGraph_GetOutputNode) == 0x000008, "Wrong size on PCGGraph_GetOutputNode");
static_assert(offsetof(PCGGraph_GetOutputNode, ReturnValue) == 0x000000, "Member 'PCGGraph_GetOutputNode::ReturnValue' has a wrong offset!");

// Function PCG.PCGParamData.FindOrAddMetadataKey
// 0x0010 (0x0010 - 0x0000)
struct PCGParamData_FindOrAddMetadataKey final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGParamData_FindOrAddMetadataKey) == 0x000008, "Wrong alignment on PCGParamData_FindOrAddMetadataKey");
static_assert(sizeof(PCGParamData_FindOrAddMetadataKey) == 0x000010, "Wrong size on PCGParamData_FindOrAddMetadataKey");
static_assert(offsetof(PCGParamData_FindOrAddMetadataKey, InName) == 0x000000, "Member 'PCGParamData_FindOrAddMetadataKey::InName' has a wrong offset!");
static_assert(offsetof(PCGParamData_FindOrAddMetadataKey, ReturnValue) == 0x000008, "Member 'PCGParamData_FindOrAddMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGParamData.MutableMetadata
// 0x0008 (0x0008 - 0x0000)
struct PCGParamData_MutableMetadata final
{
public:
	class UPCGMetadata*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGParamData_MutableMetadata) == 0x000008, "Wrong alignment on PCGParamData_MutableMetadata");
static_assert(sizeof(PCGParamData_MutableMetadata) == 0x000008, "Wrong size on PCGParamData_MutableMetadata");
static_assert(offsetof(PCGParamData_MutableMetadata, ReturnValue) == 0x000000, "Member 'PCGParamData_MutableMetadata::ReturnValue' has a wrong offset!");

// Function PCG.PCGParamData.ConstMetadata
// 0x0008 (0x0008 - 0x0000)
struct PCGParamData_ConstMetadata final
{
public:
	const class UPCGMetadata*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGParamData_ConstMetadata) == 0x000008, "Wrong alignment on PCGParamData_ConstMetadata");
static_assert(sizeof(PCGParamData_ConstMetadata) == 0x000008, "Wrong size on PCGParamData_ConstMetadata");
static_assert(offsetof(PCGParamData_ConstMetadata, ReturnValue) == 0x000000, "Member 'PCGParamData_ConstMetadata::ReturnValue' has a wrong offset!");

// Function PCG.PCGParamData.FilterParamsByKey
// 0x0010 (0x0010 - 0x0000)
struct PCGParamData_FilterParamsByKey final
{
public:
	int64                                         InKey;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGParamData*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGParamData_FilterParamsByKey) == 0x000008, "Wrong alignment on PCGParamData_FilterParamsByKey");
static_assert(sizeof(PCGParamData_FilterParamsByKey) == 0x000010, "Wrong size on PCGParamData_FilterParamsByKey");
static_assert(offsetof(PCGParamData_FilterParamsByKey, InKey) == 0x000000, "Member 'PCGParamData_FilterParamsByKey::InKey' has a wrong offset!");
static_assert(offsetof(PCGParamData_FilterParamsByKey, ReturnValue) == 0x000008, "Member 'PCGParamData_FilterParamsByKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGParamData.FilterParamsByName
// 0x0010 (0x0010 - 0x0000)
struct PCGParamData_FilterParamsByName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPCGParamData*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGParamData_FilterParamsByName) == 0x000008, "Wrong alignment on PCGParamData_FilterParamsByName");
static_assert(sizeof(PCGParamData_FilterParamsByName) == 0x000010, "Wrong size on PCGParamData_FilterParamsByName");
static_assert(offsetof(PCGParamData_FilterParamsByName, InName) == 0x000000, "Member 'PCGParamData_FilterParamsByName::InName' has a wrong offset!");
static_assert(offsetof(PCGParamData_FilterParamsByName, ReturnValue) == 0x000008, "Member 'PCGParamData_FilterParamsByName::ReturnValue' has a wrong offset!");

// Function PCG.PCGParamData.FindMetadataKey
// 0x0010 (0x0010 - 0x0000)
struct PCGParamData_FindMetadataKey final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGParamData_FindMetadataKey) == 0x000008, "Wrong alignment on PCGParamData_FindMetadataKey");
static_assert(sizeof(PCGParamData_FindMetadataKey) == 0x000010, "Wrong size on PCGParamData_FindMetadataKey");
static_assert(offsetof(PCGParamData_FindMetadataKey, InName) == 0x000000, "Member 'PCGParamData_FindMetadataKey::InName' has a wrong offset!");
static_assert(offsetof(PCGParamData_FindMetadataKey, ReturnValue) == 0x000008, "Member 'PCGParamData_FindMetadataKey::ReturnValue' has a wrong offset!");

// Function PCG.PCGBlueprintPinHelpers.BreakPinProperty
// 0x0020 (0x0020 - 0x0000)
struct PCGBlueprintPinHelpers_BreakPinProperty final
{
public:
	struct FPCGPinProperties                      PinProperty;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   Label;                                             // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleData;                                // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleConnections;                         // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdvancedPin;                                    // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGExclusiveDataType                         AllowedType;                                       // 0x001F(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintPinHelpers_BreakPinProperty) == 0x000004, "Wrong alignment on PCGBlueprintPinHelpers_BreakPinProperty");
static_assert(sizeof(PCGBlueprintPinHelpers_BreakPinProperty) == 0x000020, "Wrong size on PCGBlueprintPinHelpers_BreakPinProperty");
static_assert(offsetof(PCGBlueprintPinHelpers_BreakPinProperty, PinProperty) == 0x000000, "Member 'PCGBlueprintPinHelpers_BreakPinProperty::PinProperty' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_BreakPinProperty, Label) == 0x000014, "Member 'PCGBlueprintPinHelpers_BreakPinProperty::Label' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_BreakPinProperty, bAllowMultipleData) == 0x00001C, "Member 'PCGBlueprintPinHelpers_BreakPinProperty::bAllowMultipleData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_BreakPinProperty, bAllowMultipleConnections) == 0x00001D, "Member 'PCGBlueprintPinHelpers_BreakPinProperty::bAllowMultipleConnections' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_BreakPinProperty, bIsAdvancedPin) == 0x00001E, "Member 'PCGBlueprintPinHelpers_BreakPinProperty::bIsAdvancedPin' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_BreakPinProperty, AllowedType) == 0x00001F, "Member 'PCGBlueprintPinHelpers_BreakPinProperty::AllowedType' has a wrong offset!");

// Function PCG.PCGBlueprintPinHelpers.MakePinProperty
// 0x0020 (0x0020 - 0x0000)
struct PCGBlueprintPinHelpers_MakePinProperty final
{
public:
	class FName                                   Label;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleData;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleConnections;                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdvancedPin;                                    // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPCGExclusiveDataType                         AllowedType;                                       // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPCGPinProperties                      ReturnValue;                                       // 0x000C(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGBlueprintPinHelpers_MakePinProperty) == 0x000004, "Wrong alignment on PCGBlueprintPinHelpers_MakePinProperty");
static_assert(sizeof(PCGBlueprintPinHelpers_MakePinProperty) == 0x000020, "Wrong size on PCGBlueprintPinHelpers_MakePinProperty");
static_assert(offsetof(PCGBlueprintPinHelpers_MakePinProperty, Label) == 0x000000, "Member 'PCGBlueprintPinHelpers_MakePinProperty::Label' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_MakePinProperty, bAllowMultipleData) == 0x000008, "Member 'PCGBlueprintPinHelpers_MakePinProperty::bAllowMultipleData' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_MakePinProperty, bAllowMultipleConnections) == 0x000009, "Member 'PCGBlueprintPinHelpers_MakePinProperty::bAllowMultipleConnections' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_MakePinProperty, bIsAdvancedPin) == 0x00000A, "Member 'PCGBlueprintPinHelpers_MakePinProperty::bIsAdvancedPin' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_MakePinProperty, AllowedType) == 0x00000B, "Member 'PCGBlueprintPinHelpers_MakePinProperty::AllowedType' has a wrong offset!");
static_assert(offsetof(PCGBlueprintPinHelpers_MakePinProperty, ReturnValue) == 0x00000C, "Member 'PCGBlueprintPinHelpers_MakePinProperty::ReturnValue' has a wrong offset!");

// Function PCG.PCGPin.SetToolTip
// 0x0010 (0x0010 - 0x0000)
struct PCGPin_SetToolTip final
{
public:
	class FText                                   InTooltip;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPin_SetToolTip) == 0x000008, "Wrong alignment on PCGPin_SetToolTip");
static_assert(sizeof(PCGPin_SetToolTip) == 0x000010, "Wrong size on PCGPin_SetToolTip");
static_assert(offsetof(PCGPin_SetToolTip, InTooltip) == 0x000000, "Member 'PCGPin_SetToolTip::InTooltip' has a wrong offset!");

// Function PCG.PCGPin.GetTooltip
// 0x0010 (0x0010 - 0x0000)
struct PCGPin_GetTooltip final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPin_GetTooltip) == 0x000008, "Wrong alignment on PCGPin_GetTooltip");
static_assert(sizeof(PCGPin_GetTooltip) == 0x000010, "Wrong size on PCGPin_GetTooltip");
static_assert(offsetof(PCGPin_GetTooltip, ReturnValue) == 0x000000, "Member 'PCGPin_GetTooltip::ReturnValue' has a wrong offset!");

// Function PCG.PCGPinPropertiesBlueprintHelpers.AllowsMultipleConnections
// 0x0018 (0x0018 - 0x0000)
struct PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections final
{
public:
	struct FPCGPinProperties                      PinProperties;                                     // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections) == 0x000004, "Wrong alignment on PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections");
static_assert(sizeof(PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections) == 0x000018, "Wrong size on PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections, PinProperties) == 0x000000, "Member 'PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections::PinProperties' has a wrong offset!");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections, ReturnValue) == 0x000014, "Member 'PCGPinPropertiesBlueprintHelpers_AllowsMultipleConnections::ReturnValue' has a wrong offset!");

// Function PCG.PCGPinPropertiesBlueprintHelpers.IsAdvancedPin
// 0x0018 (0x0018 - 0x0000)
struct PCGPinPropertiesBlueprintHelpers_IsAdvancedPin final
{
public:
	struct FPCGPinProperties                      PinProperties;                                     // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGPinPropertiesBlueprintHelpers_IsAdvancedPin) == 0x000004, "Wrong alignment on PCGPinPropertiesBlueprintHelpers_IsAdvancedPin");
static_assert(sizeof(PCGPinPropertiesBlueprintHelpers_IsAdvancedPin) == 0x000018, "Wrong size on PCGPinPropertiesBlueprintHelpers_IsAdvancedPin");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_IsAdvancedPin, PinProperties) == 0x000000, "Member 'PCGPinPropertiesBlueprintHelpers_IsAdvancedPin::PinProperties' has a wrong offset!");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_IsAdvancedPin, ReturnValue) == 0x000014, "Member 'PCGPinPropertiesBlueprintHelpers_IsAdvancedPin::ReturnValue' has a wrong offset!");

// Function PCG.PCGPinPropertiesBlueprintHelpers.IsNormalPin
// 0x0018 (0x0018 - 0x0000)
struct PCGPinPropertiesBlueprintHelpers_IsNormalPin final
{
public:
	struct FPCGPinProperties                      PinProperties;                                     // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGPinPropertiesBlueprintHelpers_IsNormalPin) == 0x000004, "Wrong alignment on PCGPinPropertiesBlueprintHelpers_IsNormalPin");
static_assert(sizeof(PCGPinPropertiesBlueprintHelpers_IsNormalPin) == 0x000018, "Wrong size on PCGPinPropertiesBlueprintHelpers_IsNormalPin");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_IsNormalPin, PinProperties) == 0x000000, "Member 'PCGPinPropertiesBlueprintHelpers_IsNormalPin::PinProperties' has a wrong offset!");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_IsNormalPin, ReturnValue) == 0x000014, "Member 'PCGPinPropertiesBlueprintHelpers_IsNormalPin::ReturnValue' has a wrong offset!");

// Function PCG.PCGPinPropertiesBlueprintHelpers.IsRequiredPin
// 0x0018 (0x0018 - 0x0000)
struct PCGPinPropertiesBlueprintHelpers_IsRequiredPin final
{
public:
	struct FPCGPinProperties                      PinProperties;                                     // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGPinPropertiesBlueprintHelpers_IsRequiredPin) == 0x000004, "Wrong alignment on PCGPinPropertiesBlueprintHelpers_IsRequiredPin");
static_assert(sizeof(PCGPinPropertiesBlueprintHelpers_IsRequiredPin) == 0x000018, "Wrong size on PCGPinPropertiesBlueprintHelpers_IsRequiredPin");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_IsRequiredPin, PinProperties) == 0x000000, "Member 'PCGPinPropertiesBlueprintHelpers_IsRequiredPin::PinProperties' has a wrong offset!");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_IsRequiredPin, ReturnValue) == 0x000014, "Member 'PCGPinPropertiesBlueprintHelpers_IsRequiredPin::ReturnValue' has a wrong offset!");

// Function PCG.PCGPinPropertiesBlueprintHelpers.SetAdvancedPin
// 0x0014 (0x0014 - 0x0000)
struct PCGPinPropertiesBlueprintHelpers_SetAdvancedPin final
{
public:
	struct FPCGPinProperties                      PinProperties;                                     // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPinPropertiesBlueprintHelpers_SetAdvancedPin) == 0x000004, "Wrong alignment on PCGPinPropertiesBlueprintHelpers_SetAdvancedPin");
static_assert(sizeof(PCGPinPropertiesBlueprintHelpers_SetAdvancedPin) == 0x000014, "Wrong size on PCGPinPropertiesBlueprintHelpers_SetAdvancedPin");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_SetAdvancedPin, PinProperties) == 0x000000, "Member 'PCGPinPropertiesBlueprintHelpers_SetAdvancedPin::PinProperties' has a wrong offset!");

// Function PCG.PCGPinPropertiesBlueprintHelpers.SetAllowMultipleConnections
// 0x0018 (0x0018 - 0x0000)
struct PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections final
{
public:
	struct FPCGPinProperties                      PinProperties;                                     // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleConnections;                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections) == 0x000004, "Wrong alignment on PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections");
static_assert(sizeof(PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections) == 0x000018, "Wrong size on PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections, PinProperties) == 0x000000, "Member 'PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections::PinProperties' has a wrong offset!");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections, bAllowMultipleConnections) == 0x000014, "Member 'PCGPinPropertiesBlueprintHelpers_SetAllowMultipleConnections::bAllowMultipleConnections' has a wrong offset!");

// Function PCG.PCGPinPropertiesBlueprintHelpers.SetNormalPin
// 0x0014 (0x0014 - 0x0000)
struct PCGPinPropertiesBlueprintHelpers_SetNormalPin final
{
public:
	struct FPCGPinProperties                      PinProperties;                                     // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPinPropertiesBlueprintHelpers_SetNormalPin) == 0x000004, "Wrong alignment on PCGPinPropertiesBlueprintHelpers_SetNormalPin");
static_assert(sizeof(PCGPinPropertiesBlueprintHelpers_SetNormalPin) == 0x000014, "Wrong size on PCGPinPropertiesBlueprintHelpers_SetNormalPin");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_SetNormalPin, PinProperties) == 0x000000, "Member 'PCGPinPropertiesBlueprintHelpers_SetNormalPin::PinProperties' has a wrong offset!");

// Function PCG.PCGPinPropertiesBlueprintHelpers.SetRequiredPin
// 0x0014 (0x0014 - 0x0000)
struct PCGPinPropertiesBlueprintHelpers_SetRequiredPin final
{
public:
	struct FPCGPinProperties                      PinProperties;                                     // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGPinPropertiesBlueprintHelpers_SetRequiredPin) == 0x000004, "Wrong alignment on PCGPinPropertiesBlueprintHelpers_SetRequiredPin");
static_assert(sizeof(PCGPinPropertiesBlueprintHelpers_SetRequiredPin) == 0x000014, "Wrong size on PCGPinPropertiesBlueprintHelpers_SetRequiredPin");
static_assert(offsetof(PCGPinPropertiesBlueprintHelpers_SetRequiredPin, PinProperties) == 0x000000, "Member 'PCGPinPropertiesBlueprintHelpers_SetRequiredPin::PinProperties' has a wrong offset!");

// Function PCG.PCGDeterminismTestBlueprintBase.ExecuteTest
// 0x0090 (0x0090 - 0x0000)
struct PCGDeterminismTestBlueprintBase_ExecuteTest final
{
public:
	const class UPCGNode*                         InPCGNode;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeterminismTestResult                 InOutTestResult;                                   // 0x0008(0x0088)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PCGDeterminismTestBlueprintBase_ExecuteTest) == 0x000008, "Wrong alignment on PCGDeterminismTestBlueprintBase_ExecuteTest");
static_assert(sizeof(PCGDeterminismTestBlueprintBase_ExecuteTest) == 0x000090, "Wrong size on PCGDeterminismTestBlueprintBase_ExecuteTest");
static_assert(offsetof(PCGDeterminismTestBlueprintBase_ExecuteTest, InPCGNode) == 0x000000, "Member 'PCGDeterminismTestBlueprintBase_ExecuteTest::InPCGNode' has a wrong offset!");
static_assert(offsetof(PCGDeterminismTestBlueprintBase_ExecuteTest, InOutTestResult) == 0x000008, "Member 'PCGDeterminismTestBlueprintBase_ExecuteTest::InOutTestResult' has a wrong offset!");

}

