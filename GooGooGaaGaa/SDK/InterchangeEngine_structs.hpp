#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InterchangeEngine

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "InterchangeCore_structs.hpp"


namespace SDK
{

// Enum InterchangeEngine.EInterchangePipelineConfigurationDialogResult
// NumValues: 0x0004
enum class EInterchangePipelineConfigurationDialogResult : uint8
{
	Cancel                                   = 0,
	Import                                   = 1,
	ImportAll                                = 2,
	EInterchangePipelineConfigurationDialogResult_MAX = 3,
};

// ScriptStruct InterchangeEngine.InterchangeFilePickerParameters
// 0x0030 (0x0030 - 0x0000)
struct FInterchangeFilePickerParameters final
{
public:
	bool                                          bAllowMultipleFiles;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FEF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FString                                 DefaultPath;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterchangeFilePickerParameters) == 0x000008, "Wrong alignment on FInterchangeFilePickerParameters");
static_assert(sizeof(FInterchangeFilePickerParameters) == 0x000030, "Wrong size on FInterchangeFilePickerParameters");
static_assert(offsetof(FInterchangeFilePickerParameters, bAllowMultipleFiles) == 0x000000, "Member 'FInterchangeFilePickerParameters::bAllowMultipleFiles' has a wrong offset!");
static_assert(offsetof(FInterchangeFilePickerParameters, Title) == 0x000008, "Member 'FInterchangeFilePickerParameters::Title' has a wrong offset!");
static_assert(offsetof(FInterchangeFilePickerParameters, DefaultPath) == 0x000020, "Member 'FInterchangeFilePickerParameters::DefaultPath' has a wrong offset!");

// ScriptStruct InterchangeEngine.InterchangeStackInfo
// 0x0018 (0x0018 - 0x0000)
struct FInterchangeStackInfo final
{
public:
	class FName                                   StackName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInterchangePipelineBase*>       Pipelines;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterchangeStackInfo) == 0x000008, "Wrong alignment on FInterchangeStackInfo");
static_assert(sizeof(FInterchangeStackInfo) == 0x000018, "Wrong size on FInterchangeStackInfo");
static_assert(offsetof(FInterchangeStackInfo, StackName) == 0x000000, "Member 'FInterchangeStackInfo::StackName' has a wrong offset!");
static_assert(offsetof(FInterchangeStackInfo, Pipelines) == 0x000008, "Member 'FInterchangeStackInfo::Pipelines' has a wrong offset!");

// ScriptStruct InterchangeEngine.InterchangeTranslatorPipelines
// 0x0038 (0x0038 - 0x0000)
struct FInterchangeTranslatorPipelines final
{
public:
	TSoftClassPtr<class UClass>                   Translator;                                        // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                Pipelines;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterchangeTranslatorPipelines) == 0x000008, "Wrong alignment on FInterchangeTranslatorPipelines");
static_assert(sizeof(FInterchangeTranslatorPipelines) == 0x000038, "Wrong size on FInterchangeTranslatorPipelines");
static_assert(offsetof(FInterchangeTranslatorPipelines, Translator) == 0x000000, "Member 'FInterchangeTranslatorPipelines::Translator' has a wrong offset!");
static_assert(offsetof(FInterchangeTranslatorPipelines, Pipelines) == 0x000028, "Member 'FInterchangeTranslatorPipelines::Pipelines' has a wrong offset!");

// ScriptStruct InterchangeEngine.InterchangePipelineStack
// 0x0020 (0x0020 - 0x0000)
struct FInterchangePipelineStack final
{
public:
	TArray<struct FSoftObjectPath>                Pipelines;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInterchangeTranslatorPipelines> PerTranslatorPipelines;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterchangePipelineStack) == 0x000008, "Wrong alignment on FInterchangePipelineStack");
static_assert(sizeof(FInterchangePipelineStack) == 0x000020, "Wrong size on FInterchangePipelineStack");
static_assert(offsetof(FInterchangePipelineStack, Pipelines) == 0x000000, "Member 'FInterchangePipelineStack::Pipelines' has a wrong offset!");
static_assert(offsetof(FInterchangePipelineStack, PerTranslatorPipelines) == 0x000010, "Member 'FInterchangePipelineStack::PerTranslatorPipelines' has a wrong offset!");

// ScriptStruct InterchangeEngine.InterchangeImportSettings
// 0x0088 (0x0088 - 0x0000)
struct FInterchangeImportSettings
{
public:
	TMap<class FName, struct FInterchangePipelineStack> PipelineStacks;                                    // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	class FName                                   DefaultPipelineStack;                              // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PipelineConfigurationDialogClass;                  // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPipelineStacksConfigurationDialog;            // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FF0[0x7];                                     // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInterchangeImportSettings) == 0x000008, "Wrong alignment on FInterchangeImportSettings");
static_assert(sizeof(FInterchangeImportSettings) == 0x000088, "Wrong size on FInterchangeImportSettings");
static_assert(offsetof(FInterchangeImportSettings, PipelineStacks) == 0x000000, "Member 'FInterchangeImportSettings::PipelineStacks' has a wrong offset!");
static_assert(offsetof(FInterchangeImportSettings, DefaultPipelineStack) == 0x000050, "Member 'FInterchangeImportSettings::DefaultPipelineStack' has a wrong offset!");
static_assert(offsetof(FInterchangeImportSettings, PipelineConfigurationDialogClass) == 0x000058, "Member 'FInterchangeImportSettings::PipelineConfigurationDialogClass' has a wrong offset!");
static_assert(offsetof(FInterchangeImportSettings, bShowPipelineStacksConfigurationDialog) == 0x000080, "Member 'FInterchangeImportSettings::bShowPipelineStacksConfigurationDialog' has a wrong offset!");

// ScriptStruct InterchangeEngine.InterchangeContentImportSettings
// 0x00A0 (0x0128 - 0x0088)
struct FInterchangeContentImportSettings final : public FInterchangeImportSettings
{
public:
	TMap<EInterchangeTranslatorAssetType, class FName> DefaultPipelineStackOverride;                      // 0x0088(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<EInterchangeTranslatorAssetType, bool>   ShowPipelineStacksConfigurationDialogOverride;     // 0x00D8(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInterchangeContentImportSettings) == 0x000008, "Wrong alignment on FInterchangeContentImportSettings");
static_assert(sizeof(FInterchangeContentImportSettings) == 0x000128, "Wrong size on FInterchangeContentImportSettings");
static_assert(offsetof(FInterchangeContentImportSettings, DefaultPipelineStackOverride) == 0x000088, "Member 'FInterchangeContentImportSettings::DefaultPipelineStackOverride' has a wrong offset!");
static_assert(offsetof(FInterchangeContentImportSettings, ShowPipelineStacksConfigurationDialogOverride) == 0x0000D8, "Member 'FInterchangeContentImportSettings::ShowPipelineStacksConfigurationDialogOverride' has a wrong offset!");

// ScriptStruct InterchangeEngine.PropertyData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPropertyData final
{
public:
	uint8                                         Pad_2FF1[0x18];                                    // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPropertyData) == 0x000008, "Wrong alignment on FPropertyData");
static_assert(sizeof(FPropertyData) == 0x000018, "Wrong size on FPropertyData");

// ScriptStruct InterchangeEngine.ImportAssetParameters
// 0x00A0 (0x00A0 - 0x0000)
struct FImportAssetParameters final
{
public:
	class UObject*                                ReimportAsset;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReimportSourceIndex;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutomated;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowRedirectors;                                // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FF2[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                OverridePipelines;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Object)>        OnAssetDone;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FF3[0x10];                                    // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class UObject*>& Objects)> OnAssetsImportDone;                                // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FF4[0x10];                                    // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UObject* Object)>        OnSceneObjectDone;                                 // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FF5[0x10];                                    // 0x0070(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TArray<class UObject*>& Objects)> OnSceneImportDone;                                 // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FF6[0x10];                                    // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImportAssetParameters) == 0x000008, "Wrong alignment on FImportAssetParameters");
static_assert(sizeof(FImportAssetParameters) == 0x0000A0, "Wrong size on FImportAssetParameters");
static_assert(offsetof(FImportAssetParameters, ReimportAsset) == 0x000000, "Member 'FImportAssetParameters::ReimportAsset' has a wrong offset!");
static_assert(offsetof(FImportAssetParameters, ReimportSourceIndex) == 0x000008, "Member 'FImportAssetParameters::ReimportSourceIndex' has a wrong offset!");
static_assert(offsetof(FImportAssetParameters, bIsAutomated) == 0x00000C, "Member 'FImportAssetParameters::bIsAutomated' has a wrong offset!");
static_assert(offsetof(FImportAssetParameters, bFollowRedirectors) == 0x00000D, "Member 'FImportAssetParameters::bFollowRedirectors' has a wrong offset!");
static_assert(offsetof(FImportAssetParameters, OverridePipelines) == 0x000010, "Member 'FImportAssetParameters::OverridePipelines' has a wrong offset!");
static_assert(offsetof(FImportAssetParameters, OnAssetDone) == 0x000020, "Member 'FImportAssetParameters::OnAssetDone' has a wrong offset!");
static_assert(offsetof(FImportAssetParameters, OnAssetsImportDone) == 0x000040, "Member 'FImportAssetParameters::OnAssetsImportDone' has a wrong offset!");
static_assert(offsetof(FImportAssetParameters, OnSceneObjectDone) == 0x000060, "Member 'FImportAssetParameters::OnSceneObjectDone' has a wrong offset!");
static_assert(offsetof(FImportAssetParameters, OnSceneImportDone) == 0x000080, "Member 'FImportAssetParameters::OnSceneImportDone' has a wrong offset!");

}

